//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.72;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.72] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x5d4113=_0x4007;function _0x4007(_0x4120b9,_0x513586){const _0x19d1f8=_0x19d1();return _0x4007=function(_0x40075e,_0x36aaa9){_0x40075e=_0x40075e-0x13d;let _0x1f3bb1=_0x19d1f8[_0x40075e];return _0x1f3bb1;},_0x4007(_0x4120b9,_0x513586);}(function(_0x1db41f,_0x416706){const _0x576685=_0x4007,_0x298276=_0x1db41f();while(!![]){try{const _0x577b4d=parseInt(_0x576685(0xbfa))/0x1+parseInt(_0x576685(0x5aa))/0x2*(-parseInt(_0x576685(0x9b2))/0x3)+parseInt(_0x576685(0x3c6))/0x4+parseInt(_0x576685(0x846))/0x5*(-parseInt(_0x576685(0xa25))/0x6)+-parseInt(_0x576685(0x7d3))/0x7*(parseInt(_0x576685(0x2a5))/0x8)+parseInt(_0x576685(0x879))/0x9*(-parseInt(_0x576685(0x83e))/0xa)+parseInt(_0x576685(0x4e3))/0xb*(parseInt(_0x576685(0x30d))/0xc);if(_0x577b4d===_0x416706)break;else _0x298276['push'](_0x298276['shift']());}catch(_0x2445d3){_0x298276['push'](_0x298276['shift']());}}}(_0x19d1,0xf1388));var label='BattleCore',tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x5d4113(0x475)](function(_0x2ebee8){const _0x28583e=_0x5d4113;return _0x2ebee8['status']&&_0x2ebee8[_0x28583e(0xc56)][_0x28583e(0x4b0)]('['+label+']');})[0x0];VisuMZ[label][_0x5d4113(0x326)]=VisuMZ[label]['Settings']||{},VisuMZ[_0x5d4113(0xb3d)]=function(_0x272803,_0x2e3035){const _0x53878f=_0x5d4113;for(const _0x55eecc in _0x2e3035){if('sccVX'===_0x53878f(0xa87)){if(_0x55eecc[_0x53878f(0xb51)](/(.*):(.*)/i)){if('IbboJ'!=='oLnfW'){const _0x5b3e62=String(RegExp['$1']),_0xd4f27f=String(RegExp['$2'])[_0x53878f(0x6d1)]()[_0x53878f(0xacb)]();let _0x34e5be,_0x544247,_0x2c6578;switch(_0xd4f27f){case _0x53878f(0x571):_0x34e5be=_0x2e3035[_0x55eecc]!==''?Number(_0x2e3035[_0x55eecc]):0x0;break;case _0x53878f(0x6fc):_0x544247=_0x2e3035[_0x55eecc]!==''?JSON[_0x53878f(0xc11)](_0x2e3035[_0x55eecc]):[],_0x34e5be=_0x544247[_0x53878f(0x390)](_0x58c2cd=>Number(_0x58c2cd));break;case'EVAL':_0x34e5be=_0x2e3035[_0x55eecc]!==''?eval(_0x2e3035[_0x55eecc]):null;break;case'ARRAYEVAL':_0x544247=_0x2e3035[_0x55eecc]!==''?JSON[_0x53878f(0xc11)](_0x2e3035[_0x55eecc]):[],_0x34e5be=_0x544247[_0x53878f(0x390)](_0x47fff8=>eval(_0x47fff8));break;case _0x53878f(0x688):_0x34e5be=_0x2e3035[_0x55eecc]!==''?JSON['parse'](_0x2e3035[_0x55eecc]):'';break;case _0x53878f(0x1f2):_0x544247=_0x2e3035[_0x55eecc]!==''?JSON[_0x53878f(0xc11)](_0x2e3035[_0x55eecc]):[],_0x34e5be=_0x544247[_0x53878f(0x390)](_0x237875=>JSON['parse'](_0x237875));break;case'FUNC':_0x34e5be=_0x2e3035[_0x55eecc]!==''?new Function(JSON[_0x53878f(0xc11)](_0x2e3035[_0x55eecc])):new Function('return\x200');break;case _0x53878f(0x945):_0x544247=_0x2e3035[_0x55eecc]!==''?JSON[_0x53878f(0xc11)](_0x2e3035[_0x55eecc]):[],_0x34e5be=_0x544247[_0x53878f(0x390)](_0x183387=>new Function(JSON[_0x53878f(0xc11)](_0x183387)));break;case _0x53878f(0x489):_0x34e5be=_0x2e3035[_0x55eecc]!==''?String(_0x2e3035[_0x55eecc]):'';break;case'ARRAYSTR':_0x544247=_0x2e3035[_0x55eecc]!==''?JSON[_0x53878f(0xc11)](_0x2e3035[_0x55eecc]):[],_0x34e5be=_0x544247[_0x53878f(0x390)](_0x849131=>String(_0x849131));break;case'STRUCT':_0x2c6578=_0x2e3035[_0x55eecc]!==''?JSON[_0x53878f(0xc11)](_0x2e3035[_0x55eecc]):{},_0x272803[_0x5b3e62]={},VisuMZ['ConvertParams'](_0x272803[_0x5b3e62],_0x2c6578);continue;case'ARRAYSTRUCT':_0x544247=_0x2e3035[_0x55eecc]!==''?JSON[_0x53878f(0xc11)](_0x2e3035[_0x55eecc]):[],_0x34e5be=_0x544247[_0x53878f(0x390)](_0x28f683=>VisuMZ[_0x53878f(0xb3d)]({},JSON[_0x53878f(0xc11)](_0x28f683)));break;default:continue;}_0x272803[_0x5b3e62]=_0x34e5be;}else _0xfb8a77[_0x53878f(0x710)][_0x53878f(0x415)][_0x53878f(0x701)](this,_0x9cb849),this[_0x53878f(0xa6b)]();}}else this['requestMotion'](_0x53878f(0x8eb));}return _0x272803;},(_0x202ca7=>{const _0x147fb6=_0x5d4113,_0x3f9034=_0x202ca7[_0x147fb6(0x2c0)];for(const _0x321c95 of dependencies){if(!Imported[_0x321c95]){alert(_0x147fb6(0x2cb)[_0x147fb6(0x85d)](_0x3f9034,_0x321c95)),SceneManager[_0x147fb6(0x3e4)]();break;}}const _0x38fb27=_0x202ca7[_0x147fb6(0xc56)];if(_0x38fb27['match'](/\[Version[ ](.*?)\]/i)){if(_0x147fb6(0x306)!==_0x147fb6(0x2d5)){const _0x4a5ef8=Number(RegExp['$1']);_0x4a5ef8!==VisuMZ[label][_0x147fb6(0xa2b)]&&(alert(_0x147fb6(0x5b4)[_0x147fb6(0x85d)](_0x3f9034,_0x4a5ef8)),SceneManager['exit']());}else _0x110c9f[_0x147fb6(0x8be)](_0x189ef7);}if(_0x38fb27['match'](/\[Tier[ ](\d+)\]/i)){const _0x2fc05a=Number(RegExp['$1']);if(_0x2fc05a<tier){if(_0x147fb6(0x67b)!==_0x147fb6(0x67b)){let _0x17b149=0x0;this['_baseLineStack'][_0x147fb6(0x7da)]>0x0&&(_0x17b149=this[_0x147fb6(0x5a6)][this[_0x147fb6(0x5a6)][_0x147fb6(0x7da)]-0x1]),this[_0x147fb6(0xb6c)]['length']>_0x17b149?this[_0x147fb6(0x64b)]():this[_0x147fb6(0xa6b)]();}else alert(_0x147fb6(0x689)[_0x147fb6(0x85d)](_0x3f9034,_0x2fc05a,tier)),SceneManager[_0x147fb6(0x3e4)]();}else tier=Math[_0x147fb6(0xbcc)](_0x2fc05a,tier);}VisuMZ[_0x147fb6(0xb3d)](VisuMZ[label]['Settings'],_0x202ca7[_0x147fb6(0x4d7)]);})(pluginData),VisuMZ[_0x5d4113(0x6c4)]=function(_0x4a4bb4){const _0x68ff4a=_0x5d4113;let _0x535953=[];for(const _0xcd5d43 of _0x4a4bb4){if(_0x68ff4a(0xc5f)===_0x68ff4a(0xc5f))_0x535953=_0x535953[_0x68ff4a(0x545)](VisuMZ[_0x68ff4a(0x784)](_0xcd5d43));else{const _0x976fbd=_0x436e1e[_0x68ff4a(0x800)]()?-0x1:0x1;let _0x4cf725=this['_baseX'];_0x4cf725+=this['extraPositionX']();let _0x22ca55=this[_0x68ff4a(0x559)];const _0x3abf26=this[_0x68ff4a(0x148)]['scale']['y'];_0x22ca55+=this['extraPositionY']();const _0x1df87d=_0x40ef91[_0x68ff4a(0x5a4)][_0x68ff4a(0x480)];if(_0x1df87d&&this[_0x68ff4a(0x341)]===_0x1df87d){_0x4cf725+=_0x1df87d['x']-this[_0x68ff4a(0x9eb)]();const _0x1e07f5=_0x1df87d[_0x68ff4a(0x950)]()*0x3/0x4;_0x22ca55=_0x1df87d['y']+_0x1e07f5,_0x22ca55=_0x16f974[_0x68ff4a(0x15d)](_0x22ca55,_0x1df87d['y']+this['y']-this[_0x68ff4a(0x6ce)]+_0x1e07f5);}_0x5eca49['x']=_0x369ef9['round'](_0x4cf725+this['damageOffsetX']()*_0x976fbd),_0xc8ad25['y']=_0x156b3c[_0x68ff4a(0xb50)](_0x22ca55+this[_0x68ff4a(0x764)]());}}return _0x535953['filter'](_0x326ac4=>_0x326ac4);},VisuMZ[_0x5d4113(0x784)]=function(_0x1cba15){const _0xaffa0c=_0x5d4113,_0x45bd9d=BattleManager[_0xaffa0c(0x2c1)]()['filter'](_0x203161=>_0x203161&&_0x203161[_0xaffa0c(0x461)]()),_0x5589a0=BattleManager[_0xaffa0c(0x932)],_0x58ff88=BattleManager[_0xaffa0c(0x3c7)],_0x5931d8=BattleManager[_0xaffa0c(0xbba)]?BattleManager[_0xaffa0c(0xbba)][_0xaffa0c(0x481)](0x0):_0x45bd9d;_0x1cba15=_0x1cba15['toLowerCase']()[_0xaffa0c(0xacb)]();if(_0x1cba15===_0xaffa0c(0x88f))return[_0x5589a0];else{if(_0x1cba15===_0xaffa0c(0x168))return[_0x58ff88];else{if(_0x1cba15==='prev\x20target'){if(_0x58ff88){const _0x38ae11=_0x5931d8[_0xaffa0c(0x6ef)](_0x58ff88);return _0x38ae11>=0x0?[_0x5931d8[_0x38ae11-0x1]||_0x58ff88]:[_0x58ff88];}}else{if(_0x1cba15===_0xaffa0c(0x141)){if(_0x58ff88){const _0x1be48b=_0x5931d8[_0xaffa0c(0x6ef)](_0x58ff88);return _0x1be48b>=0x0?[_0x5931d8[_0x1be48b+0x1]||_0x58ff88]:[_0x58ff88];}}else{if(_0x1cba15===_0xaffa0c(0x15f))return _0x5931d8;else{if(_0x1cba15===_0xaffa0c(0x4e4))return'SyJeQ'==='SyJeQ'?[_0x5589a0][_0xaffa0c(0x545)](_0x5931d8):_0x597eb0[_0xaffa0c(0x5a4)][_0xaffa0c(0x684)]&&_0x26dbd9[_0xaffa0c(0x5a4)][_0xaffa0c(0x684)][_0xaffa0c(0x61d)]&&_0x135f94[_0xaffa0c(0x5a4)][_0xaffa0c(0x684)][_0xaffa0c(0x9ed)][_0xaffa0c(0x4b0)](this[_0xaffa0c(0x484)]);else{if(_0x1cba15===_0xaffa0c(0xa5b)){if(_0xaffa0c(0x21f)===_0xaffa0c(0x21f))return _0x45bd9d[_0xaffa0c(0x475)](_0x474ee8=>_0x474ee8!==_0x5589a0&&!_0x5931d8[_0xaffa0c(0x4b0)](_0x474ee8)&&_0x474ee8['notFocusValid']());else _0xd30b1['setValue'](_0x2b50c8['SwitchMissEvade'],![]);}}}}}}}if(_0x5589a0){if(_0x1cba15===_0xaffa0c(0x3f5)){if(_0xaffa0c(0x6eb)===_0xaffa0c(0x9f1))_0x2f7cb4[_0xaffa0c(0x710)]['JS'][_0x4864c9]['call'](this,this[_0xaffa0c(0x652)](),this['subject'](),_0xaebe3d,_0x17340f);else return _0x5589a0[_0xaffa0c(0x7a6)]()[_0xaffa0c(0x331)]();}else{if(_0x1cba15===_0xaffa0c(0x718))return _0x5589a0['friendsUnit']()[_0xaffa0c(0x331)]()[_0xaffa0c(0x475)](_0x1687eb=>_0x1687eb!==_0x5589a0);else{if(_0x1cba15===_0xaffa0c(0x50a)){if('mcnhP'===_0xaffa0c(0x17d))return _0x5589a0['friendsUnit']()[_0xaffa0c(0x331)]()[_0xaffa0c(0x475)](_0x134004=>_0x134004!==_0x58ff88);else{if(!_0x598eab[_0xaffa0c(0x9f8)]())return;const _0x513eb7=this[_0xaffa0c(0x3ee)]();if(!_0x513eb7)return;_0x513eb7[_0xaffa0c(0x5a3)](_0x4dcaf9,_0x3d29c8,_0x4482ad,_0xa7c54e);}}else{if(_0x1cba15===_0xaffa0c(0xa15))return _0x5589a0['friendsUnit']()[_0xaffa0c(0x1e1)]();else{if(_0x1cba15[_0xaffa0c(0xb51)](/FRIEND INDEX (\d+)/i)){if(_0xaffa0c(0x226)===_0xaffa0c(0x226)){const _0x5d2b41=Number(RegExp['$1']);return[_0x5589a0[_0xaffa0c(0x7a6)]()[_0xaffa0c(0x738)]()[_0x5d2b41]];}else this[_0xaffa0c(0x5fd)]()?this[_0xaffa0c(0xa5a)]():_0x3022cf['BattleCore'][_0xaffa0c(0x8b4)][_0xaffa0c(0x701)](this);}}}}}if(_0x1cba15==='alive\x20opponents')return _0x5589a0[_0xaffa0c(0x759)]()[_0xaffa0c(0x331)]();else{if(_0x1cba15===_0xaffa0c(0x1a6))return _0x5589a0[_0xaffa0c(0x759)]()[_0xaffa0c(0x331)]()[_0xaffa0c(0x475)](_0x19509f=>_0x19509f!==_0x58ff88);else{if(_0x1cba15==='dead\x20opponents'){if(_0xaffa0c(0xc36)===_0xaffa0c(0xc36))return _0x5589a0[_0xaffa0c(0x759)]()[_0xaffa0c(0x1e1)]();else{if(_0x401741[_0xaffa0c(0x160)]['position']===0x3)return![];}}else{if(_0x1cba15[_0xaffa0c(0xb51)](/OPPONENT INDEX (\d+)/i)){const _0x4f95c5=Number(RegExp['$1']);return[_0x5589a0[_0xaffa0c(0x759)]()['members']()[_0x4f95c5]];}}}}}if(_0x1cba15===_0xaffa0c(0x664)){if(_0xaffa0c(0xc22)!==_0xaffa0c(0x34c))return $gameParty['aliveMembers']();else{const _0xfbb029=this[_0xaffa0c(0x621)]();return _0xfbb029?_0xfbb029[_0xaffa0c(0x7de)]:0x0;}}else{if(_0x1cba15===_0xaffa0c(0x23d))return $gameParty[_0xaffa0c(0x331)]()[_0xaffa0c(0x475)](_0x74f92a=>_0x74f92a!==_0x5589a0);else{if(_0x1cba15===_0xaffa0c(0x9cd)){if(_0xaffa0c(0x273)===_0xaffa0c(0x4fb))_0x39e703=_0x3b1cd7['swapEnemyIDs'](_0x349d96),_0x14ccc1[_0xaffa0c(0x710)][_0xaffa0c(0x789)][_0xaffa0c(0x701)](this,_0x927f3,_0x174e53,_0x35b081),_0x2e8472['VisuMZ_1_ElementStatusCore']&&this[_0xaffa0c(0x84f)](),this[_0xaffa0c(0x57b)](),this['setupBattleCoreData'](),_0x78fc8c[_0xaffa0c(0x22e)]&&this['recoverAll']();else return $gameParty[_0xaffa0c(0x331)]()['filter'](_0x1016a8=>_0x1016a8!==_0x58ff88);}else{if(_0x1cba15===_0xaffa0c(0x4c6))return $gameParty[_0xaffa0c(0x1e1)]();else{if(_0x1cba15['match'](/ACTOR INDEX (\d+)/i)){if('MtTLp'!==_0xaffa0c(0x3f3)){const _0x26c6ad=_0x7c1ddc['BattleCore'][_0xaffa0c(0x326)][_0xaffa0c(0x18b)],_0x1e25bb=_0x1b11ec[_0xaffa0c(0x424)]?0x4:0x3,_0x5da695=_0x1e25bb*0x80+(_0x1e25bb-0x1)*0x8+0x4,_0x3551bf=this[_0xaffa0c(0x80b)](_0x303e89),_0x5f560d=this['itemRect'](_0x5ca3d4);let _0x1be49f=_0x5f560d['x']+this[_0xaffa0c(0x31a)];_0x26c6ad['ShowFacesListStyle']?_0x1be49f=_0x5f560d['x']+_0x2faaae['faceWidth']+0x8:_0x1be49f+=_0x27d6ea[_0xaffa0c(0x706)];const _0x52aa54=_0x55ff69['round'](_0x6f3377[_0xaffa0c(0x15d)](_0x5f560d['x']+_0x5f560d[_0xaffa0c(0x61e)]-_0x5da695,_0x1be49f)),_0x929cff=_0x43910c[_0xaffa0c(0xb50)](_0x5f560d['y']+(_0x5f560d[_0xaffa0c(0x6ce)]-_0x367d1c['prototype'][_0xaffa0c(0xc9a)]())/0x2),_0x227cbe=_0x40fdf9['round'](_0x52aa54-_0x38de4b[_0xaffa0c(0x706)]/0x2-0x4),_0x2d4966=_0x3cc366['round'](_0x5f560d['y']+(_0x5f560d[_0xaffa0c(0x6ce)]-_0xb0c12[_0xaffa0c(0xa92)])/0x2+_0x37733e[_0xaffa0c(0xa92)]/0x2);let _0x466ef0=_0x52aa54+0x88;const _0x491ca4=_0x929cff;this['placeTimeGauge'](_0x3551bf,_0x52aa54-0x4+(_0x26c6ad[_0xaffa0c(0x859)]||0x0),_0x929cff+(_0x26c6ad[_0xaffa0c(0xc31)]||0x0)),this[_0xaffa0c(0x8d1)](_0x3551bf,_0x52aa54+(_0x26c6ad[_0xaffa0c(0xa48)]||0x0),_0x929cff+(_0x26c6ad[_0xaffa0c(0x6cf)]||0x0)),this[_0xaffa0c(0x47c)](_0x3551bf,_0x227cbe+(_0x26c6ad[_0xaffa0c(0x49d)]||0x0),_0x2d4966+(_0x26c6ad[_0xaffa0c(0x4e9)]||0x0)),this[_0xaffa0c(0x348)](_0x3551bf,'hp',_0x466ef0+0x88*0x0+(_0x26c6ad['HpGaugeOffsetX']||0x0),_0x491ca4+(_0x26c6ad['HpGaugeOffsetY']||0x0)),this['placeGauge'](_0x3551bf,'mp',_0x466ef0+0x88*0x1+(_0x26c6ad[_0xaffa0c(0x901)]||0x0),_0x491ca4+(_0x26c6ad['MpGaugeOffsetY']||0x0)),_0x55f9a2[_0xaffa0c(0x424)]&&this['placeGauge'](_0x3551bf,'tp',_0x466ef0+0x88*0x2+(_0x26c6ad['TpGaugeOffsetX']||0x0),_0x491ca4+(_0x26c6ad['TpGaugeOffsetY']||0x0));}else{const _0x583741=Number(RegExp['$1']);return[$gameParty['members']()[_0x583741]];}}else{if(_0x1cba15[_0xaffa0c(0xb51)](/ACTOR ID (\d+)/i)){const _0x765957=Number(RegExp['$1']);return[$gameActors[_0xaffa0c(0x80b)](_0x765957)];}}}}}}if(_0x1cba15===_0xaffa0c(0xa74))return $gameTroop[_0xaffa0c(0x331)]();else{if(_0x1cba15===_0xaffa0c(0xba5))return $gameTroop[_0xaffa0c(0x331)]()['filter'](_0x3f84e9=>_0x3f84e9!==_0x5589a0);else{if(_0x1cba15===_0xaffa0c(0x23f))return _0xaffa0c(0x875)!==_0xaffa0c(0x875)?_0x33d547[_0xaffa0c(0x475)](_0x286689=>_0x286689[_0xaffa0c(0x6ab)]()&&_0x286689!==_0x2c2f49):$gameTroop[_0xaffa0c(0x331)]()[_0xaffa0c(0x475)](_0x337cf9=>_0x337cf9!==_0x58ff88);else{if(_0x1cba15===_0xaffa0c(0x6a0)){if('nAUvH'==='nAUvH')return $gameTroop[_0xaffa0c(0x1e1)]();else _0xd6aed7['BattleCore']['Window_BattleLog_pushBaseLine'][_0xaffa0c(0x701)](this),this[_0xaffa0c(0xa6b)]();}else{if(_0x1cba15[_0xaffa0c(0xb51)](/ENEMY INDEX (\d+)/i)){const _0x4033cc=Number(RegExp['$1']);return[$gameTroop[_0xaffa0c(0x738)]()[_0x4033cc]];}else{if(_0x1cba15[_0xaffa0c(0xb51)](/ENEMY ID (\d+)/i)){if(_0xaffa0c(0x8c0)!==_0xaffa0c(0x5ff)){const _0x225822=Number(RegExp['$1']);return $gameTroop['aliveMembers']()[_0xaffa0c(0x475)](_0x462a12=>_0x462a12['enemyId']()===_0x225822);}else this[_0xaffa0c(0x2f4)]=_0xaffa0c(0x57c);}}}}}}if(_0x1cba15==='alive\x20battlers')return _0x45bd9d[_0xaffa0c(0x475)](_0x3ec25e=>_0x3ec25e[_0xaffa0c(0x6ab)]());else{if(_0x1cba15===_0xaffa0c(0x9ce)){if(_0xaffa0c(0x63c)!=='rhNhL')return _0x45bd9d[_0xaffa0c(0x475)](_0x4bf0ef=>_0x4bf0ef[_0xaffa0c(0x6ab)]()&&_0x4bf0ef!==_0x5589a0);else{if(!_0x47f003[_0xaffa0c(0x9f8)]())return;if(this[_0xaffa0c(0x436)])return;this[_0xaffa0c(0x436)]=!![];const _0x3a665f=this[_0xaffa0c(0x3ee)]();if(_0x3a665f)_0x3a665f[_0xaffa0c(0x8c8)]();}}else{if(_0x1cba15===_0xaffa0c(0x9ad))return _0x45bd9d[_0xaffa0c(0x475)](_0x28eb2e=>_0x28eb2e[_0xaffa0c(0x6ab)]()&&_0x28eb2e!==_0x58ff88);else{if(_0x1cba15===_0xaffa0c(0xbde)){if(_0xaffa0c(0x3ac)!==_0xaffa0c(0x6de))return _0x45bd9d[_0xaffa0c(0x475)](_0x2564fb=>_0x2564fb[_0xaffa0c(0xa26)]());else{const _0x276107=_0x35964a[_0xaffa0c(0x80a)];if(_0x276107[_0xaffa0c(0xb51)](_0x181a26[_0xaffa0c(0x710)][_0xaffa0c(0x283)][_0x827c64])){const _0x161beb=_0x4f8627['$1'],_0x2eb16f=_0xaffa0c(0x721)[_0xaffa0c(0x85d)](_0x161beb),_0x1c0b1a=_0x4a81f5[_0xaffa0c(0x710)][_0xaffa0c(0x978)](_0x5d8c45,_0x410dfa);_0x2efd42[_0xaffa0c(0x710)]['JS'][_0x1c0b1a]=new _0x4656e8(_0x2eb16f);}}}}}}return[];},PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0xb40),_0x24c1e5=>{const _0x30c486=_0x5d4113;if(!SceneManager[_0x30c486(0x2ab)]())return;VisuMZ['ConvertParams'](_0x24c1e5,_0x24c1e5);const _0x3428d8=$gameTemp['getLastPluginCommandInterpreter'](),_0x410d64=BattleManager[_0x30c486(0x1bb)],_0x31a38b=BattleManager[_0x30c486(0x932)],_0x43ff14=BattleManager[_0x30c486(0xbba)]?BattleManager[_0x30c486(0xbba)][_0x30c486(0x481)](0x0):[],_0x3eb529=BattleManager[_0x30c486(0x7c2)];if(!_0x3428d8||!_0x410d64||!_0x31a38b)return;if(!_0x410d64[_0x30c486(0x441)]())return;if(_0x24c1e5['DisplayAction'])_0x3eb529[_0x30c486(0xa04)](_0x31a38b,_0x410d64[_0x30c486(0x441)]());_0x24c1e5['ApplyImmortal']&&(_0x30c486(0x8ae)!=='nBGBq'?_0x2ba423[_0x30c486(0x311)]=![]:_0x3eb529['push'](_0x30c486(0x4c9),_0x31a38b,_0x43ff14,!![]));if(_0x24c1e5[_0x30c486(0x63e)])_0x3eb529[_0x30c486(0x2ce)](_0x30c486(0x68d),_0x31a38b,_0x410d64);if(_0x24c1e5[_0x30c486(0x222)])_0x3eb529['push']('waitForMovement');if(_0x24c1e5['CastAnimation'])_0x3eb529['push'](_0x30c486(0x42e),_0x31a38b,_0x410d64);if(_0x24c1e5[_0x30c486(0x24a)])_0x3eb529['push'](_0x30c486(0x865));_0x3428d8['setWaitMode'](_0x30c486(0x732));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x2ed),_0x171d29=>{const _0x47311a=_0x5d4113;if(!SceneManager[_0x47311a(0x2ab)]())return;VisuMZ['ConvertParams'](_0x171d29,_0x171d29);const _0x36f774=$gameTemp[_0x47311a(0xc2b)](),_0x2dae46=BattleManager[_0x47311a(0x1bb)],_0x4a471f=BattleManager[_0x47311a(0x932)],_0x525ba6=BattleManager[_0x47311a(0xbba)]?BattleManager[_0x47311a(0xbba)][_0x47311a(0x481)](0x0):[],_0x1dafe0=BattleManager[_0x47311a(0x7c2)],_0x2f6718=_0x171d29[_0x47311a(0xa90)]??![];if(!_0x36f774||!_0x2dae46||!_0x4a471f)return;if(!_0x2dae46['item']())return;let _0x180f10=_0x2f6718?_0x1dafe0[_0x47311a(0x6bc)](_0x4a471f):0x1;for(let _0x4f1af3=0x0;_0x4f1af3<_0x180f10;_0x4f1af3++){if(_0x47311a(0x78b)===_0x47311a(0x78b)){_0x2f6718&&_0x4a471f[_0x47311a(0xa65)]()&&(_0x47311a(0x9b0)===_0x47311a(0x9d4)?(_0x4eea42+=_0x1330dc['isActor']()?-_0x3f777d:_0x3a1cc3,_0x54e176+=_0x424edf['isActor']()?-_0x4e48df:_0x292aac):_0x1dafe0[_0x47311a(0x2ce)](_0x47311a(0x396),_0x4a471f,_0x4f1af3));if(_0x171d29['PerformAction'])_0x1dafe0[_0x47311a(0x2ce)](_0x47311a(0xc78),_0x4a471f,_0x2dae46);if(_0x171d29[_0x47311a(0x140)]>0x0)_0x1dafe0['push']('waitCount',_0x171d29['WaitCount']);if(_0x171d29[_0x47311a(0x67e)])_0x1dafe0[_0x47311a(0x2ce)](_0x47311a(0xa0d),_0x4a471f,_0x525ba6,_0x2dae46[_0x47311a(0x441)]()[_0x47311a(0xbed)]);if(_0x171d29[_0x47311a(0x24a)])_0x1dafe0[_0x47311a(0x2ce)](_0x47311a(0x865));for(const _0x2d7f03 of _0x525ba6){if(_0x47311a(0x5bb)!==_0x47311a(0x2fb)){if(!_0x2d7f03)continue;if(_0x171d29['ActionEffect'])_0x1dafe0[_0x47311a(0x2ce)]('actionEffect',_0x4a471f,_0x2d7f03);}else this[_0x47311a(0x4d2)]=this[_0x47311a(0x4d2)]||0x0,this['_activeWeaponSlot']++,this[_0x47311a(0x437)]={};}}else{const _0x3eaf14=_0x31fc0f[_0x47311a(0x441)]();this[_0x47311a(0xa04)](_0x5ab575,_0x3eaf14),this['push'](_0x47311a(0x4c9),_0x45d43e,_0x2ca95e,!![]),this[_0x47311a(0x2ce)](_0x47311a(0x68d),_0x1d7093,_0x333b1a),this[_0x47311a(0x2ce)](_0x47311a(0x9f7)),this[_0x47311a(0x2ce)](_0x47311a(0x42e),_0x2f6ca8,_0x59a754),this['push'](_0x47311a(0x865));}}_0x2f6718&&_0x4a471f[_0x47311a(0xa65)]()&&_0x1dafe0[_0x47311a(0x2ce)](_0x47311a(0xbf7),_0x4a471f);if(_0x171d29[_0x47311a(0x4c5)])_0x1dafe0[_0x47311a(0x2ce)](_0x47311a(0x4c9),_0x4a471f,_0x525ba6,![]);_0x36f774[_0x47311a(0x4cc)](_0x47311a(0x732));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Set_TargetActionSet',_0x2c5814=>{const _0x620820=_0x5d4113;if(!SceneManager[_0x620820(0x2ab)]())return;VisuMZ['ConvertParams'](_0x2c5814,_0x2c5814);const _0x159e58=$gameTemp[_0x620820(0xc2b)](),_0x3a987f=BattleManager[_0x620820(0x1bb)],_0xc96ce7=BattleManager[_0x620820(0x932)],_0x169e36=BattleManager[_0x620820(0xbba)]?BattleManager[_0x620820(0xbba)][_0x620820(0x481)](0x0):[],_0xa22477=BattleManager[_0x620820(0x7c2)],_0x126b66=_0x2c5814[_0x620820(0xa90)]??![];if(!_0x159e58||!_0x3a987f||!_0xc96ce7)return;if(!_0x3a987f['item']())return;let _0x2a1a73=_0x126b66?_0xa22477['getDualWieldTimes'](_0xc96ce7):0x1;for(let _0x80dc5d=0x0;_0x80dc5d<_0x2a1a73;_0x80dc5d++){for(const _0x4913d1 of _0x169e36){if(!_0x4913d1)continue;_0x126b66&&_0xc96ce7[_0x620820(0xa65)]()&&_0xa22477[_0x620820(0x2ce)](_0x620820(0x396),_0xc96ce7,_0x80dc5d);if(_0x2c5814[_0x620820(0x68e)])_0xa22477[_0x620820(0x2ce)](_0x620820(0xc78),_0xc96ce7,_0x3a987f);if(_0x2c5814[_0x620820(0x349)]>0x0)_0xa22477[_0x620820(0x2ce)]('waitCount',_0x2c5814[_0x620820(0x349)]);if(_0x2c5814['ActionAnimation'])_0xa22477['push'](_0x620820(0xa0d),_0xc96ce7,[_0x4913d1],_0x3a987f[_0x620820(0x441)]()[_0x620820(0xbed)]);if(_0x2c5814[_0x620820(0x9c3)]>0x0)_0xa22477[_0x620820(0x2ce)]('waitCount',_0x2c5814[_0x620820(0x9c3)]);if(_0x2c5814[_0x620820(0x716)])_0xa22477[_0x620820(0x2ce)](_0x620820(0x14e),_0xc96ce7,_0x4913d1);}}_0x126b66&&_0xc96ce7[_0x620820(0xa65)]()&&_0xa22477['push']('clearActiveWeaponSet',_0xc96ce7);if(_0x2c5814[_0x620820(0x4c5)])_0xa22477[_0x620820(0x2ce)](_0x620820(0x4c9),_0xc96ce7,_0x169e36,![]);_0x159e58['setWaitMode'](_0x620820(0x732));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Set_FinishAction',_0x491a40=>{const _0x370171=_0x5d4113;if(!SceneManager[_0x370171(0x2ab)]())return;VisuMZ[_0x370171(0xb3d)](_0x491a40,_0x491a40);const _0x437a0e=$gameTemp[_0x370171(0xc2b)](),_0x3d51b4=BattleManager[_0x370171(0x1bb)],_0x3e8482=BattleManager[_0x370171(0x932)],_0x585596=BattleManager[_0x370171(0xbba)]?BattleManager['_allTargets'][_0x370171(0x481)](0x0):[],_0x4ee979=BattleManager[_0x370171(0x7c2)];if(!_0x437a0e||!_0x3d51b4||!_0x3e8482)return;if(!_0x3d51b4[_0x370171(0x441)]())return;if(_0x491a40['ApplyImmortal'])_0x4ee979[_0x370171(0x2ce)](_0x370171(0x4c9),_0x3e8482,_0x585596,![]);if(_0x491a40[_0x370171(0xb0b)])_0x4ee979[_0x370171(0x2ce)]('waitForNewLine');if(_0x491a40['WaitForEffect'])_0x4ee979[_0x370171(0x2ce)](_0x370171(0x91f));if(_0x491a40[_0x370171(0x50f)])_0x4ee979[_0x370171(0x2ce)](_0x370171(0x192));if(_0x491a40['ActionEnd'])_0x4ee979[_0x370171(0x2ce)](_0x370171(0x1c1),_0x3e8482);if(_0x491a40['WaitForMovement'])_0x4ee979[_0x370171(0x2ce)](_0x370171(0x9f7));_0x437a0e['setWaitMode'](_0x370171(0x732));}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0x85c),_0x942c84=>{const _0x2ed13e=_0x5d4113;if(!SceneManager[_0x2ed13e(0x2ab)]())return;if(!Imported[_0x2ed13e(0xc30)])return;VisuMZ[_0x2ed13e(0xb3d)](_0x942c84,_0x942c84);const _0x2dfbc8=$gameTemp[_0x2ed13e(0xc2b)](),_0xe8cc35=_0x942c84[_0x2ed13e(0xbcf)];if(!_0x2dfbc8)return;$gameScreen[_0x2ed13e(0x77d)](_0x942c84[_0x2ed13e(0x844)],_0x942c84[_0x2ed13e(0x88b)],_0x942c84['EasingType']);if(_0xe8cc35)_0x2dfbc8['setWaitMode'](_0x2ed13e(0xbfd));}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0x1e0),_0x383bf1=>{const _0x1f7ba8=_0x5d4113;if(!SceneManager[_0x1f7ba8(0x2ab)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x1f7ba8(0xb3d)](_0x383bf1,_0x383bf1);const _0x4ebce4=$gameTemp[_0x1f7ba8(0xc2b)](),_0x2f810f=_0x383bf1['WaitForAngle'];if(!_0x4ebce4)return;$gameScreen[_0x1f7ba8(0x77d)](0x0,_0x383bf1[_0x1f7ba8(0x88b)],_0x383bf1[_0x1f7ba8(0xc70)]);if(_0x2f810f)_0x4ebce4[_0x1f7ba8(0x4cc)](_0x1f7ba8(0xbfd));}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x6b1),_0x1e0600=>{const _0x2fee4f=_0x5d4113;if(!SceneManager[_0x2fee4f(0x2ab)]())return;if(!Imported[_0x2fee4f(0xc30)])return;const _0x10b05d=$gameTemp[_0x2fee4f(0xc2b)]();if(!_0x10b05d)return;_0x10b05d[_0x2fee4f(0x4cc)]('battleAngle');}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Animation_ActionAnimation',_0x4021db=>{const _0x3ae92f=_0x5d4113;if(!SceneManager[_0x3ae92f(0x2ab)]())return;VisuMZ[_0x3ae92f(0xb3d)](_0x4021db,_0x4021db);const _0x19ef47=$gameTemp[_0x3ae92f(0xc2b)](),_0x1e85ac=BattleManager[_0x3ae92f(0x1bb)],_0x5808b2=BattleManager['_subject'],_0x34e9f4=VisuMZ['CreateActionSequenceTargets'](_0x4021db[_0x3ae92f(0xac6)]),_0x247439=_0x4021db[_0x3ae92f(0x856)],_0x4c09ff=BattleManager[_0x3ae92f(0x7c2)];if(!_0x19ef47||!_0x1e85ac||!_0x5808b2)return;if(!_0x1e85ac[_0x3ae92f(0x441)]())return;let _0x3fa5d3=_0x1e85ac[_0x3ae92f(0x441)]()['animationId'];if(_0x3fa5d3<0x0)_0x3fa5d3=_0x5808b2['attackAnimationId1']();$gameTemp['requestAnimation'](_0x34e9f4,_0x3fa5d3,_0x247439),_0x4021db[_0x3ae92f(0x24a)]&&(_0x3ae92f(0x83a)!==_0x3ae92f(0x387)?_0x19ef47[_0x3ae92f(0x4cc)](_0x3ae92f(0x933)):this['padding']=0x0);}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0x960),_0x4250b7=>{const _0x5b9d5b=_0x5d4113;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5b9d5b(0xb3d)](_0x4250b7,_0x4250b7);const _0x1cd626=$gameTemp[_0x5b9d5b(0xc2b)](),_0x1b9bd5=BattleManager[_0x5b9d5b(0x932)],_0x258876=VisuMZ[_0x5b9d5b(0x6c4)](_0x4250b7['Targets']),_0x10cf0a=_0x4250b7[_0x5b9d5b(0x856)],_0x2736a9=BattleManager[_0x5b9d5b(0x7c2)];if(!_0x1cd626||!_0x1b9bd5)return;const _0x1edaf5=_0x1b9bd5[_0x5b9d5b(0xa8d)]();$gameTemp[_0x5b9d5b(0xbef)](_0x258876,_0x1edaf5,_0x10cf0a),_0x4250b7[_0x5b9d5b(0x24a)]&&_0x1cd626[_0x5b9d5b(0x4cc)](_0x5b9d5b(0x933));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x959),_0x42e95a=>{const _0x15bff7=_0x5d4113;if(!SceneManager[_0x15bff7(0x2ab)]())return;VisuMZ[_0x15bff7(0xb3d)](_0x42e95a,_0x42e95a);const _0x1f05de=_0x5e1313[_0x15bff7(0x402)](_0x42e95a[_0x15bff7(0x735)]);if(_0x1f05de<=0x0)return;const _0x3641a2=$gameTemp['getLastPluginCommandInterpreter'](),_0x5e1313=BattleManager[_0x15bff7(0x932)],_0x258694=VisuMZ[_0x15bff7(0x6c4)](_0x42e95a[_0x15bff7(0xac6)]),_0x366630=_0x42e95a[_0x15bff7(0x856)],_0x33a46d=BattleManager[_0x15bff7(0x7c2)];if(!_0x3641a2||!_0x5e1313)return;$gameTemp['requestAnimation'](_0x258694,_0x1f05de,_0x366630),_0x42e95a[_0x15bff7(0x24a)]&&(_0x15bff7(0xaca)==='VMqig'?_0x315195['setValue'](_0x2b251f[_0x15bff7(0x8db)],0x0):_0x3641a2[_0x15bff7(0x4cc)](_0x15bff7(0x933)));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x772),_0x3a06d3=>{const _0x3cd7c0=_0x5d4113;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3cd7c0(0xb3d)](_0x3a06d3,_0x3a06d3);const _0x4b125d=$gameTemp[_0x3cd7c0(0xc2b)](),_0x4c6416=BattleManager[_0x3cd7c0(0x1bb)],_0x10116d=_0x3a06d3['Mirror'],_0x5a0c97=VisuMZ[_0x3cd7c0(0x6c4)](_0x3a06d3[_0x3cd7c0(0xac6)]);if(!_0x4b125d||!_0x4c6416)return;if(!_0x4c6416['item']())return;for(const _0x5e587d of _0x5a0c97){if(!_0x5e587d)continue;_0x5e587d[_0x3cd7c0(0x42e)](_0x4c6416,_0x10116d);}if(_0x3a06d3[_0x3cd7c0(0x24a)])_0x4b125d['setWaitMode'](_0x3cd7c0(0x933));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x266),_0x47bf7a=>{const _0x1a2d7f=_0x5d4113;VisuMZ[_0x1a2d7f(0xb3d)](_0x47bf7a,_0x47bf7a);const _0xa1968d=$gameTemp[_0x1a2d7f(0xc2b)](),_0x2e91d7=VisuMZ[_0x1a2d7f(0x6c4)](_0x47bf7a['Targets']),_0x35bcd7=_0x47bf7a[_0x1a2d7f(0xb6b)];if(!_0x35bcd7)return;for(const _0x289bd7 of _0x2e91d7){if(!_0x289bd7)continue;if(!_0x289bd7[_0x1a2d7f(0xa65)]())continue;_0x289bd7[_0x1a2d7f(0xa71)](_0x35bcd7);}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x5b0),_0xdd725=>{const _0xa2d892=_0x5d4113;if(!SceneManager[_0xa2d892(0x5a4)])return;if(!SceneManager[_0xa2d892(0x5a4)][_0xa2d892(0xa9a)])return;if(!Imported[_0xa2d892(0x567)])return;VisuMZ[_0xa2d892(0xb3d)](_0xdd725,_0xdd725);const _0x360ab4=$gameTemp[_0xa2d892(0xc2b)](),_0x34e764=Math[_0xa2d892(0xb50)](_0xdd725[_0xa2d892(0x1d6)]),_0x2f404c=Math[_0xa2d892(0xb50)](_0xdd725[_0xa2d892(0x711)]);$gameTemp[_0xa2d892(0x557)](_0x34e764,_0x2f404c,_0xdd725[_0xa2d892(0x804)],_0xdd725[_0xa2d892(0x856)],_0xdd725[_0xa2d892(0x997)]),_0xdd725['WaitComplete']&&_0x360ab4&&(SceneManager[_0xa2d892(0x5a4)][_0xa2d892(0xa9a)][_0xa2d892(0x319)](),_0x360ab4[_0xa2d892(0x4cc)]('battleAnimation'));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x280),_0x52fd61=>{const _0x276851=_0x5d4113;if(!SceneManager[_0x276851(0x2ab)]())return;VisuMZ[_0x276851(0xb3d)](_0x52fd61,_0x52fd61);const _0x59a023=$gameTemp['getLastPluginCommandInterpreter'](),_0x33f8b8=VisuMZ[_0x276851(0x6c4)](_0x52fd61[_0x276851(0xac6)]),_0x15f699=_0x52fd61[_0x276851(0x804)],_0x1c32d9=_0x52fd61[_0x276851(0x856)];if(!_0x59a023)return;$gameTemp[_0x276851(0xbef)](_0x33f8b8,_0x15f699,_0x1c32d9);if(_0x52fd61[_0x276851(0x24a)])_0x59a023[_0x276851(0x4cc)](_0x276851(0x933));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x214),_0x2593e6=>{const _0x4366e7=_0x5d4113;if(!SceneManager[_0x4366e7(0x2ab)]())return;const _0x241fbf=$gameTemp[_0x4366e7(0xc2b)]();if(!_0x241fbf)return;_0x241fbf[_0x4366e7(0x4cc)]('battleAnimation');}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_BattleLog_AddText',_0x3c8e11=>{const _0x41c31c=_0x5d4113;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x41c31c(0xb3d)](_0x3c8e11,_0x3c8e11);const _0x2b6c53=BattleManager[_0x41c31c(0x7c2)],_0x3ac0d4=_0x3c8e11[_0x41c31c(0xaa4)]&&Imported['VisuMZ_4_CombatLog'];_0x2b6c53['addText'](_0x3c8e11[_0x41c31c(0x35c)]),_0x3ac0d4&&Imported[_0x41c31c(0x2bd)]&&$gameSystem[_0x41c31c(0x853)](_0x3c8e11['Text']||'',_0x3c8e11[_0x41c31c(0x2e6)]||0x0);}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xba8),_0x10e35e=>{const _0x3241f7=_0x5d4113;if(!SceneManager['isSceneBattle']())return;const _0x3e42a0=BattleManager[_0x3241f7(0x7c2)];_0x3e42a0['clear']();}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_BattleLog_DisplayAction',_0x20a53a=>{const _0x3b07f8=_0x5d4113;if(!SceneManager[_0x3b07f8(0x2ab)]())return;const _0x4da33e=$gameTemp['getLastPluginCommandInterpreter'](),_0x5c65a9=BattleManager['_action'],_0x4f293f=BattleManager[_0x3b07f8(0x932)],_0x27bdec=BattleManager[_0x3b07f8(0x7c2)];if(!_0x4da33e||!_0x5c65a9||!_0x4f293f)return;if(!_0x5c65a9['item']())return;_0x27bdec[_0x3b07f8(0xa04)](_0x4f293f,_0x5c65a9[_0x3b07f8(0x441)]()),_0x4da33e[_0x3b07f8(0x4cc)](_0x3b07f8(0x732));}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],'ActSeq_BattleLog_PopBaseLine',_0x13aab4=>{const _0x3abb65=_0x5d4113;if(!SceneManager[_0x3abb65(0x2ab)]())return;const _0x5ba17e=BattleManager['_logWindow'];_0x5ba17e[_0x3abb65(0xae8)]();}),PluginManager['registerCommand'](pluginData['name'],_0x5d4113(0xb9c),_0x1c0825=>{const _0x28fce8=_0x5d4113;if(!SceneManager[_0x28fce8(0x2ab)]())return;const _0x10e6fc=BattleManager[_0x28fce8(0x7c2)];_0x10e6fc[_0x28fce8(0xa1c)]();}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_BattleLog_Refresh',_0xd2671c=>{const _0x208bab=_0x5d4113;if(!SceneManager['isSceneBattle']())return;const _0x73daa=BattleManager[_0x208bab(0x7c2)];_0x73daa[_0x208bab(0x602)]();}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_BattleLog_UI',_0x67dd0=>{const _0x50f0e9=_0x5d4113;if(!SceneManager[_0x50f0e9(0x2ab)]())return;VisuMZ[_0x50f0e9(0xb3d)](_0x67dd0,_0x67dd0),SceneManager[_0x50f0e9(0x5a4)]['setVisibleUI'](_0x67dd0['ShowHide']);}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xc24),_0x56a7a9=>{const _0x36bc98=_0x5d4113;if(!SceneManager[_0x36bc98(0x2ab)]())return;const _0x312b85=$gameTemp[_0x36bc98(0xc2b)]();_0x312b85['setWaitMode'](_0x36bc98(0x732));}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xa62),_0x195273=>{const _0x1dc06c=_0x5d4113;if(!SceneManager[_0x1dc06c(0x2ab)]())return;const _0x1b8ded=$gameTemp[_0x1dc06c(0xc2b)](),_0x26d869=BattleManager['_logWindow'];_0x26d869[_0x1dc06c(0x430)](),_0x1b8ded[_0x1dc06c(0x4cc)](_0x1dc06c(0x732));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Camera_Clamp',_0x31ff86=>{const _0xbb72c3=_0x5d4113;if(!SceneManager[_0xbb72c3(0x2ab)]())return;if(!Imported[_0xbb72c3(0xc30)])return;VisuMZ['ConvertParams'](_0x31ff86,_0x31ff86);const _0x587105=$gameScreen[_0xbb72c3(0x63b)]();_0x587105[_0xbb72c3(0x26a)]=_0x31ff86[_0xbb72c3(0x9bb)];}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Camera_FocusPoint',_0x5919bf=>{const _0x2ca1bd=_0x5d4113;if(!SceneManager[_0x2ca1bd(0x2ab)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x2ca1bd(0xb3d)](_0x5919bf,_0x5919bf);const _0x50a46d=$gameTemp[_0x2ca1bd(0xc2b)](),_0x170983=_0x5919bf[_0x2ca1bd(0x600)];$gameScreen[_0x2ca1bd(0x2ef)](_0x5919bf[_0x2ca1bd(0x89c)],_0x5919bf[_0x2ca1bd(0x399)],_0x5919bf[_0x2ca1bd(0x88b)],_0x5919bf[_0x2ca1bd(0xc70)]);if(_0x170983)_0x50a46d['setWaitMode']('battleCamera');}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Camera_FocusTarget',_0x5f2d6c=>{const _0x49d27e=_0x5d4113;if(!SceneManager[_0x49d27e(0x2ab)]())return;if(!Imported[_0x49d27e(0xc30)])return;VisuMZ['ConvertParams'](_0x5f2d6c,_0x5f2d6c);const _0x575735=$gameTemp[_0x49d27e(0xc2b)](),_0x1d6b43=VisuMZ[_0x49d27e(0x6c4)](_0x5f2d6c[_0x49d27e(0xac6)]),_0x51f61c=_0x5f2d6c[_0x49d27e(0x600)];$gameScreen[_0x49d27e(0x364)](_0x1d6b43,_0x5f2d6c[_0x49d27e(0x88b)],_0x5f2d6c['EasingType']);if(_0x51f61c)_0x575735['setWaitMode'](_0x49d27e(0x41b));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x240),_0x117491=>{const _0x52b516=_0x5d4113;if(!SceneManager[_0x52b516(0x2ab)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x52b516(0xb3d)](_0x117491,_0x117491);const _0x388f01=$gameTemp[_0x52b516(0xc2b)](),_0x584235=_0x117491[_0x52b516(0x600)];$gameScreen[_0x52b516(0x540)](_0x117491[_0x52b516(0x5cb)],_0x117491[_0x52b516(0x191)],_0x117491['Duration'],_0x117491[_0x52b516(0xc70)]);if(_0x584235)_0x388f01[_0x52b516(0x4cc)]('battleCamera');}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x77c),_0x451067=>{const _0x294243=_0x5d4113;if(!SceneManager[_0x294243(0x2ab)]())return;if(!Imported[_0x294243(0xc30)])return;VisuMZ[_0x294243(0xb3d)](_0x451067,_0x451067);const _0x1faa17=$gameTemp[_0x294243(0xc2b)](),_0x21681a=_0x451067[_0x294243(0x52d)],_0x53acc1=_0x451067[_0x294243(0x68a)],_0x1c89d7=_0x451067[_0x294243(0x600)];if(_0x21681a){if(_0x294243(0x4fa)===_0x294243(0x179)){const _0x35be96=_0x2e4b9b['note'];if(_0x35be96[_0x294243(0xb51)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x3ec4c8=_0x20d654(_0x30a8ce['$1']),_0x2a6b6a=_0x3fca9f[_0x294243(0x710)]['createKeyJS'](_0x5f5197,_0x294243(0xac6));_0x557eae['BattleCore'][_0x294243(0x2f1)](_0x3ec4c8,_0x2a6b6a);}if(_0x35be96[_0x294243(0xb51)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x2078f4=_0x31f18c(_0x438d4c['$1']),_0x4b37f3=_0x5bcab2[_0x294243(0x710)][_0x294243(0x978)](_0x2fce67,_0x294243(0x24d));_0x1537c9[_0x294243(0x710)][_0x294243(0x4bc)](_0x2078f4,_0x4b37f3);}}else{const _0x32aa69=Math[_0x294243(0xb50)](Graphics[_0x294243(0x61e)]/0x2),_0x156cc0=Math['round'](Graphics[_0x294243(0x6ce)]/0x2);$gameScreen[_0x294243(0x2ef)](_0x32aa69,_0x156cc0,_0x451067['Duration'],_0x451067[_0x294243(0xc70)]);}}_0x53acc1&&$gameScreen[_0x294243(0x540)](0x0,0x0,_0x451067[_0x294243(0x88b)],_0x451067[_0x294243(0xc70)]);if(_0x1c89d7)_0x1faa17['setWaitMode']('battleCamera');}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],'ActSeq_Camera_WaitForCamera',_0x2e5432=>{const _0x406fc7=_0x5d4113;if(!SceneManager[_0x406fc7(0x2ab)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x5c04a7=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x5c04a7)return;_0x5c04a7[_0x406fc7(0x4cc)](_0x406fc7(0x41b));}),VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x3c1)]=function(_0xc793f8){const _0x53482e=_0x5d4113;_0xc793f8[_0x53482e(0x7c8)]='';const _0x1e3693=VisuMZ[_0x53482e(0x65c)][_0x53482e(0x3c1)](_0xc793f8),_0x1f5988=VisuMZ['CreateActionSequenceTargets'](_0xc793f8[_0x53482e(0xac6)])[0x0]||null;if(_0x1f5988){if(_0x53482e(0x2d1)!=='wLHNV'){_0x1e3693[_0x53482e(0x7c8)]=_0x1f5988[_0x53482e(0x5e8)](),_0x1e3693['portraitIndex']=_0x1f5988[_0x53482e(0x457)](),_0x1e3693[_0x53482e(0x5a2)]=_0x1f5988[_0x53482e(0x20c)](),_0x1e3693['portraitType']=_0x1f5988[_0x53482e(0xb61)]();if(_0x1f5988[_0x53482e(0xb88)]()){if('GrLVh'!==_0x53482e(0x868))_0x1f5988[_0x53482e(0x867)]()&&(_0x1e3693[_0x53482e(0x76d)]=!_0x1e3693[_0x53482e(0x76d)]),_0x1f5988[_0x53482e(0xbf2)]()&&(_0x1e3693[_0x53482e(0x4e6)]=!_0x1e3693[_0x53482e(0x4e6)]),_0x1e3693[_0x53482e(0x321)]==='svActor'&&(_0x1e3693[_0x53482e(0x76d)]=!_0x1e3693[_0x53482e(0x76d)]),_0xc793f8[_0x53482e(0x5f3)][_0x53482e(0x3ec)]&&(_0x1e3693['parallaxScrollX']*=-0x1),_0xc793f8[_0x53482e(0x5f3)]['parallaxScrollYinvertEnemy']&&(_0x1e3693['parallaxScrollY']*=-0x1),_0x1e3693[_0x53482e(0xabf)]+=_0xc793f8['ExtraSettings'][_0x53482e(0x230)]??0x0;else{let _0x5691ae=[];return this[_0x53482e(0xb94)]()?_0x5691ae=this[_0x53482e(0xa46)]():_0x5691ae=_0x245978[_0x53482e(0x710)][_0x53482e(0xa68)][_0x53482e(0x701)](this),_0x5691ae=this[_0x53482e(0x9d8)](_0x5691ae),_0x5691ae;}}}else return _0x585eb9[_0x53482e(0x710)][_0x53482e(0x326)][_0x53482e(0xc03)][_0x53482e(0xaa6)];}return _0x1e3693;},PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xc39),_0x31cb75=>{const _0x12a175=_0x5d4113;if(!SceneManager[_0x12a175(0x2ab)]())return;if(!Imported[_0x12a175(0x98a)])return;VisuMZ['ConvertParams'](_0x31cb75,_0x31cb75);const _0x2c0632=VisuMZ[_0x12a175(0x710)][_0x12a175(0x3c1)](_0x31cb75);SceneManager[_0x12a175(0x5a4)][_0x12a175(0x6e0)](_0x2c0632);const _0x2fe9cb=$gameTemp[_0x12a175(0xc2b)]();_0x2fe9cb&&_0x31cb75[_0x12a175(0x9c8)]&&_0x2fe9cb['setWaitMode'](_0x12a175(0xaf0));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x6e5),_0x4e550b=>{const _0x36ac89=_0x5d4113;if(!SceneManager[_0x36ac89(0x2ab)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ['ConvertParams'](_0x4e550b,_0x4e550b),SceneManager[_0x36ac89(0x5a4)][_0x36ac89(0x891)]();const _0x38e190=$gameTemp[_0x36ac89(0xc2b)]();if(_0x38e190&&_0x4e550b[_0x36ac89(0x1c9)]){if(_0x36ac89(0x33e)!==_0x36ac89(0xc1b))_0x38e190['setWaitMode'](_0x36ac89(0xa7d));else{if(!_0x2b8ee5[_0x36ac89(0x2ab)]())return;_0x81da36[_0x36ac89(0xb3d)](_0x2543ab,_0xa1108c);const _0xe1b147=_0x517cd9['getLastPluginCommandInterpreter'](),_0x328958=_0x45dac1[_0x36ac89(0x1bb)],_0xaf4582=_0x33913f[_0x36ac89(0x932)],_0x4d9768=_0x25cc75[_0x36ac89(0xbba)]?_0x4c9763['_allTargets']['slice'](0x0):[],_0x4c07b3=_0x5c3bb1[_0x36ac89(0x7c2)];if(!_0xe1b147||!_0x328958||!_0xaf4582)return;if(!_0x328958[_0x36ac89(0x441)]())return;if(_0x283c20[_0x36ac89(0x6a2)])_0x4c07b3[_0x36ac89(0xa04)](_0xaf4582,_0x328958[_0x36ac89(0x441)]());_0x22f6b7[_0x36ac89(0x4c5)]&&_0x4c07b3[_0x36ac89(0x2ce)](_0x36ac89(0x4c9),_0xaf4582,_0x4d9768,!![]);if(_0x328c6d['ActionStart'])_0x4c07b3[_0x36ac89(0x2ce)](_0x36ac89(0x68d),_0xaf4582,_0x328958);if(_0x80a789[_0x36ac89(0x222)])_0x4c07b3['push']('waitForMovement');if(_0x4c6e31['CastAnimation'])_0x4c07b3[_0x36ac89(0x2ce)](_0x36ac89(0x42e),_0xaf4582,_0x328958);if(_0x1fdf93['WaitForAnimation'])_0x4c07b3[_0x36ac89(0x2ce)](_0x36ac89(0x865));_0xe1b147[_0x36ac89(0x4cc)](_0x36ac89(0x732));}}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Cutin_EndVisualCutinEffectType',_0xe50858=>{const _0x50b478=_0x5d4113;if(!SceneManager[_0x50b478(0x2ab)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x50b478(0xb3d)](_0xe50858,_0xe50858);const _0x2cbca7=_0xe50858[_0x50b478(0x917)]['toLowerCase']()[_0x50b478(0xacb)]();SceneManager['_scene'][_0x50b478(0xb46)](_0x2cbca7);const _0x46ff86=$gameTemp[_0x50b478(0xc2b)]();_0x46ff86&&_0xe50858[_0x50b478(0x1c9)]&&_0x46ff86[_0x50b478(0x4cc)](_0x50b478(0xa7d));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x2df),_0x3020d4=>{const _0x1d4e13=_0x5d4113;if(!SceneManager[_0x1d4e13(0x2ab)]())return;if(!Imported[_0x1d4e13(0x98a)])return;const _0x3c3882=$gameTemp[_0x1d4e13(0xc2b)]();_0x3c3882[_0x1d4e13(0x4cc)]('cutinEnter');}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xc3d),_0x5ef214=>{const _0x538e73=_0x5d4113;if(!SceneManager[_0x538e73(0x2ab)]())return;if(!Imported[_0x538e73(0x98a)])return;const _0x2e86bc=$gameTemp[_0x538e73(0xc2b)]();_0x2e86bc[_0x538e73(0x4cc)]('cutinExit');}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xc06),_0x3d2de5=>{const _0x1b1de1=_0x5d4113;if(!SceneManager[_0x1b1de1(0x2ab)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x1b1de1(0xb3d)](_0x3d2de5,_0x3d2de5);const _0x431125=VisuMZ['CreateActionSequenceTargets'](_0x3d2de5[_0x1b1de1(0xac6)]),_0x333968=_0x3d2de5[_0x1b1de1(0x5e3)][_0x1b1de1(0x172)]()['trim']();for(const _0x1e6504 of _0x431125){if(!_0x1e6504)continue;_0x1e6504[_0x1b1de1(0x4bd)](_0x333968);}}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0x358),_0x28544d=>{const _0x3b6f6b=_0x5d4113;if(!SceneManager[_0x3b6f6b(0x2ab)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x3b6f6b(0xb3d)](_0x28544d,_0x28544d);const _0xd9b662=VisuMZ[_0x3b6f6b(0x6c4)](_0x28544d[_0x3b6f6b(0xac6)]),_0x2eb794=_0x28544d[_0x3b6f6b(0x47d)];for(const _0x3fe2bc of _0xd9b662){if('iDlfn'===_0x3b6f6b(0xb60)){if(!_0x3fe2bc)continue;_0x3fe2bc[_0x3b6f6b(0x5ec)]()[_0x3b6f6b(0x79e)]=_0x2eb794;}else!this[_0x3b6f6b(0xc79)]()&&!this[_0x3b6f6b(0x7c2)][_0x3b6f6b(0x835)]()&&(this[_0x3b6f6b(0x2f4)]=_0x3b6f6b(0x57c));}}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],'ActSeq_Element_AddElements',_0x1e2580=>{const _0x278170=_0x5d4113;if(!SceneManager[_0x278170(0x2ab)]())return;if(!Imported[_0x278170(0x22e)])return;VisuMZ[_0x278170(0xb3d)](_0x1e2580,_0x1e2580);const _0x4417ed=BattleManager[_0x278170(0x1bb)],_0x167e3b=_0x1e2580['Elements'];if(!_0x4417ed)return;_0x4417ed[_0x278170(0x817)]=_0x167e3b;}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Element_Clear',_0x35e355=>{const _0x2e4e66=_0x5d4113;if(!SceneManager[_0x2e4e66(0x2ab)]())return;if(!Imported[_0x2e4e66(0x22e)])return;const _0x5e6548=BattleManager[_0x2e4e66(0x1bb)];if(!_0x5e6548)return;_0x5e6548[_0x2e4e66(0x31f)]();}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xc7a),_0xae3308=>{const _0x4f99f2=_0x5d4113;if(!SceneManager[_0x4f99f2(0x2ab)]())return;if(!Imported[_0x4f99f2(0x22e)])return;VisuMZ[_0x4f99f2(0xb3d)](_0xae3308,_0xae3308);const _0x19dfd4=BattleManager[_0x4f99f2(0x1bb)],_0xccbf27=_0xae3308[_0x4f99f2(0x8ef)];if(!_0x19dfd4)return;_0x19dfd4[_0x4f99f2(0x2da)]=_0xccbf27;}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Element_NullElements',_0x470bf0=>{const _0x10de62=_0x5d4113;if(!SceneManager[_0x10de62(0x2ab)]())return;if(!Imported[_0x10de62(0x22e)])return;const _0x15e753=BattleManager['_action'];if(!_0x15e753)return;_0x15e753[_0x10de62(0xbdb)]=!![];}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xb78),_0x3e6362=>{const _0x3affcc=_0x5d4113;if(!Imported[_0x3affcc(0x656)])return;if(!SceneManager[_0x3affcc(0x2ab)]())return;VisuMZ[_0x3affcc(0xb3d)](_0x3e6362,_0x3e6362);const _0xa1adc1=VisuMZ['CreateActionSequenceTargets'](_0x3e6362[_0x3affcc(0xac6)]);for(const _0x440583 of _0xa1adc1){if(_0x3affcc(0x7b3)!=='lAlWY'){if(!_0x440583)continue;_0x440583['removeHorrorEffect'](_0x3affcc(0x9f0)),_0x440583['removeHorrorEffect']('glitch'),_0x440583[_0x3affcc(0x361)]('tv'),_0x440583[_0x3affcc(0x75c)]();}else _0x3df9f0+=(_0x2a2fe6['isEnemy']()?-0x1:0x1)*_0x48d3ad[_0x3affcc(0x217)]()/0x2;}$gamePlayer[_0x3affcc(0x602)]();}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Horror_GlitchCreate',_0x4328a8=>{const _0x8338f1=_0x5d4113;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x8338f1(0xb3d)](_0x4328a8,_0x4328a8);const _0x56d7de=VisuMZ[_0x8338f1(0x6c4)](_0x4328a8[_0x8338f1(0xac6)]),_0x30d829='glitch';_0x4328a8[_0x8338f1(0x2f2)]=Math[_0x8338f1(0x6aa)](_0x4328a8[_0x8338f1(0x72d)]/0x2),_0x4328a8[_0x8338f1(0xbab)]=_0x4328a8['slices'],_0x4328a8[_0x8338f1(0xb29)]=!![];for(const _0x8258de of _0x56d7de){if('IYmcr'!=='IYmcr')_0x23fb79&&_0x1afba1['isActor']()&&_0x132c4b['clearActiveWeaponSlot'](),this[_0x8338f1(0xa6b)]();else{if(!_0x8258de)continue;_0x8258de[_0x8338f1(0x6cd)](_0x30d829,_0x4328a8);}}$gamePlayer[_0x8338f1(0x602)]();}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Horror_GlitchRemove',_0x233115=>{const _0x57dc0d=_0x5d4113;if(!Imported[_0x57dc0d(0x656)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x57dc0d(0xb3d)](_0x233115,_0x233115);const _0x12ca84=VisuMZ['CreateActionSequenceTargets'](_0x233115[_0x57dc0d(0xac6)]);for(const _0xcf5f5f of _0x12ca84){if(_0x57dc0d(0x752)!==_0x57dc0d(0x731)){if(!_0xcf5f5f)continue;_0xcf5f5f[_0x57dc0d(0x361)](_0x57dc0d(0x915));}else _0x2fd879[_0x57dc0d(0x44d)]['performEvasion'][_0x57dc0d(0x701)](this),this[_0x57dc0d(0xb5c)](_0x57dc0d(0x8a6));}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xb4d),_0x16bc14=>{const _0x230429=_0x5d4113;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x230429(0x2ab)]())return;VisuMZ[_0x230429(0xb3d)](_0x16bc14,_0x16bc14);const _0x1d5fb8=VisuMZ['CreateActionSequenceTargets'](_0x16bc14['Targets']),_0x1d8b04=_0x230429(0x9f0);for(const _0x100a29 of _0x1d5fb8){if(!_0x100a29)continue;_0x100a29[_0x230429(0x6cd)](_0x1d8b04,_0x16bc14);}$gamePlayer[_0x230429(0x602)]();}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xa0f),_0x24c487=>{const _0x3a6341=_0x5d4113;if(!Imported[_0x3a6341(0x656)])return;if(!SceneManager[_0x3a6341(0x2ab)]())return;VisuMZ[_0x3a6341(0xb3d)](_0x24c487,_0x24c487);const _0xa42157=VisuMZ[_0x3a6341(0x6c4)](_0x24c487[_0x3a6341(0xac6)]);for(const _0xdc483c of _0xa42157){if(_0x3a6341(0x9ac)!=='eeHEh')_0xe6740[_0x3a6341(0x80b)]()[_0x3a6341(0x67d)](),_0x44ddb2[_0x3a6341(0x7ca)](),_0x2df48d[_0x3a6341(0x57f)](),this[_0x3a6341(0x385)]();else{if(!_0xdc483c)continue;_0xdc483c[_0x3a6341(0x361)](_0x3a6341(0x9f0));}}$gamePlayer[_0x3a6341(0x602)]();}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0xb0a),_0x57988c=>{const _0x1458a2=_0x5d4113;if(!Imported[_0x1458a2(0x656)])return;if(!SceneManager[_0x1458a2(0x2ab)]())return;VisuMZ[_0x1458a2(0xb3d)](_0x57988c,_0x57988c);const _0x1b3314=VisuMZ[_0x1458a2(0x6c4)](_0x57988c[_0x1458a2(0xac6)]),_0x50105a='tv';for(const _0x6f1bc4 of _0x1b3314){if(_0x1458a2(0x19f)!==_0x1458a2(0x508)){if(!_0x6f1bc4)continue;_0x6f1bc4[_0x1458a2(0x6cd)](_0x50105a,_0x57988c);}else this[_0x1458a2(0x8ed)]('dead');}$gamePlayer[_0x1458a2(0x602)]();}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x9d1),_0x312b4b=>{const _0x1ae2c7=_0x5d4113;if(!Imported[_0x1ae2c7(0x656)])return;if(!SceneManager[_0x1ae2c7(0x2ab)]())return;VisuMZ['ConvertParams'](_0x312b4b,_0x312b4b);const _0x48f6f3=VisuMZ['CreateActionSequenceTargets'](_0x312b4b[_0x1ae2c7(0xac6)]);for(const _0x3347af of _0x48f6f3){if('FWKEW'!==_0x1ae2c7(0x175)){if(!_0x3347af)continue;_0x3347af[_0x1ae2c7(0x361)]('tv');}else{const _0x4b4f83=_0x20d994[_0x1ae2c7(0x710)][_0x1ae2c7(0x326)][_0x1ae2c7(0x998)],_0x2a1225=_0x4b4f83[_0x1ae2c7(0x1ad)],_0x50152d=_0x4b4f83[_0x1ae2c7(0x952)],_0x3b4901=_0x4b4f83['StepDuration'];this[_0x1ae2c7(0x873)](-_0x2a1225,-_0x50152d,_0x3b4901);}}$gamePlayer['refresh']();}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],'ActSeq_Impact_BlueRedInvert',_0x595d44=>{const _0x1055f5=_0x5d4113;if(!Imported[_0x1055f5(0x38e)])return;const _0x4cb2f8=SceneManager[_0x1055f5(0x5a4)][_0x1055f5(0xa9a)];if(!_0x4cb2f8)return;if(VisuMZ[_0x1055f5(0xac5)]['version']<=1.04){if(_0x1055f5(0x1bf)===_0x1055f5(0x1bf)){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x1055f5(0x3e4)]();return;}else{const _0x25d9d4=_0x2d9dce(_0x5a94ca['$1'])['split'](/[\r\n]+/)[_0x1055f5(0x828)]('');_0x57c44d[_0x1055f5(0x2c0)]=_0xc8a4e9[_0x1055f5(0x1dd)](_0x25d9d4);}}VisuMZ[_0x1055f5(0xb3d)](_0x595d44,_0x595d44);const _0x534450=_0x595d44['Enable'];_0x4cb2f8[_0x1055f5(0x2eb)](_0x534450);}),PluginManager['registerCommand'](pluginData['name'],_0x5d4113(0x611),_0x3991ee=>{const _0x4751b7=_0x5d4113;if(!SceneManager[_0x4751b7(0x2ab)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x44bc32=SceneManager[_0x4751b7(0x5a4)][_0x4751b7(0xa9a)];if(!_0x44bc32)return;VisuMZ[_0x4751b7(0xb3d)](_0x3991ee,_0x3991ee);const _0x30d86c=_0x3991ee[_0x4751b7(0xbd1)]||0x1,_0xacdc0a=_0x3991ee[_0x4751b7(0x88b)]||0x1,_0x5d42e9=_0x3991ee[_0x4751b7(0xc70)]||_0x4751b7(0x1ab);_0x44bc32['setupRgbSplitImpactFilter'](_0x30d86c,_0xacdc0a,_0x5d42e9);}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x51e),_0x544c38=>{const _0x46dbff=_0x5d4113;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x58e272=SceneManager[_0x46dbff(0x5a4)]['_spriteset'];if(!_0x58e272)return;if(VisuMZ[_0x46dbff(0xac5)][_0x46dbff(0xa2b)]<=1.04){if(_0x46dbff(0x3b3)!==_0x46dbff(0x3b3))this['requestMotionRefresh']();else{alert(_0x46dbff(0x639)),SceneManager[_0x46dbff(0x3e4)]();return;}}VisuMZ[_0x46dbff(0xb3d)](_0x544c38,_0x544c38);const _0x1e0259=_0x544c38[_0x46dbff(0x198)];_0x58e272[_0x46dbff(0x781)](_0x1e0259);}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x1b4),_0x482159=>{const _0x2edf2e=_0x5d4113;if(!SceneManager[_0x2edf2e(0x2ab)]())return;if(!Imported[_0x2edf2e(0x38e)])return;const _0x2619e0=SceneManager[_0x2edf2e(0x5a4)][_0x2edf2e(0xa9a)];if(!_0x2619e0)return;VisuMZ[_0x2edf2e(0xb3d)](_0x482159,_0x482159);const _0x2fb0d8=Number(_0x482159[_0x2edf2e(0x844)])||0x0,_0x96e59e=Number(_0x482159['Rate']),_0x4967e2=_0x482159['Duration']||0x1,_0x33f2d7=_0x482159['EasingType']||_0x2edf2e(0x1ab);_0x2619e0['setupMotionBlurImpactFilter'](_0x2fb0d8,_0x96e59e,_0x4967e2,_0x33f2d7);}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0x8d4),_0xb8ce0d=>{const _0x592bc7=_0x5d4113;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x592bc7(0x38e)])return;const _0x1c955e=SceneManager['_scene'][_0x592bc7(0xa9a)];if(!_0x1c955e)return;VisuMZ['ConvertParams'](_0xb8ce0d,_0xb8ce0d);const _0x1b7192=Number(_0xb8ce0d[_0x592bc7(0x844)])||0x0,_0x15e738=Number(_0xb8ce0d[_0x592bc7(0x7f6)]),_0x207faf=_0xb8ce0d[_0x592bc7(0x88b)]||0x1,_0x1d9742=_0xb8ce0d[_0x592bc7(0xc70)]||_0x592bc7(0x1ab),_0x14431a=VisuMZ[_0x592bc7(0x6c4)](_0xb8ce0d[_0x592bc7(0xac6)]);for(const _0x44803b of _0x14431a){if('RCrvj'!==_0x592bc7(0x558))_0x1b7cbc+=_0x776342;else{if(!_0x44803b)continue;if(!_0x44803b[_0x592bc7(0x3ee)]())continue;_0x44803b[_0x592bc7(0x3ee)]()['setupMotionBlurImpactFilter'](_0x1b7192,_0x15e738,_0x207faf,_0x1d9742);}}}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0xa56),_0x2b706a=>{const _0x43fb5e=_0x5d4113;if(!SceneManager[_0x43fb5e(0x2ab)]())return;if(!Imported[_0x43fb5e(0x38e)])return;VisuMZ[_0x43fb5e(0xb3d)](_0x2b706a,_0x2b706a);const _0x47cebf={'delay':_0x2b706a[_0x43fb5e(0x17a)],'duration':_0x2b706a[_0x43fb5e(0x157)],'hue':_0x2b706a[_0x43fb5e(0x65e)],'opacityStart':_0x2b706a[_0x43fb5e(0x454)],'tone':_0x2b706a['tone'],'visible':!![]},_0x33f1b7=VisuMZ[_0x43fb5e(0x6c4)](_0x2b706a[_0x43fb5e(0xac6)]);for(const _0x1efa14 of _0x33f1b7){if('NSszT'==='FZnXK'){if(!_0x564adf['isPlaytest']())return;if(this[_0x43fb5e(0x9d9)])return;this[_0x43fb5e(0x9d9)]=!![];let _0x497f95='';_0x497f95+='VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing',_0x497f95+=_0x43fb5e(0x5c4)[_0x43fb5e(0x85d)](_0x13d776['name']),_0x8dc408(_0x497f95);}else{if(!_0x1efa14)continue;_0x1efa14[_0x43fb5e(0x6d9)](_0x47cebf);}}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xac2),_0x1d6ca0=>{const _0x3f2476=_0x5d4113;if(!SceneManager[_0x3f2476(0x2ab)]())return;if(!Imported[_0x3f2476(0x38e)])return;VisuMZ[_0x3f2476(0xb3d)](_0x1d6ca0,_0x1d6ca0);const _0x1a8367=VisuMZ[_0x3f2476(0x6c4)](_0x1d6ca0[_0x3f2476(0xac6)]);for(const _0x26d063 of _0x1a8367){if(_0x3f2476(0xb49)==='mMsDR')this[_0x3f2476(0x8ed)](_0x3f2476(0x64b));else{if(!_0x26d063)continue;_0x26d063[_0x3f2476(0x3fc)]();}}}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],'ActSeq_Impact_Negative',_0x2b48e9=>{const _0x2a0e2d=_0x5d4113;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x39fb9c=SceneManager[_0x2a0e2d(0x5a4)][_0x2a0e2d(0xa9a)];if(!_0x39fb9c)return;if(VisuMZ[_0x2a0e2d(0xac5)]['version']<=1.04){if('priCp'!==_0x2a0e2d(0xb84)){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x2a0e2d(0x3e4)]();return;}else _0x5cb598[_0x2a0e2d(0xbd4)](0x0);}VisuMZ[_0x2a0e2d(0xb3d)](_0x2b48e9,_0x2b48e9);const _0x5ad09f=_0x2b48e9[_0x2a0e2d(0x198)];_0x39fb9c['setupNegativeImpactFilter'](_0x5ad09f);}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Impact_Oversaturate',_0x5f5475=>{const _0x160005=_0x5d4113;if(!Imported[_0x160005(0x38e)])return;const _0x142aa7=SceneManager[_0x160005(0x5a4)][_0x160005(0xa9a)];if(!_0x142aa7)return;if(VisuMZ[_0x160005(0xac5)][_0x160005(0xa2b)]<=1.04){alert(_0x160005(0x639)),SceneManager[_0x160005(0x3e4)]();return;}VisuMZ['ConvertParams'](_0x5f5475,_0x5f5475);const _0x549aca=_0x5f5475[_0x160005(0x198)];_0x142aa7[_0x160005(0x93c)](_0x549aca);}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x4a6),_0x4046de=>{const _0x553073=_0x5d4113;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x46e6a0=SceneManager['_scene'][_0x553073(0xa9a)];if(!_0x46e6a0)return;VisuMZ['ConvertParams'](_0x4046de,_0x4046de);const _0x172ed9=_0x4046de['X']||0x0,_0x2762bd=_0x4046de['Y']||0x0,_0x2ee19a=_0x4046de[_0x553073(0x996)]||0x0,_0x3ba138=_0x4046de[_0x553073(0x87c)]||0x0,_0x10a51f=_0x4046de['Duration']||0x1;_0x46e6a0[_0x553073(0xc99)](_0x172ed9,_0x2762bd,_0x2ee19a,_0x3ba138,_0x10a51f);}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],'ActSeq_Impact_ShockwaveEachTargets',_0x2ec340=>{const _0x1fe6b7=_0x5d4113;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1fe6b7(0x38e)])return;const _0x5222e0=SceneManager[_0x1fe6b7(0x5a4)][_0x1fe6b7(0xa9a)];if(!_0x5222e0)return;VisuMZ['ConvertParams'](_0x2ec340,_0x2ec340);const _0x1f2532=VisuMZ['CreateActionSequenceTargets'](_0x2ec340[_0x1fe6b7(0xac6)]),_0x3b77f8=_0x2ec340[_0x1fe6b7(0x64c)],_0x4f047d=_0x2ec340[_0x1fe6b7(0x5cb)]||0x0,_0x386fde=_0x2ec340['OffsetY']||0x0,_0x2f927d=_0x2ec340[_0x1fe6b7(0x996)]||0x0,_0x10e6b7=_0x2ec340[_0x1fe6b7(0x87c)]||0x0,_0x4c4bc5=_0x2ec340[_0x1fe6b7(0x88b)]||0x1;for(const _0x503240 of _0x1f2532){if(_0x1fe6b7(0x593)!==_0x1fe6b7(0x593))this[_0x1fe6b7(0x78d)]=new _0x46a1ea(),this['_damageContainer']['x']=this[_0x1fe6b7(0x6e7)]['x'],this['_damageContainer']['y']=this[_0x1fe6b7(0x6e7)]['y'],this[_0x1fe6b7(0x9fd)](this[_0x1fe6b7(0x78d)]);else{if(!_0x503240)continue;if(!_0x503240['battler']())continue;const _0x4936d6=_0x503240[_0x1fe6b7(0x3ee)]();let _0x316ba9=_0x4936d6['_baseX'],_0x3a707d=_0x4936d6[_0x1fe6b7(0x559)];_0x316ba9+=(Graphics[_0x1fe6b7(0x61e)]-Graphics['boxWidth'])/0x2,_0x3a707d+=(Graphics[_0x1fe6b7(0x6ce)]-Graphics[_0x1fe6b7(0x75f)])/0x2;if(_0x3b77f8[_0x1fe6b7(0xb51)](/front/i))'mcreT'===_0x1fe6b7(0xad2)?_0x316ba9+=(_0x503240[_0x1fe6b7(0xb88)]()?0x1:-0x1)*_0x4936d6[_0x1fe6b7(0x217)]()/0x2:this[_0x1fe6b7(0xa02)]=_0x1fe6b7(0x39e);else _0x3b77f8[_0x1fe6b7(0xb51)](/back/i)&&(_0x316ba9+=(_0x503240['isEnemy']()?-0x1:0x1)*_0x4936d6[_0x1fe6b7(0x217)]()/0x2);if(_0x3b77f8[_0x1fe6b7(0xb51)](/head/i))_0x3a707d-=_0x4936d6[_0x1fe6b7(0x8a4)]();else{if(_0x3b77f8[_0x1fe6b7(0xb51)](/center/i)){if('hNlMM'!==_0x1fe6b7(0x8f1)){const _0x25193f=_0x1596be['parameters'][0x0];if(_0x25193f[_0x1fe6b7(0xb51)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}else _0x3a707d-=_0x4936d6[_0x1fe6b7(0x8a4)]()/0x2;}}_0x316ba9+=_0x4f047d,_0x3a707d+=_0x386fde,_0x5222e0['setupShockwaveImpactFilter'](_0x316ba9,_0x3a707d,_0x2f927d,_0x10e6b7,_0x4c4bc5);}}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Impact_ShockwaveCenterTargets',_0x45a322=>{const _0x231233=_0x5d4113;if(!SceneManager[_0x231233(0x2ab)]())return;if(!Imported[_0x231233(0x38e)])return;const _0x348280=SceneManager[_0x231233(0x5a4)][_0x231233(0xa9a)];if(!_0x348280)return;VisuMZ['ConvertParams'](_0x45a322,_0x45a322);const _0x2cb0e3=VisuMZ[_0x231233(0x6c4)](_0x45a322['Targets']),_0x2bd0c7=_0x45a322[_0x231233(0x64c)],_0x3b3b00=_0x45a322['OffsetX']||0x0,_0x2bdae5=_0x45a322[_0x231233(0x191)]||0x0,_0x44b901=_0x45a322[_0x231233(0x996)]||0x0,_0x233f2f=_0x45a322[_0x231233(0x87c)]||0x0,_0x298c87=_0x45a322[_0x231233(0x88b)]||0x1,_0x15efa4=Math['min'](..._0x2cb0e3[_0x231233(0x390)](_0x236ee6=>_0x236ee6[_0x231233(0x3ee)]()[_0x231233(0x8bf)]-_0x236ee6[_0x231233(0x3ee)]()[_0x231233(0x217)]()/0x2)),_0x2f278e=Math[_0x231233(0xbcc)](..._0x2cb0e3[_0x231233(0x390)](_0x395229=>_0x395229[_0x231233(0x3ee)]()[_0x231233(0x8bf)]+_0x395229[_0x231233(0x3ee)]()[_0x231233(0x217)]()/0x2)),_0x4df9f2=Math[_0x231233(0x15d)](..._0x2cb0e3[_0x231233(0x390)](_0x2ee8bc=>_0x2ee8bc[_0x231233(0x3ee)]()[_0x231233(0x559)]-_0x2ee8bc[_0x231233(0x3ee)]()[_0x231233(0x8a4)]())),_0x1718b5=Math[_0x231233(0xbcc)](..._0x2cb0e3[_0x231233(0x390)](_0x3d04ff=>_0x3d04ff['battler']()[_0x231233(0x559)])),_0x537475=_0x2cb0e3[_0x231233(0x475)](_0x467ded=>_0x467ded['isActor']())[_0x231233(0x7da)],_0xc189f1=_0x2cb0e3['filter'](_0x3636be=>_0x3636be[_0x231233(0xb88)]())[_0x231233(0x7da)];let _0x22bf5b=0x0,_0x1618bf=0x0;if(_0x2bd0c7[_0x231233(0xb51)](/front/i))_0x22bf5b=_0x537475>=_0xc189f1?_0x15efa4:_0x2f278e;else{if(_0x2bd0c7['match'](/middle/i))'ylHjj'==='MCuQv'?_0x4a3908['hide']():(_0x22bf5b=(_0x15efa4+_0x2f278e)/0x2,melee=-0x1);else _0x2bd0c7[_0x231233(0xb51)](/back/i)&&(_0x22bf5b=_0x537475>=_0xc189f1?_0x2f278e:_0x15efa4);}if(_0x2bd0c7['match'](/head/i))_0x1618bf=_0x4df9f2;else{if(_0x2bd0c7[_0x231233(0xb51)](/center/i))_0x1618bf=(_0x4df9f2+_0x1718b5)/0x2;else _0x2bd0c7['match'](/base/i)&&(_0x1618bf=_0x1718b5);}_0x22bf5b+=(Graphics['width']-Graphics[_0x231233(0xbb8)])/0x2,_0x1618bf+=(Graphics[_0x231233(0x6ce)]-Graphics[_0x231233(0x75f)])/0x2,_0x22bf5b+=_0x3b3b00,_0x1618bf+=_0x2bdae5,_0x348280[_0x231233(0xc99)](_0x22bf5b,_0x1618bf,_0x44b901,_0x233f2f,_0x298c87);}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xb06),_0x242da4=>{const _0x3afc4d=_0x5d4113;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x44819e=SceneManager[_0x3afc4d(0x5a4)][_0x3afc4d(0xa9a)];if(!_0x44819e)return;if(VisuMZ[_0x3afc4d(0xac5)][_0x3afc4d(0xa2b)]<=1.04){if('VcBNS'!==_0x3afc4d(0x702)){if(_0x24ef04['_spriteset'][_0x3afc4d(0xac8)]())return!![];this[_0x3afc4d(0xbdc)]=_0x3afc4d(0x3a7);}else{alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}}VisuMZ[_0x3afc4d(0xb3d)](_0x242da4,_0x242da4);const _0xda1ccb=$gameTemp[_0x3afc4d(0xc2b)](),_0x656ebf=Math[_0x3afc4d(0xbcc)](0.01,_0x242da4[_0x3afc4d(0x2d4)]);$gameTemp[_0x3afc4d(0x35f)](_0x656ebf,_0xda1ccb);}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Impact_TimeStop',_0x4f9319=>{const _0x4c16cf=_0x5d4113;if(!Imported[_0x4c16cf(0x38e)])return;const _0x33d1ce=SceneManager[_0x4c16cf(0x5a4)][_0x4c16cf(0xa9a)];if(!_0x33d1ce)return;if(VisuMZ['ActSeqImpact'][_0x4c16cf(0xa2b)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x4c16cf(0xb3d)](_0x4f9319,_0x4f9319);const _0x21286e=$gameTemp[_0x4c16cf(0xc2b)](),_0x1c48d9=_0x4f9319['ms']||0x1;VisuMZ['ActSeqImpact'][_0x4c16cf(0x256)](_0x1c48d9,_0x21286e);}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xba6),_0x319427=>{const _0x9628bb=_0x5d4113;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x58a8d4=SceneManager[_0x9628bb(0x5a4)][_0x9628bb(0xa9a)];if(!_0x58a8d4)return;VisuMZ[_0x9628bb(0xb3d)](_0x319427,_0x319427);const _0x55ec1d=_0x319427['X']||0x0,_0x2ca375=_0x319427['Y']||0x0,_0x2aa56b=_0x319427['Strength']||0x0,_0x540a3c=_0x319427[_0x9628bb(0x66f)]||0x0,_0x541319=_0x319427[_0x9628bb(0x88b)]||0x1,_0x2ecef0=_0x319427[_0x9628bb(0xc70)]||_0x9628bb(0x1ab);_0x58a8d4[_0x9628bb(0xc9f)](_0x2aa56b,_0x55ec1d,_0x2ca375,_0x540a3c,_0x541319,_0x2ecef0);}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xac4),_0x35de24=>{const _0x40ed36=_0x5d4113;if(!Imported[_0x40ed36(0x38e)])return;const _0x5d7679=SceneManager[_0x40ed36(0x5a4)][_0x40ed36(0xa9a)];if(!_0x5d7679)return;VisuMZ[_0x40ed36(0xb3d)](_0x35de24,_0x35de24);const _0x4ebe6c=VisuMZ[_0x40ed36(0x6c4)](_0x35de24[_0x40ed36(0xac6)]),_0x4f0870=_0x35de24[_0x40ed36(0x64c)],_0x9ef254=_0x35de24[_0x40ed36(0x5cb)]||0x0,_0x30b350=_0x35de24[_0x40ed36(0x191)]||0x0,_0x1731e6=_0x35de24['Strength']||0x0,_0x463069=_0x35de24[_0x40ed36(0x66f)]||0x0,_0x15f266=_0x35de24[_0x40ed36(0x88b)]||0x1,_0x5b6af0=_0x35de24[_0x40ed36(0xc70)]||'Linear',_0x27cb5f=Math[_0x40ed36(0x15d)](..._0x4ebe6c[_0x40ed36(0x390)](_0x989618=>_0x989618[_0x40ed36(0x3ee)]()[_0x40ed36(0x8bf)]-_0x989618[_0x40ed36(0x3ee)]()[_0x40ed36(0x217)]()/0x2)),_0x56c00a=Math[_0x40ed36(0xbcc)](..._0x4ebe6c[_0x40ed36(0x390)](_0x441ada=>_0x441ada[_0x40ed36(0x3ee)]()[_0x40ed36(0x8bf)]+_0x441ada[_0x40ed36(0x3ee)]()[_0x40ed36(0x217)]()/0x2)),_0x2884d3=Math[_0x40ed36(0x15d)](..._0x4ebe6c[_0x40ed36(0x390)](_0x51c129=>_0x51c129[_0x40ed36(0x3ee)]()[_0x40ed36(0x559)]-_0x51c129[_0x40ed36(0x3ee)]()[_0x40ed36(0x8a4)]())),_0x3dba2a=Math[_0x40ed36(0xbcc)](..._0x4ebe6c['map'](_0x1597f1=>_0x1597f1[_0x40ed36(0x3ee)]()[_0x40ed36(0x559)])),_0x902550=_0x4ebe6c[_0x40ed36(0x475)](_0x1b8226=>_0x1b8226[_0x40ed36(0xa65)]())[_0x40ed36(0x7da)],_0x3d2c80=_0x4ebe6c[_0x40ed36(0x475)](_0x4c7533=>_0x4c7533[_0x40ed36(0xb88)]())[_0x40ed36(0x7da)];let _0x1ce960=0x0,_0x451b8d=0x0;if(_0x4f0870[_0x40ed36(0xb51)](/front/i))_0x1ce960=_0x902550>=_0x3d2c80?_0x27cb5f:_0x56c00a;else{if(_0x4f0870['match'](/middle/i))_0x1ce960=(_0x27cb5f+_0x56c00a)/0x2,melee=-0x1;else _0x4f0870[_0x40ed36(0xb51)](/back/i)&&(_0x1ce960=_0x902550>=_0x3d2c80?_0x56c00a:_0x27cb5f);}if(_0x4f0870[_0x40ed36(0xb51)](/head/i)){if(_0x40ed36(0x532)===_0x40ed36(0x532))_0x451b8d=_0x2884d3;else{if(!_0x534316[_0x40ed36(0x2ab)]())return;if(!_0x38c3f5[_0x40ed36(0xc30)])return;_0x26b8ce[_0x40ed36(0xb3d)](_0x3796c3,_0x227657);const _0x519f55=_0x3610d5[_0x40ed36(0xc2b)](),_0x322a13=_0x424132['WaitForAngle'];if(!_0x519f55)return;_0x47adec[_0x40ed36(0x77d)](_0x458a7c[_0x40ed36(0x844)],_0x456525['Duration'],_0x180456[_0x40ed36(0xc70)]);if(_0x322a13)_0x519f55[_0x40ed36(0x4cc)]('battleAngle');}}else{if(_0x4f0870[_0x40ed36(0xb51)](/center/i)){if(_0x40ed36(0x65b)==='VWgMI')return _0x2a60e1[_0x40ed36(0x710)][_0x40ed36(0x606)]['call'](this);else _0x451b8d=(_0x2884d3+_0x3dba2a)/0x2;}else _0x4f0870['match'](/base/i)&&(_0x451b8d=_0x3dba2a);}_0x1ce960+=(Graphics[_0x40ed36(0x61e)]-Graphics[_0x40ed36(0xbb8)])/0x2,_0x451b8d+=(Graphics[_0x40ed36(0x6ce)]-Graphics[_0x40ed36(0x75f)])/0x2,_0x1ce960+=_0x9ef254,_0x451b8d+=_0x30b350,_0x5d7679['setupZoomBlurImpactFilter'](_0x1731e6,_0x1ce960,_0x451b8d,_0x463069,_0x15f266,_0x5b6af0);}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Inject_AnimationStart',_0xc3035a=>{const _0x21f4d8=_0x5d4113;if(!Imported[_0x21f4d8(0x38e)])return;const _0x368b34=SceneManager[_0x21f4d8(0x5a4)][_0x21f4d8(0xa9a)];if(!_0x368b34)return;if(VisuMZ[_0x21f4d8(0xac5)][_0x21f4d8(0xa2b)]<=1.05){if(_0x21f4d8(0xadb)!=='QhucB')this['_endingBattle']=!![],_0x1d6b51[_0x21f4d8(0x710)][_0x21f4d8(0x7b0)]['call'](this);else{alert(_0x21f4d8(0x639)),SceneManager[_0x21f4d8(0x3e4)]();return;}}VisuMZ[_0x21f4d8(0xb3d)](_0xc3035a,_0xc3035a);const _0x157e67=VisuMZ[_0x21f4d8(0x6c4)](_0xc3035a['Targets']),_0x2dba09={'filename':_0xc3035a[_0x21f4d8(0xb6b)],'horzCells':_0xc3035a['horzCells']||0x1,'vertCells':_0xc3035a[_0x21f4d8(0x577)]||0x1,'frameDelay':_0xc3035a[_0x21f4d8(0x9cf)]||0x1,'smooth':_0xc3035a[_0x21f4d8(0x87e)]||![],'anchorX':_0xc3035a[_0x21f4d8(0x3f0)]||0x0,'anchorY':_0xc3035a[_0x21f4d8(0x2d8)]||0x0,'offsetX':_0xc3035a[_0x21f4d8(0xc20)]||0x0,'offsetY':_0xc3035a[_0x21f4d8(0x187)]||0x0};for(const _0x112a2a of _0x157e67){if('lxVBc'!=='lxVBc')this[_0x21f4d8(0x561)]=!![],this['processBattleCoreJS'](_0x21f4d8(0x3df)),_0x2be047[_0x21f4d8(0x710)]['BattleManager_processDefeat'][_0x21f4d8(0x701)](this),this['processPostBattleCommonEvents'](_0x21f4d8(0x4f4));else{if(!_0x112a2a)continue;if(!_0x112a2a['battler']())continue;_0x112a2a[_0x21f4d8(0x3ee)]()['startInjectAnimation'](_0x2dba09);}}const _0x5ee3fa=$gameTemp[_0x21f4d8(0xc2b)]();_0x5ee3fa&&('sJQOI'!==_0x21f4d8(0x44e)?_0x5ee3fa[_0x21f4d8(0x4cc)]('battleInjectPrep'):_0x1fe7f7=_0x2d8a6c);}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Inject_AnimationEnd',_0xb937e0=>{const _0x2196be=_0x5d4113;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3686eb=SceneManager['_scene'][_0x2196be(0xa9a)];if(!_0x3686eb)return;if(VisuMZ[_0x2196be(0xac5)][_0x2196be(0xa2b)]<=1.05){alert(_0x2196be(0x639)),SceneManager[_0x2196be(0x3e4)]();return;}VisuMZ['ConvertParams'](_0xb937e0,_0xb937e0);const _0x5aeaa7=VisuMZ['CreateActionSequenceTargets'](_0xb937e0[_0x2196be(0xac6)]);for(const _0x42378f of _0x5aeaa7){if(!_0x42378f)continue;if(!_0x42378f[_0x2196be(0x3ee)]())continue;_0x42378f['battler']()['stopInjectAnimation']();}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Inject_AnimationPauseResume',_0x892b03=>{const _0x593a1f=_0x5d4113;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x589898=SceneManager[_0x593a1f(0x5a4)][_0x593a1f(0xa9a)];if(!_0x589898)return;if(VisuMZ[_0x593a1f(0xac5)][_0x593a1f(0xa2b)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x593a1f(0xb3d)](_0x892b03,_0x892b03);const _0x494d7f=VisuMZ['CreateActionSequenceTargets'](_0x892b03[_0x593a1f(0xac6)]),_0x574d58=_0x892b03[_0x593a1f(0x697)];for(const _0x4a27c2 of _0x494d7f){if(_0x593a1f(0x169)!==_0x593a1f(0x5b2)){if(!_0x4a27c2)continue;if(!_0x4a27c2[_0x593a1f(0x3ee)]())continue;_0x4a27c2['battler']()['pauseInjectAnimation'](_0x574d58);}else this[_0x593a1f(0x4fc)]();}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x623),_0x129f07=>{const _0x50d616=_0x5d4113;if(!SceneManager[_0x50d616(0x2ab)]())return;const _0x4c69d3=$gameTemp[_0x50d616(0xc2b)]();if(!_0x4c69d3)return;_0x4c69d3[_0x50d616(0x4cc)]('battleInjectAni');}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Mechanics_ActionEffect',_0x48cbad=>{const _0x5943b7=_0x5d4113;if(!SceneManager[_0x5943b7(0x2ab)]())return;VisuMZ[_0x5943b7(0xb3d)](_0x48cbad,_0x48cbad);const _0x366874=$gameTemp[_0x5943b7(0xc2b)](),_0x1e4c42=BattleManager[_0x5943b7(0x1bb)],_0x3abc8e=BattleManager[_0x5943b7(0x932)],_0x58b66e=BattleManager['_logWindow'];if(!_0x366874||!_0x1e4c42||!_0x3abc8e)return;if(!_0x1e4c42['item']())return;const _0x436dfe=VisuMZ[_0x5943b7(0x6c4)](_0x48cbad['Targets']);for(const _0x21c74 of _0x436dfe){if(_0x5943b7(0xb9e)===_0x5943b7(0xb00))return _0x414324;else{if(!_0x21c74)continue;_0x58b66e[_0x5943b7(0x2ce)](_0x5943b7(0x14e),_0x3abc8e,_0x21c74);}}_0x366874[_0x5943b7(0x4cc)](_0x5943b7(0x732));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x44b),_0x1246f0=>{const _0x8e3204=_0x5d4113;if(!SceneManager[_0x8e3204(0x2ab)]())return;if(!Imported['VisuMZ_3_ActiveChainSkills'])return;$gameTemp[_0x8e3204(0x18e)]=!![];}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],'ActSeq_Mechanics_AddBuffDebuff',_0x1384b3=>{const _0x5ed4eb=_0x5d4113;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x1384b3,_0x1384b3);const _0x55e4a4=[_0x5ed4eb(0x53c),_0x5ed4eb(0xa55),_0x5ed4eb(0x56e),_0x5ed4eb(0xb2b),_0x5ed4eb(0xae0),_0x5ed4eb(0xab4),_0x5ed4eb(0x847),_0x5ed4eb(0x939)],_0x5336ad=_0x1384b3['Buffs'],_0x4aa9c0=_0x1384b3[_0x5ed4eb(0x81e)],_0x2038aa=_0x1384b3[_0x5ed4eb(0xba4)],_0x10be47=VisuMZ[_0x5ed4eb(0x6c4)](_0x1384b3[_0x5ed4eb(0xac6)]);for(const _0x419b3b of _0x10be47){if('PHzJG'!==_0x5ed4eb(0x8e3)){if(!_0x419b3b)continue;for(const _0x58b74d of _0x5336ad){const _0x5e5c90=_0x55e4a4['indexOf'](_0x58b74d[_0x5ed4eb(0x6d1)]()['trim']());if(_0x5e5c90>=0x0&&_0x5e5c90<=0x7){if(_0x5ed4eb(0x58a)!==_0x5ed4eb(0x58a))return this[_0x5ed4eb(0x148)]||this[_0x5ed4eb(0x6e9)]||this;else _0x419b3b['addBuff'](_0x5e5c90,_0x2038aa);}}for(const _0x568a2e of _0x4aa9c0){const _0x27cfe2=_0x55e4a4[_0x5ed4eb(0x6ef)](_0x568a2e[_0x5ed4eb(0x6d1)]()[_0x5ed4eb(0xacb)]());if(_0x27cfe2>=0x0&&_0x27cfe2<=0x7){if('ddSBj'===_0x5ed4eb(0x837))_0x419b3b[_0x5ed4eb(0x9d5)](_0x27cfe2,_0x2038aa);else return this[_0x5ed4eb(0x441)]()?_0x3a3a23[_0x5ed4eb(0x710)][_0x5ed4eb(0xa22)][_0x5ed4eb(0x701)](this):0x0;}}}else this[_0x5ed4eb(0x2ce)]('performEvasion',_0x443b19);}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Mechanics_AddState',_0x5a1cfc=>{const _0x21d398=_0x5d4113;if(!SceneManager[_0x21d398(0x2ab)]())return;VisuMZ[_0x21d398(0xb3d)](_0x5a1cfc,_0x5a1cfc);const _0xace11d=_0x5a1cfc[_0x21d398(0x2e9)],_0x18d95c=VisuMZ[_0x21d398(0x6c4)](_0x5a1cfc[_0x21d398(0xac6)]);for(const _0x38bdb0 of _0x18d95c){if(!_0x38bdb0)continue;for(const _0x28ec7d of _0xace11d){_0x38bdb0['addState'](_0x28ec7d);}}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xc8e),_0x37ec6b=>{const _0x1fb3af=_0x5d4113;if(!SceneManager[_0x1fb3af(0x2ab)]())return;VisuMZ[_0x1fb3af(0xb3d)](_0x37ec6b,_0x37ec6b);const _0x270fba=BattleManager[_0x1fb3af(0x1bb)],_0xa29c0a={'arPenRate':_0x37ec6b['ArPenRate'],'arPenFlat':_0x37ec6b['ArPenFlat'],'arRedRate':_0x37ec6b[_0x1fb3af(0xc4c)],'arRedFlat':_0x37ec6b[_0x1fb3af(0x72e)]};_0x270fba[_0x1fb3af(0x473)]=_0xa29c0a;}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0x66a),_0x3c570d=>{const _0x3a886b=_0x5d4113;if(!SceneManager[_0x3a886b(0x2ab)]())return;if(!Imported['VisuMZ_3_WeaknessDisplay'])return;VisuMZ['ConvertParams'](_0x3c570d,_0x3c570d);const _0x393041=VisuMZ[_0x3a886b(0x6c4)](_0x3c570d[_0x3a886b(0xac6)]),_0x10c3e4=_0x3c570d[_0x3a886b(0x1c2)]||0x1;for(const _0x52467a of _0x393041){if(!_0x52467a)continue;if(!_0x52467a['isEnemy']())continue;_0x52467a[_0x3a886b(0x3d6)](_0x10c3e4);}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Mechanics_AtbGauge',_0x20cc33=>{const _0x4c068b=_0x5d4113;if(!SceneManager[_0x4c068b(0x2ab)]())return;if(!Imported['VisuMZ_2_BattleSystemATB'])return;if(!BattleManager[_0x4c068b(0x433)]())return;VisuMZ['ConvertParams'](_0x20cc33,_0x20cc33);const _0x1e556b=VisuMZ[_0x4c068b(0x6c4)](_0x20cc33[_0x4c068b(0xac6)]),_0xa674a7=_0x20cc33[_0x4c068b(0x1b7)],_0x48a102=_0x20cc33['ChargeRate'],_0x13a68b=_0x20cc33['Interrupt'];for(const _0x5ac481 of _0x1e556b){if(_0x4c068b(0x181)===_0x4c068b(0x87d)){if(this[_0x4c068b(0xa20)])return this['_battleLayoutStyle'];return this[_0x4c068b(0xa20)]=_0x5ded5a['_scene'][_0x4c068b(0x30c)](),this['_battleLayoutStyle'];}else{if(!_0x5ac481)continue;if(_0x5ac481[_0x4c068b(0x78f)]())_0x5ac481[_0x4c068b(0xb2f)](_0xa674a7);else{if(_0x5ac481[_0x4c068b(0x8f9)]()){_0x5ac481['changeAtbCastTime'](_0x48a102);if(_0x13a68b)_0x5ac481[_0x4c068b(0x625)]();}}}}}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x5ed),_0xeeb990=>{const _0x132c9d=_0x5d4113;if(!SceneManager[_0x132c9d(0x2ab)]())return;if(!Imported[_0x132c9d(0x9e6)])return;VisuMZ[_0x132c9d(0xb3d)](_0xeeb990,_0xeeb990);const _0xa76432=VisuMZ[_0x132c9d(0x6c4)](_0xeeb990['Targets']),_0x13d537=_0xeeb990['BoostPoints'];for(const _0x14caf2 of _0xa76432){if(!_0x14caf2)continue;_0x14caf2['gainStoredBoostPoints'](_0x13d537);}}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],'ActSeq_Mechanics_BoostPointsStoreData',_0x5918c2=>{const _0x12e5b0=_0x5d4113;if(!SceneManager[_0x12e5b0(0x2ab)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager[_0x12e5b0(0x932)])return;VisuMZ[_0x12e5b0(0xb3d)](_0x5918c2,_0x5918c2);const _0x483463=_0x5918c2[_0x12e5b0(0x6df)];$gameVariables[_0x12e5b0(0x74d)](_0x483463,BattleManager[_0x12e5b0(0x932)]['toUseBoostPoints']());}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x730),_0xbd40ed=>{const _0x500a5c=_0x5d4113;if(!SceneManager[_0x500a5c(0x2ab)]())return;if(!Imported[_0x500a5c(0x25b)])return;VisuMZ[_0x500a5c(0xb3d)](_0xbd40ed,_0xbd40ed);const _0x59d19e=VisuMZ[_0x500a5c(0x6c4)](_0xbd40ed['Targets']),_0x58b08e=_0xbd40ed[_0x500a5c(0xa09)];for(const _0x394ef8 of _0x59d19e){if(_0x500a5c(0x9a8)!=='VMGYN')return!![];else{if(!_0x394ef8)continue;if(_0x394ef8[_0x500a5c(0x99e)]())continue;if(!_0x394ef8['isAffectedByBreakShield']())continue;_0x394ef8[_0x500a5c(0xaa0)](_0x58b08e);}}}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],'ActSeq_Mechanics_BreakShieldReset',_0x17539c=>{const _0x5219ca=_0x5d4113;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5219ca(0x25b)])return;VisuMZ[_0x5219ca(0xb3d)](_0x17539c,_0x17539c);const _0x3d4993=VisuMZ[_0x5219ca(0x6c4)](_0x17539c[_0x5219ca(0xac6)]);for(const _0x5ccb06 of _0x3d4993){if(!_0x5ccb06)continue;if(_0x5ccb06[_0x5219ca(0x99e)]())continue;if(!_0x5ccb06[_0x5219ca(0x757)]())continue;_0x5ccb06[_0x5219ca(0xaa1)]();}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x675),_0x31a2b5=>{const _0x2447ec=_0x5d4113;if(!SceneManager[_0x2447ec(0x2ab)]())return;if(!Imported['VisuMZ_2_BattleSystemBTB'])return;if(!BattleManager[_0x2447ec(0x592)]())return;VisuMZ[_0x2447ec(0xb3d)](_0x31a2b5,_0x31a2b5);const _0x3f96c3=VisuMZ['CreateActionSequenceTargets'](_0x31a2b5['Targets']),_0x3faec4=_0x31a2b5[_0x2447ec(0xa28)];for(const _0x5bee25 of _0x3f96c3){if(!_0x5bee25)continue;_0x5bee25['gainBravePoints'](_0x3faec4);}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x308),_0x1efe41=>{const _0x54671f=_0x5d4113;if(!SceneManager[_0x54671f(0x2ab)]())return;VisuMZ[_0x54671f(0xb3d)](_0x1efe41,_0x1efe41);const _0x32b030=$gameTemp[_0x54671f(0xc2b)](),_0x5575be=BattleManager[_0x54671f(0x1bb)],_0x285555=BattleManager[_0x54671f(0x932)];if(!_0x32b030||!_0x5575be||!_0x285555)return;if(!_0x5575be['item']())return;const _0x44a8c3=VisuMZ['CreateActionSequenceTargets'](_0x1efe41[_0x54671f(0xac6)]);for(const _0x41cb17 of _0x44a8c3){if(!_0x41cb17)continue;_0x1efe41['ForceDeath']&&(_0x41cb17['removeImmortal'](),_0x41cb17[_0x54671f(0x487)](_0x41cb17[_0x54671f(0x747)]()));if(_0x41cb17[_0x54671f(0x816)]()){if(_0x54671f(0x38a)===_0x54671f(0x38a))_0x41cb17[_0x54671f(0x47f)]();else{if(!_0x2ff671[_0x54671f(0x9f8)]())return;const _0xc2e1d6=this[_0x54671f(0x3ee)]();if(!_0xc2e1d6)return;_0xc2e1d6[_0x54671f(0x761)](_0x16da1a,_0x3c5dcd,_0x16cbf5,_0x5c7fc7);}}}_0x32b030[_0x54671f(0x4cc)](_0x54671f(0x99d));}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0x863),_0x75a4=>{const _0x456d95=_0x5d4113;if(!SceneManager[_0x456d95(0x2ab)]())return;if(!Imported[_0x456d95(0x7f4)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x456d95(0xb3d)](_0x75a4,_0x75a4);const _0x130778=VisuMZ[_0x456d95(0x6c4)](_0x75a4[_0x456d95(0xac6)]),_0x50f470=_0x75a4[_0x456d95(0x587)];for(const _0x27a102 of _0x130778){if(!_0x27a102)continue;_0x27a102[_0x456d95(0x7b4)](_0x50f470);}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x717),_0x9ee22b=>{const _0x3bfe83=_0x5d4113;if(!SceneManager[_0x3bfe83(0x2ab)]())return;if(!Imported[_0x3bfe83(0x7f4)])return;if(!BattleManager[_0x3bfe83(0xbb9)]())return;VisuMZ['ConvertParams'](_0x9ee22b,_0x9ee22b);const _0xd7b91c=VisuMZ[_0x3bfe83(0x6c4)](_0x9ee22b[_0x3bfe83(0xac6)]),_0x58432b=_0x9ee22b[_0x3bfe83(0x1b7)],_0x55b5ea=_0x9ee22b[_0x3bfe83(0x1b7)];for(const _0x5cc166 of _0xd7b91c){if(!_0x5cc166)continue;if(_0x5cc166[_0x3bfe83(0x803)]==='charging'){if('grkSi'===_0x3bfe83(0x1f7))_0x5cc166[_0x3bfe83(0xa58)](_0x58432b);else return _0x56ce54['filter'](_0x5b9d9a=>_0x5b9d9a[_0x3bfe83(0xa26)]());}else _0x5cc166[_0x3bfe83(0x803)]===_0x3bfe83(0x443)&&_0x5cc166[_0x3bfe83(0x700)](_0x55b5ea);}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x3a1),_0x2b1e6a=>{const _0x28ea9c=_0x5d4113;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x28ea9c(0xb3d)](_0x2b1e6a,_0x2b1e6a);const _0x7093c0=BattleManager[_0x28ea9c(0x1bb)];if(!_0x7093c0)return;let _0x2c7499=_0x2b1e6a['Formula'];_0x7093c0[_0x28ea9c(0x981)](_0x2c7499);}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xb82),_0x4245df=>{const _0x4f11ba=_0x5d4113;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x4245df,_0x4245df);const _0x59c0e2=VisuMZ['CreateActionSequenceTargets'](_0x4245df[_0x4f11ba(0xac6)]);for(const _0x458187 of _0x59c0e2){if('fjqAY'!==_0x4f11ba(0x8c5)){if(!_0x458187)continue;if(_0x458187[_0x4f11ba(0xb73)]())_0x458187[_0x4f11ba(0x77e)]();}else this['x']=_0x42fd82[_0x4f11ba(0xbb8)]-this[_0x4f11ba(0x258)]()[_0x4f11ba(0x3ee)]()[_0x4f11ba(0x8bf)];}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Mechanics_DeathBreak',_0x106c6d=>{const _0x520e4d=_0x5d4113;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x520e4d(0xb3d)](_0x106c6d,_0x106c6d);const _0x40466a=$gameTemp[_0x520e4d(0xc2b)](),_0x104997=BattleManager[_0x520e4d(0x932)],_0xbf008e=_0x106c6d['JumpToLabel'];if(!_0x40466a)return;if(!_0x104997)return;_0x104997&&_0x104997[_0x520e4d(0xa26)]()&&_0xbf008e[_0x520e4d(0x6d1)]()[_0x520e4d(0xacb)]()!==_0x520e4d(0x5f1)&&(_0x520e4d(0x7f8)===_0x520e4d(0x7f8)?_0x40466a[_0x520e4d(0x37d)]([_0xbf008e]):(this[_0x520e4d(0x7c2)][_0x520e4d(0x2ce)](_0x520e4d(0x93e),_0xffb7f8[_0x520e4d(0x163)][_0x520e4d(0x85d)](_0x47d8c3[_0x520e4d(0x2c0)]())),this[_0x520e4d(0x7c2)][_0x520e4d(0x2ce)](_0x520e4d(0x64b))));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x9e1),_0x3133e5=>{const _0x198e33=_0x5d4113;if(!SceneManager[_0x198e33(0x2ab)]())return;VisuMZ['ConvertParams'](_0x3133e5,_0x3133e5);const _0x313150=VisuMZ[_0x198e33(0x6c4)](_0x3133e5[_0x198e33(0xac6)]);for(const _0x3b98a5 of _0x313150){if(!_0x3b98a5)continue;if(!_0x3b98a5[_0x198e33(0xb88)]())continue;_0x3b98a5['escape']();}}),PluginManager['registerCommand'](pluginData['name'],_0x5d4113(0x5b6),_0x2d5089=>{const _0x28e591=_0x5d4113;if(!SceneManager[_0x28e591(0x2ab)]())return;if(!Imported[_0x28e591(0xae3)])return;if(!BattleManager['isETB']())return;VisuMZ[_0x28e591(0xb3d)](_0x2d5089,_0x2d5089);const _0x12c499=_0x2d5089['ActionCount'];BattleManager[_0x28e591(0x932)]&&BattleManager[_0x28e591(0x932)]['friendsUnit']()[_0x28e591(0x5d0)](_0x12c499);}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Mechanics_FtbAction',_0x1328e7=>{const _0x30b42b=_0x5d4113;if(!SceneManager[_0x30b42b(0x2ab)]())return;if(!Imported[_0x30b42b(0x56c)])return;if(!BattleManager[_0x30b42b(0x5a0)]())return;VisuMZ[_0x30b42b(0xb3d)](_0x1328e7,_0x1328e7);const _0x50d9e5=_0x1328e7[_0x30b42b(0x48c)];BattleManager[_0x30b42b(0x932)]&&(_0x30b42b(0x992)==='asgwi'?this[_0x30b42b(0xbf6)]():BattleManager[_0x30b42b(0x932)][_0x30b42b(0x7a6)]()[_0x30b42b(0x42b)](_0x50d9e5));}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],'ActSeq_Mechanics_HpMpTp',_0x40e1a9=>{const _0x5d8c4f=_0x5d4113;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5d8c4f(0xb3d)](_0x40e1a9,_0x40e1a9);const _0x227b06=VisuMZ[_0x5d8c4f(0x6c4)](_0x40e1a9[_0x5d8c4f(0xac6)]),_0x3b4479=_0x40e1a9[_0x5d8c4f(0x383)],_0x272e93=_0x40e1a9[_0x5d8c4f(0x474)],_0x360d1f=_0x40e1a9['MP_Rate'],_0x3c06dd=_0x40e1a9['MP_Flat'],_0xc3249c=_0x40e1a9[_0x5d8c4f(0x346)],_0x47a86c=_0x40e1a9[_0x5d8c4f(0xbc0)],_0x2d72ff=_0x40e1a9[_0x5d8c4f(0x4fd)];for(const _0x30116a of _0x227b06){if(!_0x30116a)continue;const _0xfd6aa0=_0x30116a[_0x5d8c4f(0x6ab)](),_0x3c8ee9=Math['round'](_0x3b4479*_0x30116a[_0x5d8c4f(0x4d3)]+_0x272e93),_0x1e11e4=Math[_0x5d8c4f(0xb50)](_0x360d1f*_0x30116a[_0x5d8c4f(0x871)]+_0x3c06dd),_0x48f0da=Math[_0x5d8c4f(0xb50)](_0xc3249c*_0x30116a[_0x5d8c4f(0xb3a)]()+_0x47a86c);if(_0x3c8ee9!==0x0)_0x30116a[_0x5d8c4f(0x407)](_0x3c8ee9);if(_0x1e11e4!==0x0)_0x30116a[_0x5d8c4f(0x8c3)](_0x1e11e4);if(_0x48f0da!==0x0)_0x30116a['gainTp'](_0x48f0da);if(_0x2d72ff)_0x30116a[_0x5d8c4f(0x77e)]();_0xfd6aa0&&_0x30116a[_0x5d8c4f(0xa26)]()&&_0x30116a[_0x5d8c4f(0x47f)]();}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x71d),_0x376ea8=>{const _0x36f9de=_0x5d4113;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x36f9de(0xb3d)](_0x376ea8,_0x376ea8);const _0x3c8ace=VisuMZ['CreateActionSequenceTargets'](_0x376ea8[_0x36f9de(0xac6)]);for(const _0x38e2ac of _0x3c8ace){if(!_0x38e2ac)continue;_0x38e2ac[_0x36f9de(0x170)](_0x376ea8[_0x36f9de(0x1ac)]);}}),PluginManager['registerCommand'](pluginData['name'],_0x5d4113(0x2e8),_0x5bec23=>{const _0x13bb0a=_0x5d4113;if(!SceneManager[_0x13bb0a(0x2ab)]())return;VisuMZ[_0x13bb0a(0xb3d)](_0x5bec23,_0x5bec23);const _0x52a857=BattleManager[_0x13bb0a(0x1bb)],_0xfe8d0={'criticalHitRate':_0x5bec23[_0x13bb0a(0xa61)],'criticalHitFlat':_0x5bec23[_0x13bb0a(0x5d5)],'criticalDmgRate':_0x5bec23[_0x13bb0a(0x7dc)],'criticalDmgFlat':_0x5bec23[_0x13bb0a(0x5d9)],'damageRate':_0x5bec23['DamageRate'],'damageFlat':_0x5bec23[_0x13bb0a(0x9dc)],'hitRate':_0x5bec23[_0x13bb0a(0x895)],'hitFlat':_0x5bec23[_0x13bb0a(0x86c)]};_0x52a857[_0x13bb0a(0xb64)]=_0xfe8d0;}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xa76),_0xcb83d=>{const _0xb5d89b=_0x5d4113;if(!SceneManager[_0xb5d89b(0x2ab)]())return;VisuMZ['ConvertParams'](_0xcb83d,_0xcb83d);const _0x2b79c5=_0xcb83d['CommonEventID'];SceneManager[_0xb5d89b(0x5a4)][_0xb5d89b(0x272)](_0x2b79c5);}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xbe6),_0x3184e6=>{const _0x123988=_0x5d4113;if(!SceneManager[_0x123988(0x2ab)]())return;if(!Imported[_0x123988(0xc9b)])return;if(!BattleManager['isOTB']())return;VisuMZ[_0x123988(0xb3d)](_0x3184e6,_0x3184e6);const _0x3a5c36=VisuMZ[_0x123988(0x6c4)](_0x3184e6['Targets']);for(const _0xee3e2 of _0x3a5c36){if('UmMsy'!==_0x123988(0x7c6))for(const _0x4dbc81 of _0x591b90){const _0x57bcec=_0x320c1c[0x0][_0x123988(0x85d)](_0x4dbc81[0x0]),_0x218878=_0x1a79f8[0x1][_0x123988(0x85d)](_0x4dbc81[0x1]),_0x179a73=new _0x41798d(_0x3688fc[_0x123988(0x85d)](_0x218878),'i');_0x8742de[_0x57bcec]=_0x179a73;}else{if(!_0xee3e2)continue;let _0x4edb47=_0x3184e6[_0x123988(0x888)],_0x40f9f6=_0x3184e6['NextTurn'],_0x5ed724=_0x3184e6[_0x123988(0xacd)];BattleManager[_0x123988(0x6e8)][_0x123988(0x4b0)](_0xee3e2)?_0x4edb47+=_0x5ed724:_0x40f9f6+=_0x5ed724,BattleManager[_0x123988(0x8b5)](_0xee3e2,-_0x4edb47,![]),BattleManager[_0x123988(0x8b5)](_0xee3e2,-_0x40f9f6,!![]);}}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_PtbAlterCost',_0x557d82=>{const _0x19d942=_0x5d4113;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x19d942(0xb0e)])return;if(!BattleManager[_0x19d942(0xc9d)]())return;VisuMZ[_0x19d942(0xb3d)](_0x557d82,_0x557d82);const _0x166b13=BattleManager['_subject'][_0x19d942(0x7a6)](),_0x5cf3d0=_0x557d82[_0x19d942(0x3f8)],_0x530e07=_0x557d82[_0x19d942(0x3e9)]||_0x19d942(0x87f),_0x2e8854=_0x557d82[_0x19d942(0x89d)]||_0x19d942(0x87f),_0x16794f=_0x557d82[_0x19d942(0xad4)]||0x0,_0xba0eb4=_0x557d82[_0x19d942(0x8b2)]||0x0;(_0x166b13[_0x19d942(0x81a)]()||_0x5cf3d0)&&(_0x5cf3d0&&(_0x166b13[_0x19d942(0x206)]=_0x166b13[_0x19d942(0x206)]||{},_0x166b13[_0x19d942(0x206)][_0x19d942(0x678)]=0x0),_0x166b13[_0x19d942(0xa78)](_0x530e07,_0x2e8854,_0x16794f,_0xba0eb4));}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0x9a6),_0x300c58=>{const _0xdaa814=_0x5d4113;if(!SceneManager[_0xdaa814(0x2ab)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager['isPTB']())return;VisuMZ[_0xdaa814(0xb3d)](_0x300c58,_0x300c58);const _0x565048=BattleManager[_0xdaa814(0x932)]['friendsUnit']();let _0x3eb41c=Math[_0xdaa814(0xbcc)](_0x300c58[_0xdaa814(0xc43)],0x0),_0x50ba25=_0x565048[_0xdaa814(0x99f)](),_0x1b8c70=_0x565048[_0xdaa814(0x28f)]();while(_0x3eb41c--){if(_0x50ba25<=0x0&&_0x1b8c70<=0x0)break;else _0x50ba25>0x0?(_0x50ba25--,_0x1b8c70++):_0x1b8c70--;}_0x565048[_0xdaa814(0x6f8)](_0x50ba25),_0x565048[_0xdaa814(0x7a9)](_0x1b8c70);}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xa08),_0x5d9554=>{const _0x45d978=_0x5d4113;if(!SceneManager[_0x45d978(0x2ab)]())return;if(!Imported[_0x45d978(0xb0e)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x45d978(0xb3d)](_0x5d9554,_0x5d9554);const _0x180c78=BattleManager[_0x45d978(0x932)]['friendsUnit']();let _0x3e8944=_0x5d9554[_0x45d978(0x6d7)],_0x47b9b4=_0x5d9554[_0x45d978(0x76e)];_0x180c78[_0x45d978(0xc38)](_0x3e8944),_0x180c78[_0x45d978(0x51a)](_0x47b9b4);}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x27b),_0x51a94=>{const _0x58229d=_0x5d4113;if(!SceneManager[_0x58229d(0x2ab)]())return;VisuMZ[_0x58229d(0xb3d)](_0x51a94,_0x51a94);const _0x5eff49=[_0x58229d(0x53c),'MAXMP',_0x58229d(0x56e),_0x58229d(0xb2b),_0x58229d(0xae0),_0x58229d(0xab4),_0x58229d(0x847),_0x58229d(0x939)],_0x4f92e6=_0x51a94['Buffs'],_0x16ff11=_0x51a94[_0x58229d(0x81e)],_0x134c5f=VisuMZ[_0x58229d(0x6c4)](_0x51a94[_0x58229d(0xac6)]);for(const _0x1eff1e of _0x134c5f){if('zdVyL'!==_0x58229d(0x975)){if(!_0x1eff1e)continue;for(const _0x4f0444 of _0x4f92e6){if(_0x58229d(0x3a6)===_0x58229d(0xc62))this[_0x58229d(0x437)][_0x58229d(0xc68)]=_0x5703a3(_0x12523c['$1']),this[_0x58229d(0x437)]['svAnchorY']=_0x249624(_0x2d7353['$2']);else{const _0x4ed591=_0x5eff49[_0x58229d(0x6ef)](_0x4f0444['toUpperCase']()[_0x58229d(0xacb)]());_0x4ed591>=0x0&&_0x4ed591<=0x7&&_0x1eff1e[_0x58229d(0x820)](_0x4ed591)&&_0x1eff1e['removeBuff'](_0x4ed591);}}for(const _0x4f26dd of _0x16ff11){const _0x3c4c16=_0x5eff49['indexOf'](_0x4f26dd[_0x58229d(0x6d1)]()['trim']());_0x3c4c16>=0x0&&_0x3c4c16<=0x7&&_0x1eff1e[_0x58229d(0xb67)](_0x3c4c16)&&_0x1eff1e[_0x58229d(0x8be)](_0x3c4c16);}}else return this[_0x58229d(0x6e8)][_0x58229d(0x2bc)]();}}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0x971),_0x4638f1=>{const _0x57700e=_0x5d4113;if(!SceneManager[_0x57700e(0x2ab)]())return;VisuMZ['ConvertParams'](_0x4638f1,_0x4638f1);const _0x26225f=_0x4638f1[_0x57700e(0x2e9)],_0x2b31c5=VisuMZ['CreateActionSequenceTargets'](_0x4638f1['Targets']);for(const _0x218aa0 of _0x2b31c5){if(_0x57700e(0x661)!==_0x57700e(0x661)){const _0x509f77=this['_subject'][_0x57700e(0x2de)](),_0x2f03ed=this['_subject'];_0x509f77&&_0x509f77[_0x57700e(0x652)]()===_0x2f03ed&&_0x509f77[_0x57700e(0x155)](_0x57700e(0x219)),_0x3953f2['BattleCore'][_0x57700e(0xafb)]['call'](this),_0x509f77&&_0x509f77[_0x57700e(0x652)]()===_0x2f03ed&&_0x509f77[_0x57700e(0x155)](_0x57700e(0x469));}else{if(!_0x218aa0)continue;for(const _0x3dd1a9 of _0x26225f){_0x218aa0[_0x57700e(0x8e0)](_0x3dd1a9);}}}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x189),_0xe24f7d=>{const _0x2a00d9=_0x5d4113;if(!SceneManager[_0x2a00d9(0x2ab)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager['isSTB']())return;VisuMZ['ConvertParams'](_0xe24f7d,_0xe24f7d);const _0x96f04e=_0xe24f7d['Exploited'],_0x583a80=VisuMZ[_0x2a00d9(0x6c4)](_0xe24f7d[_0x2a00d9(0xac6)]),_0x46c7ae=_0xe24f7d['ForceExploited'],_0x5bcbc1=_0xe24f7d[_0x2a00d9(0x944)],_0x325a8e=_0xe24f7d[_0x2a00d9(0x262)],_0x58ab14=BattleManager[_0x2a00d9(0x1bb)];if(_0x96f04e){if(_0x2a00d9(0x165)!=='BNkye')for(const _0x3dd3ab of _0x583a80){if(_0x2a00d9(0x840)==='CgmUI'){if(!_0x3dd3ab)continue;if(_0x3dd3ab===user)continue;if(_0x46c7ae)_0x3dd3ab[_0x2a00d9(0x8fe)](![]);_0x3dd3ab[_0x2a00d9(0x3e3)](BattleManager[_0x2a00d9(0x932)],_0x58ab14);}else _0x32707c+=_0x242c6c['abs'](_0x45e486[_0x2a00d9(0xa16)]);}else _0xe643cf[_0x2a00d9(0x710)][_0x2a00d9(0x4ef)](_0x520ca5,_0x515274);}if(_0x5bcbc1&&BattleManager[_0x2a00d9(0x932)]){if(_0x325a8e)BattleManager['_subject'][_0x2a00d9(0x8fe)](![]);const _0x166d6f=_0x583a80[0x0];BattleManager['performSTBExploiter'](_0x166d6f,_0x58ab14);}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x906),_0x1e4f94=>{const _0x9f6e43=_0x5d4113;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x9f6e43(0x55d)])return;if(!BattleManager[_0x9f6e43(0xa67)]())return;VisuMZ[_0x9f6e43(0xb3d)](_0x1e4f94,_0x1e4f94);const _0x56e9d5=_0x1e4f94[_0x9f6e43(0x8e2)];if(BattleManager[_0x9f6e43(0x932)]){if(_0x9f6e43(0x8e5)!==_0x9f6e43(0x8e5))return this[_0x9f6e43(0x484)]&&this[_0x9f6e43(0x484)][_0x9f6e43(0x38d)]();else BattleManager['_subject']['stbGainInstant'](_0x56e9d5);}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x183),_0x5bf4de=>{const _0x3a3ceb=_0x5d4113;if(!SceneManager[_0x3a3ceb(0x2ab)]())return;if(!Imported[_0x3a3ceb(0x55d)])return;if(!BattleManager[_0x3a3ceb(0xa67)]())return;VisuMZ['ConvertParams'](_0x5bf4de,_0x5bf4de);let _0x50385e=_0x5bf4de[_0x3a3ceb(0x8e2)];if(BattleManager[_0x3a3ceb(0x932)]){BattleManager[_0x3a3ceb(0x932)]['_actions']=BattleManager[_0x3a3ceb(0x932)][_0x3a3ceb(0x427)]||[];while(_0x50385e--){if('QQLPI'!=='MxeeV'){if(BattleManager['_subject'][_0x3a3ceb(0x427)][_0x3a3ceb(0x7da)]<=0x0)break;BattleManager[_0x3a3ceb(0x932)][_0x3a3ceb(0x427)][_0x3a3ceb(0x2bc)]();}else this[_0x3a3ceb(0x484)]['isSpriteVisible']()&&this['createDamageSprite']();}}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x806),_0x48c4a3=>{const _0x492b4c=_0x5d4113;if(!SceneManager[_0x492b4c(0x2ab)]())return;if(!Imported[_0x492b4c(0x8cc)])return;VisuMZ[_0x492b4c(0xb3d)](_0x48c4a3,_0x48c4a3);const _0x55409d=VisuMZ[_0x492b4c(0x6c4)](_0x48c4a3[_0x492b4c(0xac6)]),_0x5deaf1=_0x48c4a3[_0x492b4c(0x7ac)];for(const _0x31c8d1 of _0x55409d){if(!_0x31c8d1)continue;if(!_0x31c8d1['isActor']())continue;_0x31c8d1[_0x492b4c(0xa99)](_0x5deaf1);}}),PluginManager['registerCommand'](pluginData['name'],_0x5d4113(0x25e),_0x4f47be=>{const _0x4c3396=_0x5d4113;if(!SceneManager[_0x4c3396(0x2ab)]())return;VisuMZ[_0x4c3396(0xb3d)](_0x4f47be,_0x4f47be);const _0x134662=VisuMZ[_0x4c3396(0x6c4)](_0x4f47be[_0x4c3396(0xac6)]),_0x4221ab=_0x4f47be[_0x4c3396(0x35c)],_0x22cfcb={'textColor':ColorManager[_0x4c3396(0x913)](_0x4f47be[_0x4c3396(0x681)]),'flashColor':_0x4f47be['FlashColor'],'flashDuration':_0x4f47be[_0x4c3396(0x55b)]};for(const _0x2e7f7c of _0x134662){if(_0x4c3396(0xc7d)!=='iyKAo')return _0x5ce70d['BattleCore']['Settings']['PartyCmd']['CmdStyle'];else{if(!_0x2e7f7c)continue;_0x2e7f7c[_0x4c3396(0x749)](_0x4221ab,_0x22cfcb);}}}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0x995),_0x108301=>{const _0x21dc2a=_0x5d4113;if(!SceneManager[_0x21dc2a(0x2ab)]())return;VisuMZ[_0x21dc2a(0xb3d)](_0x108301,_0x108301);const _0x5494d5=VisuMZ['CreateActionSequenceTargets'](_0x108301[_0x21dc2a(0xac6)]);let _0x2e9eb4=$gameVariables[_0x21dc2a(0x6b7)](_0x108301['Variable']);Imported[_0x21dc2a(0x567)]&&_0x108301[_0x21dc2a(0xb44)]&&(_0x2e9eb4=VisuMZ[_0x21dc2a(0x75a)](_0x2e9eb4));const _0xdf0726=String(_0x2e9eb4),_0x595ce1={'textColor':ColorManager['getColor'](_0x108301[_0x21dc2a(0x681)]),'flashColor':_0x108301[_0x21dc2a(0xad1)],'flashDuration':_0x108301[_0x21dc2a(0x55b)]};for(const _0x13b400 of _0x5494d5){if(!_0x13b400)continue;_0x13b400[_0x21dc2a(0x749)](_0xdf0726,_0x595ce1);}}),PluginManager['registerCommand'](pluginData['name'],_0x5d4113(0x60a),_0x518dec=>{const _0x507b00=_0x5d4113;if(!SceneManager[_0x507b00(0x2ab)]())return;const _0x45b0fa=$gameTemp[_0x507b00(0xc2b)]();if(!_0x45b0fa)return;_0x45b0fa[_0x507b00(0x4cc)](_0x507b00(0x99d));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xbf0),_0x43f8d4=>{const _0x4bb39e=_0x5d4113;if(!SceneManager[_0x4bb39e(0x2ab)]())return;VisuMZ[_0x4bb39e(0xb3d)](_0x43f8d4,_0x43f8d4);const _0x368ea8=VisuMZ[_0x4bb39e(0x6c4)](_0x43f8d4[_0x4bb39e(0xac6)]);for(const _0x46af22 of _0x368ea8){if(_0x4bb39e(0x3d2)===_0x4bb39e(0x630))return this[_0x4bb39e(0xa65)]&&this[_0x4bb39e(0xa65)]()?_0x387d22[_0x4bb39e(0x710)][_0x4bb39e(0x326)][_0x4bb39e(0xc03)][_0x4bb39e(0xaeb)]:_0x27d192[_0x4bb39e(0x710)]['Settings'][_0x4bb39e(0x194)][_0x4bb39e(0xaeb)];else{if(!_0x46af22)continue;_0x46af22[_0x4bb39e(0xb69)]();}}}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x612),_0x356401=>{const _0xb3b200=_0x5d4113;if(!SceneManager[_0xb3b200(0x2ab)]())return;VisuMZ[_0xb3b200(0xb3d)](_0x356401,_0x356401);const _0x4da40d=VisuMZ['CreateActionSequenceTargets'](_0x356401[_0xb3b200(0xac6)]),_0x323e66=_0x356401[_0xb3b200(0x8df)]['toLowerCase']()[_0xb3b200(0xacb)]();let _0x33e50d=_0x356401[_0xb3b200(0xab9)];const _0x1585c9=_0x356401['Frame'];if(![_0xb3b200(0x5eb),'thrust',_0xb3b200(0xb45),'missile'][_0xb3b200(0x4b0)](_0x323e66)){if(_0xb3b200(0x53a)!==_0xb3b200(0x53a)){if(!_0x27b4dd['isSceneBattle']())return;const _0x39ec0d=_0x2b7a3b[_0xb3b200(0xc2b)]();if(!_0x39ec0d)return;_0x39ec0d[_0xb3b200(0x4cc)]('battleFloat');}else _0x33e50d=![];}for(const _0x47f7e7 of _0x4da40d){if(_0xb3b200(0x207)===_0xb3b200(0x2ad)){if(_0x3ab2ab[_0xb3b200(0x710)][_0xb3b200(0x326)][_0xb3b200(0xb91)]['BattleLogRectJS'])return _0x3a5a53[_0xb3b200(0x710)]['Settings'][_0xb3b200(0xb91)][_0xb3b200(0x39f)]['call'](this);return _0x267a9b['BattleCore'][_0xb3b200(0x180)][_0xb3b200(0x701)](this);}else{if(!_0x47f7e7)continue;_0x47f7e7[_0xb3b200(0xad7)](_0x323e66,_0x33e50d,_0x1585c9);}}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Motion_MotionType',_0x43bab6=>{const _0x1353fd=_0x5d4113;if(!SceneManager[_0x1353fd(0x2ab)]())return;VisuMZ[_0x1353fd(0xb3d)](_0x43bab6,_0x43bab6);const _0x42671a=VisuMZ['CreateActionSequenceTargets'](_0x43bab6['Targets']),_0x5036af=_0x43bab6[_0x1353fd(0x8df)]['toLowerCase']()[_0x1353fd(0xacb)](),_0x1dab59=_0x43bab6[_0x1353fd(0xab9)];for(const _0x3ed846 of _0x42671a){if(_0x1353fd(0x501)!==_0x1353fd(0x501))_0x36d92b[_0x1353fd(0xc03)][_0x1353fd(0x53f)]=![];else{if(!_0x3ed846)continue;if(_0x5036af['match'](/ATTACK[ ](\d+)/i))_0x3ed846['performAttackSlot'](Number(RegExp['$1']));else _0x5036af===_0x1353fd(0x5eb)?_0x3ed846[_0x1353fd(0xafd)]():_0x3ed846[_0x1353fd(0xb5c)](_0x5036af);if(!_0x1dab59)_0x3ed846['startWeaponAnimation'](0x0);else{if(_0x1dab59&&[_0x1353fd(0xb62),_0x1353fd(0xb45),'missle'][_0x1353fd(0x4b0)](_0x5036af)){}}}}}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x807),_0x5e14d6=>{const _0x1d3225=_0x5d4113;if(!SceneManager[_0x1d3225(0x2ab)]())return;VisuMZ[_0x1d3225(0xb3d)](_0x5e14d6,_0x5e14d6);const _0x576899=BattleManager[_0x1d3225(0x1bb)];if(!_0x576899)return;if(!_0x576899[_0x1d3225(0x441)]())return;const _0x25a348=VisuMZ[_0x1d3225(0x6c4)](_0x5e14d6[_0x1d3225(0xac6)]);for(const _0x4ed77c of _0x25a348){if(!_0x4ed77c)continue;_0x4ed77c[_0x1d3225(0xc78)](_0x576899);}}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0x478),_0x31ec85=>{const _0x69e45a=_0x5d4113;if(!SceneManager[_0x69e45a(0x2ab)]())return;VisuMZ[_0x69e45a(0xb3d)](_0x31ec85,_0x31ec85);const _0x218768=VisuMZ[_0x69e45a(0x6c4)](_0x31ec85[_0x69e45a(0xac6)]);for(const _0x5004ed of _0x218768){if('zczfF'!==_0x69e45a(0x243))return _0x45eb58[_0x69e45a(0x44d)]['isOkEnabled'][_0x69e45a(0x701)](this)&&this[_0x69e45a(0xbf5)]();else{if(!_0x5004ed)continue;if(!_0x5004ed[_0x69e45a(0x3ee)]())continue;_0x5004ed[_0x69e45a(0x3ee)]()[_0x69e45a(0x221)]();}}}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0xba0),_0x3f9e88=>{const _0x1d359a=_0x5d4113;if(!SceneManager[_0x1d359a(0x2ab)]())return;VisuMZ['ConvertParams'](_0x3f9e88,_0x3f9e88);const _0x4238c4=$gameTemp[_0x1d359a(0xc2b)](),_0x510833=_0x3f9e88[_0x1d359a(0x9ea)]*Sprite_Battler[_0x1d359a(0xa0a)];_0x4238c4['wait'](_0x510833);}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xb11),_0x18e216=>{const _0x10071e=_0x5d4113;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x10071e(0xb3d)](_0x18e216,_0x18e216);const _0x52a6e4=$gameTemp[_0x10071e(0xc2b)](),_0x17a022=BattleManager[_0x10071e(0x1bb)];if(!_0x52a6e4||!_0x17a022)return;if(!_0x17a022[_0x10071e(0x441)]())return;const _0x2b6fdc=VisuMZ[_0x10071e(0x6c4)](_0x18e216['Targets']);for(const _0x57d81d of _0x2b6fdc){if(_0x10071e(0x4d4)!==_0x10071e(0x4d4)){_0xf4993a[_0x10071e(0x44d)]['callUpdateHelp'][_0x10071e(0x701)](this);if(this[_0x10071e(0x6b0)])this[_0x10071e(0xc2f)]();}else{if(!_0x57d81d)continue;_0x57d81d[_0x10071e(0x68d)](_0x17a022);}}if(_0x18e216[_0x10071e(0x222)])_0x52a6e4['setWaitMode']('battleMove');}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Movement_HomeMoveBy',_0x2468fb=>{const _0x4188da=_0x5d4113;if(!SceneManager[_0x4188da(0x2ab)]())return;if(!$gameSystem[_0x4188da(0x9f8)]())return;VisuMZ['ConvertParams'](_0x2468fb,_0x2468fb);const _0x585d48=$gameTemp[_0x4188da(0xc2b)](),_0x2fbd04=VisuMZ['CreateActionSequenceTargets'](_0x2468fb[_0x4188da(0xac6)]),_0x3f6f0e=_0x2468fb[_0x4188da(0x464)],_0x2da1cb=_0x2468fb[_0x4188da(0x9a1)],_0x5cbab9=_0x2468fb[_0x4188da(0xbb4)],_0x46eb77=_0x2468fb[_0x4188da(0x88b)],_0x4c868a=_0x2468fb[_0x4188da(0x70c)],_0x5c7e4f=_0x2468fb['EasingType'],_0x5d4b53=_0x2468fb[_0x4188da(0x8df)],_0x18038d=_0x2468fb[_0x4188da(0x222)];if(!_0x585d48)return;for(const _0x342baa of _0x2fbd04){if(!_0x342baa)continue;let _0x5072ec=_0x2da1cb,_0xf09eff=_0x5cbab9;if(_0x3f6f0e['match'](/horz/i))_0x5072ec*=_0x342baa['isActor']()?-0x1:0x1;if(_0x3f6f0e['match'](/vert/i))_0xf09eff*=_0x342baa[_0x4188da(0xa65)]()?-0x1:0x1;_0x342baa[_0x4188da(0xa3b)](_0x5072ec,_0xf09eff,_0x46eb77,_0x4c868a,_0x5c7e4f),_0x342baa[_0x4188da(0xb5c)](_0x5d4b53);}if(_0x18038d)_0x585d48[_0x4188da(0x4cc)](_0x4188da(0x3c9));}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x919),_0x51c4bf=>{const _0x3c5f22=_0x5d4113;if(!SceneManager[_0x3c5f22(0x2ab)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x51c4bf,_0x51c4bf);const _0x3a6904=$gameTemp[_0x3c5f22(0xc2b)](),_0x22f778=VisuMZ[_0x3c5f22(0x6c4)](_0x51c4bf[_0x3c5f22(0xac6)]),_0x89f94e=_0x51c4bf[_0x3c5f22(0x1fd)],_0x59052b=_0x51c4bf[_0x3c5f22(0x36e)],_0xb5bf02=_0x51c4bf[_0x3c5f22(0x5cb)],_0x45f963=_0x51c4bf[_0x3c5f22(0x191)],_0x1e163c=_0x51c4bf[_0x3c5f22(0x88b)],_0x2b12f9=_0x51c4bf[_0x3c5f22(0x70c)],_0x57c44a=_0x51c4bf['EasingType'],_0x2532f6=_0x51c4bf[_0x3c5f22(0x8df)],_0x582edf=_0x51c4bf[_0x3c5f22(0x222)];if(!_0x3a6904)return;for(const _0x3a92de of _0x22f778){if(!_0x3a92de)continue;let _0x22d235=_0x3a92de[_0x3c5f22(0x3ee)]()['_baseX'],_0x352159=_0x3a92de['battler']()['_baseY'];if(_0x89f94e[_0x3c5f22(0xb51)](/home/i))_0x22d235=_0x3a92de['battler']()['_homeX'],_0x352159=_0x3a92de[_0x3c5f22(0x3ee)]()[_0x3c5f22(0x52f)];else{if(_0x89f94e['match'](/center/i))_0x22d235=Graphics[_0x3c5f22(0xbb8)]/0x2,_0x352159=Graphics[_0x3c5f22(0x75f)]/0x2;else _0x89f94e[_0x3c5f22(0xb51)](/point (\d+), (\d+)/i)&&(_0x22d235=Number(RegExp['$1']),_0x352159=Number(RegExp['$2']));}if(_0x59052b[_0x3c5f22(0xb51)](/none/i))_0x3c5f22(0xab2)===_0x3c5f22(0x49c)?this['_tpbSceneChangeCacheActor']=null:(_0x22d235+=_0xb5bf02,_0x352159+=_0x45f963);else{if(_0x59052b[_0x3c5f22(0xb51)](/horz/i)&&_0x59052b[_0x3c5f22(0xb51)](/vert/i))_0x3c5f22(0x15c)===_0x3c5f22(0x15c)?(_0x22d235+=_0x3a92de[_0x3c5f22(0xa65)]()?-_0xb5bf02:_0xb5bf02,_0x352159+=_0x3a92de[_0x3c5f22(0xa65)]()?-_0x45f963:_0x45f963):this['_canLose']=!![];else{if(_0x59052b[_0x3c5f22(0xb51)](/horz/i)){if('QfMdq'!==_0x3c5f22(0x15b))return _0x2ac605['prototype'][_0x3c5f22(0x764)][_0x3c5f22(0x701)](this);else _0x22d235+=_0x3a92de[_0x3c5f22(0xa65)]()?-_0xb5bf02:_0xb5bf02,_0x352159+=_0x45f963;}else _0x59052b['match'](/vert/i)&&(_0x22d235+=_0xb5bf02,_0x352159+=_0x3a92de[_0x3c5f22(0xa65)]()?-_0x45f963:_0x45f963);}}_0x3a92de[_0x3c5f22(0x44c)](_0x22d235,_0x352159,_0x1e163c,_0x2b12f9,_0x57c44a,-0x1),_0x3a92de[_0x3c5f22(0xb5c)](_0x2532f6);}if(_0x582edf)_0x3a6904[_0x3c5f22(0x4cc)](_0x3c5f22(0x3c9));}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x261),_0x314ecf=>{const _0x31e562=_0x5d4113;if(!SceneManager[_0x31e562(0x2ab)]())return;if(!$gameSystem[_0x31e562(0x9f8)]())return;VisuMZ[_0x31e562(0xb3d)](_0x314ecf,_0x314ecf);const _0x5829fe=$gameTemp[_0x31e562(0xc2b)](),_0x4ea25a=VisuMZ[_0x31e562(0x6c4)](_0x314ecf['Targets1']),_0x32e6c2=VisuMZ['CreateActionSequenceTargets'](_0x314ecf[_0x31e562(0x161)]),_0xc11c84=_0x314ecf[_0x31e562(0x64c)];let _0x2c5c22=_0x314ecf[_0x31e562(0x17f)];const _0x203d97=_0x314ecf[_0x31e562(0x36e)],_0x261fb4=_0x314ecf[_0x31e562(0x5cb)],_0x50b776=_0x314ecf[_0x31e562(0x191)],_0x1a4965=_0x314ecf[_0x31e562(0x88b)],_0xa477e4=_0x314ecf[_0x31e562(0x70c)],_0x4b3a24=_0x314ecf[_0x31e562(0xc70)],_0x12ca6d=_0x314ecf['MotionType'],_0x12e9f4=_0x314ecf[_0x31e562(0x222)],_0x3ac6e7=Math[_0x31e562(0x15d)](..._0x32e6c2[_0x31e562(0x390)](_0x4e3943=>_0x4e3943[_0x31e562(0x3ee)]()['_baseX']-_0x4e3943['battler']()[_0x31e562(0x217)]()/0x2)),_0x1739cd=Math[_0x31e562(0xbcc)](..._0x32e6c2[_0x31e562(0x390)](_0x2f86eb=>_0x2f86eb['battler']()['_baseX']+_0x2f86eb[_0x31e562(0x3ee)]()[_0x31e562(0x217)]()/0x2)),_0x3722f5=Math[_0x31e562(0x15d)](..._0x32e6c2[_0x31e562(0x390)](_0x4f454b=>_0x4f454b[_0x31e562(0x3ee)]()[_0x31e562(0x559)]-_0x4f454b[_0x31e562(0x3ee)]()[_0x31e562(0x8a4)]())),_0x23334f=Math['max'](..._0x32e6c2['map'](_0x78f866=>_0x78f866[_0x31e562(0x3ee)]()['_baseY'])),_0x2231c9=_0x32e6c2[_0x31e562(0x475)](_0x5b8d80=>_0x5b8d80[_0x31e562(0xa65)]())[_0x31e562(0x7da)],_0x4a8b11=_0x32e6c2[_0x31e562(0x475)](_0x303f7a=>_0x303f7a[_0x31e562(0xb88)]())[_0x31e562(0x7da)];let _0xf7fb0c=0x0,_0x499f9e=0x0;if(_0xc11c84[_0x31e562(0xb51)](/front/i))_0xf7fb0c=_0x2231c9>=_0x4a8b11?_0x3ac6e7:_0x1739cd;else{if(_0xc11c84[_0x31e562(0xb51)](/middle/i))_0xf7fb0c=(_0x3ac6e7+_0x1739cd)/0x2,_0x2c5c22=-0x1;else _0xc11c84[_0x31e562(0xb51)](/back/i)&&(_0xf7fb0c=_0x2231c9>=_0x4a8b11?_0x1739cd:_0x3ac6e7);}if(_0xc11c84['match'](/head/i))_0x499f9e=_0x3722f5;else{if(_0xc11c84['match'](/center/i))_0x499f9e=(_0x3722f5+_0x23334f)/0x2;else _0xc11c84[_0x31e562(0xb51)](/base/i)&&(_0x499f9e=_0x23334f);}if(!_0x5829fe)return;for(const _0x5bae16 of _0x4ea25a){if(!_0x5bae16)continue;let _0x24676e=_0xf7fb0c,_0x326f85=_0x499f9e;if(_0x203d97['match'](/none/i))'PGZWF'!=='ripJV'?(_0x24676e+=_0x261fb4,_0x326f85+=_0x50b776):(_0x20c284=_0x105302[_0x31e562(0xbb8)]/0x2,_0x297efa=_0xe1b751[_0x31e562(0x75f)]/0x2);else{if(_0x203d97['match'](/horz/i)&&_0x203d97[_0x31e562(0xb51)](/vert/i))_0x24676e+=_0x5bae16['isActor']()?-_0x261fb4:_0x261fb4,_0x326f85+=_0x5bae16[_0x31e562(0xa65)]()?-_0x50b776:_0x50b776;else{if(_0x203d97['match'](/horz/i))_0x24676e+=_0x5bae16[_0x31e562(0xa65)]()?-_0x261fb4:_0x261fb4,_0x326f85+=_0x50b776;else _0x203d97[_0x31e562(0xb51)](/vert/i)&&(_0x24676e+=_0x261fb4,_0x326f85+=_0x5bae16['isActor']()?-_0x50b776:_0x50b776);}}_0x5bae16[_0x31e562(0x44c)](_0x24676e,_0x326f85,_0x1a4965,_0xa477e4,_0x4b3a24,_0x2c5c22),_0x5bae16['requestMotion'](_0x12ca6d);}if(_0x12e9f4)_0x5829fe[_0x31e562(0x4cc)](_0x31e562(0x3c9));}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x38b),_0x460a61=>{const _0x428aba=_0x5d4113;if(!SceneManager[_0x428aba(0x2ab)]())return;if(!$gameSystem[_0x428aba(0x9f8)]())return;VisuMZ['ConvertParams'](_0x460a61,_0x460a61);const _0x44bb74=VisuMZ['CreateActionSequenceTargets'](_0x460a61[_0x428aba(0xac6)]);let _0x2c1fc6=_0x460a61[_0x428aba(0x741)]['match'](/back/i);for(const _0x3071fb of _0x44bb74){if(!_0x3071fb)continue;if(_0x460a61[_0x428aba(0x741)][_0x428aba(0xb51)](/rand/i))_0x2c1fc6=Math[_0x428aba(0x96f)](0x2);_0x3071fb[_0x428aba(0x7f0)](!!_0x2c1fc6);}}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0x1ca),_0x5a92e8=>{const _0x4e43a0=_0x5d4113;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x4e43a0(0x9f8)]())return;VisuMZ[_0x4e43a0(0xb3d)](_0x5a92e8,_0x5a92e8);const _0x528dcb=VisuMZ['CreateActionSequenceTargets'](_0x5a92e8[_0x4e43a0(0xac6)]);let _0x220916=_0x5a92e8[_0x4e43a0(0xa19)];const _0x356a5d=_0x5a92e8['FaceAway'];for(const _0x2f0bff of _0x528dcb){if(!_0x2f0bff)continue;let _0x241bca=_0x2f0bff[_0x4e43a0(0x3ee)]()[_0x4e43a0(0x8bf)],_0x5e20dc=_0x2f0bff['battler']()[_0x4e43a0(0x559)];if(_0x220916[_0x4e43a0(0xb51)](/home/i)){if(_0x4e43a0(0x95a)==='CVQzs')_0x241bca=_0x2f0bff['battler']()['_homeX'],_0x5e20dc=_0x2f0bff[_0x4e43a0(0x3ee)]()[_0x4e43a0(0x52f)];else{const _0x2269f7=this[_0x4e43a0(0x94f)]['svBattlerData']();this[_0x4e43a0(0x432)]=new _0x2edfef(_0x2269f7[_0x4e43a0(0x61e)],_0x2269f7[_0x4e43a0(0x6ce)]),this['_mainSprite']['bitmap']=new _0x4d5291(0x1,0x1);}}else{if(_0x220916[_0x4e43a0(0xb51)](/center/i))_0x4e43a0(0xc91)===_0x4e43a0(0xc91)?(_0x241bca=Graphics[_0x4e43a0(0xbb8)]/0x2,_0x5e20dc=Graphics[_0x4e43a0(0x75f)]/0x2):_0x31efa9=_0x408738>=_0x4bdafd?_0x117a09:_0x574037;else _0x220916['match'](/point (\d+), (\d+)/i)&&(_0x241bca=Number(RegExp['$1']),_0x5e20dc=Number(RegExp['$2']));}_0x2f0bff[_0x4e43a0(0xa42)](Math[_0x4e43a0(0xb50)](_0x241bca),Math[_0x4e43a0(0xb50)](_0x5e20dc),!!_0x356a5d);}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x313),_0x34cf4e=>{const _0x33565a=_0x5d4113;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x33565a(0xb3d)](_0x34cf4e,_0x34cf4e);const _0x468160=VisuMZ[_0x33565a(0x6c4)](_0x34cf4e[_0x33565a(0x59d)]),_0x4e8535=VisuMZ['CreateActionSequenceTargets'](_0x34cf4e[_0x33565a(0x161)]),_0x163728=_0x4e8535['map'](_0x31bc3a=>_0x31bc3a&&_0x31bc3a[_0x33565a(0x3ee)]()?_0x31bc3a[_0x33565a(0x3ee)]()[_0x33565a(0x8bf)]:0x0)/(_0x4e8535[_0x33565a(0x7da)]||0x1),_0x348b69=_0x4e8535[_0x33565a(0x390)](_0x45dabe=>_0x45dabe&&_0x45dabe[_0x33565a(0x3ee)]()?_0x45dabe[_0x33565a(0x3ee)]()[_0x33565a(0x559)]:0x0)/(_0x4e8535['length']||0x1),_0x47a3c9=_0x34cf4e['FaceAway'];for(const _0x5797a4 of _0x468160){if(_0x33565a(0x472)===_0x33565a(0x472)){if(!_0x5797a4)continue;_0x5797a4[_0x33565a(0xa42)](Math['round'](_0x163728),Math[_0x33565a(0xb50)](_0x348b69),!!_0x47a3c9);}else return _0x19488e[_0x33565a(0x710)]['Settings'][_0x33565a(0x194)]['NameFontSize']||_0x1f462f[_0x33565a(0xa2d)]();}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x3bd),_0xa64515=>{const _0x50b36b=_0x5d4113;if(!SceneManager[_0x50b36b(0x2ab)]())return;VisuMZ[_0x50b36b(0xb3d)](_0xa64515,_0xa64515);const _0x6292e3=$gameTemp[_0x50b36b(0xc2b)](),_0x18cbc0=VisuMZ[_0x50b36b(0x6c4)](_0xa64515['Targets']),_0x58d288=_0xa64515[_0x50b36b(0x8ce)],_0x5ebb4e=_0xa64515[_0x50b36b(0x88b)],_0xb0224d=_0xa64515['EasingType'],_0x3fe3f7=_0xa64515[_0x50b36b(0x14a)];if(!_0x6292e3)return;for(const _0x21b589 of _0x18cbc0){if(!_0x21b589)continue;_0x21b589['floatBattler'](_0x58d288,_0x5ebb4e,_0xb0224d);}if(_0x3fe3f7)_0x6292e3[_0x50b36b(0x4cc)]('battleFloat');}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Movement_HomeReset',_0x27a203=>{const _0x19672d=_0x5d4113;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x19672d(0xb3d)](_0x27a203,_0x27a203);const _0x290cce=$gameTemp[_0x19672d(0xc2b)]();if(!_0x290cce)return;const _0x4c82ff=VisuMZ[_0x19672d(0x6c4)](_0x27a203['Targets']);for(const _0x402d76 of _0x4c82ff){if(!_0x402d76)continue;_0x402d76[_0x19672d(0xaf5)]();}BattleManager['_subject']&&BattleManager[_0x19672d(0x932)][_0x19672d(0x1c1)]();if(_0x27a203[_0x19672d(0x222)])_0x290cce[_0x19672d(0x4cc)](_0x19672d(0x3c9));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xb4c),_0x2ef841=>{const _0x2b671c=_0x5d4113;if(!SceneManager[_0x2b671c(0x2ab)]())return;VisuMZ[_0x2b671c(0xb3d)](_0x2ef841,_0x2ef841);const _0x5a07ff=$gameTemp[_0x2b671c(0xc2b)](),_0x238a61=VisuMZ[_0x2b671c(0x6c4)](_0x2ef841['Targets']),_0x4f835e=_0x2ef841['Height'],_0x3aa2df=_0x2ef841['Duration'],_0x23a38e=_0x2ef841[_0x2b671c(0xacc)];if(!_0x5a07ff)return;for(const _0xff1b99 of _0x238a61){if('ELVEc'===_0x2b671c(0xab1))return!![];else{if(!_0xff1b99)continue;_0xff1b99['jumpBattler'](_0x4f835e,_0x3aa2df);}}if(_0x23a38e)_0x5a07ff[_0x2b671c(0x4cc)]('battleJump');}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0x7f2),_0x2d2b50=>{const _0x534c95=_0x5d4113;if(!SceneManager[_0x534c95(0x2ab)]())return;if(!$gameSystem[_0x534c95(0x9f8)]())return;VisuMZ[_0x534c95(0xb3d)](_0x2d2b50,_0x2d2b50);const _0x4230ae=$gameTemp[_0x534c95(0xc2b)](),_0x22aacb=VisuMZ[_0x534c95(0x6c4)](_0x2d2b50[_0x534c95(0xac6)]),_0x4a9438=_0x2d2b50[_0x534c95(0x464)],_0x2d7368=_0x2d2b50[_0x534c95(0x9a1)],_0xca6288=_0x2d2b50[_0x534c95(0xbb4)],_0x4e3650=_0x2d2b50[_0x534c95(0x88b)],_0x481f9f=_0x2d2b50[_0x534c95(0x70c)],_0x27e2ad=_0x2d2b50[_0x534c95(0xc70)],_0x442164=_0x2d2b50[_0x534c95(0x8df)],_0xb385be=_0x2d2b50[_0x534c95(0x222)];if(!_0x4230ae)return;for(const _0x517fb4 of _0x22aacb){if(!_0x517fb4)continue;let _0x3cf944=_0x2d7368,_0x4067aa=_0xca6288;if(_0x4a9438['match'](/horz/i))_0x3cf944*=_0x517fb4['isActor']()?-0x1:0x1;if(_0x4a9438[_0x534c95(0xb51)](/vert/i))_0x4067aa*=_0x517fb4['isActor']()?-0x1:0x1;_0x517fb4[_0x534c95(0x680)](_0x3cf944,_0x4067aa,_0x4e3650,_0x481f9f,_0x27e2ad),_0x517fb4['requestMotion'](_0x442164);}if(_0xb385be)_0x4230ae[_0x534c95(0x4cc)]('battleMove');}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x862),_0x1955a8=>{const _0x54c200=_0x5d4113;if(!SceneManager[_0x54c200(0x2ab)]())return;if(!$gameSystem[_0x54c200(0x9f8)]())return;VisuMZ[_0x54c200(0xb3d)](_0x1955a8,_0x1955a8);const _0xafc78f=$gameTemp['getLastPluginCommandInterpreter'](),_0x39da41=VisuMZ['CreateActionSequenceTargets'](_0x1955a8['Targets']),_0x2e7b1b=_0x1955a8['Destination'],_0xaabdad=_0x1955a8[_0x54c200(0x36e)],_0x35fdaf=_0x1955a8['OffsetX'],_0x3853dc=_0x1955a8[_0x54c200(0x191)],_0x5aa442=_0x1955a8[_0x54c200(0x88b)],_0x4bc2b2=_0x1955a8[_0x54c200(0x70c)],_0xa69127=_0x1955a8[_0x54c200(0xc70)],_0x255555=_0x1955a8[_0x54c200(0x8df)],_0x122e9b=_0x1955a8['WaitForMovement'];if(!_0xafc78f)return;for(const _0x51e417 of _0x39da41){if(!_0x51e417)continue;let _0x258552=_0x51e417['battler']()[_0x54c200(0x8bf)],_0x4e9a21=_0x51e417['battler']()[_0x54c200(0x559)];if(_0x2e7b1b[_0x54c200(0xb51)](/home/i))_0x54c200(0x3d0)!==_0x54c200(0x9fb)?(_0x258552=_0x51e417['battler']()['_homeX'],_0x4e9a21=_0x51e417[_0x54c200(0x3ee)]()[_0x54c200(0x52f)]):this[_0x54c200(0x3e1)]();else{if(_0x2e7b1b[_0x54c200(0xb51)](/center/i))_0x54c200(0x823)!=='kNtVY'?(_0x258552=Graphics[_0x54c200(0xbb8)]/0x2,_0x4e9a21=Graphics[_0x54c200(0x75f)]/0x2):this[_0x54c200(0x380)]=0x0;else _0x2e7b1b[_0x54c200(0xb51)](/point (\d+), (\d+)/i)&&(_0x54c200(0xbf9)!==_0x54c200(0x209)?(_0x258552=Number(RegExp['$1']),_0x4e9a21=Number(RegExp['$2'])):this[_0x54c200(0x6e9)][_0x54c200(0x432)][_0x54c200(0x87e)]!==this[_0x54c200(0x484)][_0x54c200(0x9be)]()&&(this[_0x54c200(0x6e9)][_0x54c200(0x432)]['smooth']=this[_0x54c200(0x484)][_0x54c200(0x9be)]()));}if(_0xaabdad[_0x54c200(0xb51)](/none/i))_0x258552+=_0x35fdaf,_0x4e9a21+=_0x3853dc;else{if(_0xaabdad[_0x54c200(0xb51)](/horz/i)&&_0xaabdad['match'](/vert/i))_0x258552+=_0x51e417['isActor']()?-_0x35fdaf:_0x35fdaf,_0x4e9a21+=_0x51e417['isActor']()?-_0x3853dc:_0x3853dc;else{if(_0xaabdad[_0x54c200(0xb51)](/horz/i))_0x258552+=_0x51e417[_0x54c200(0xa65)]()?-_0x35fdaf:_0x35fdaf,_0x4e9a21+=_0x3853dc;else{if(_0xaabdad[_0x54c200(0xb51)](/vert/i)){if('SsAOO'===_0x54c200(0x6b9))_0x258552+=_0x35fdaf,_0x4e9a21+=_0x51e417['isActor']()?-_0x3853dc:_0x3853dc;else{if(_0x9a363[_0x1b28c5[_0x54c200(0xb41)]]){const _0x5a932f=_0x46fa59['enemyId'],_0x1fc2c5=_0x26b04f['x'],_0xb5e39=_0x204753['y'],_0x160846=new _0x4d6562(_0x5a932f,_0x1fc2c5,_0xb5e39);_0xcdd352[_0x54c200(0x6f1)]&&_0x160846[_0x54c200(0x712)](),this[_0x54c200(0x9ed)][_0x54c200(0x2ce)](_0x160846);}}}}}}_0x51e417['moveBattlerToPoint'](_0x258552,_0x4e9a21,_0x5aa442,_0x4bc2b2,_0xa69127,-0x1),_0x51e417[_0x54c200(0xb5c)](_0x255555);}if(_0x122e9b)_0xafc78f['setWaitMode'](_0x54c200(0x3c9));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Movement_MoveToTarget',_0x5c4279=>{const _0x25a2bb=_0x5d4113;if(!SceneManager[_0x25a2bb(0x2ab)]())return;if(!$gameSystem[_0x25a2bb(0x9f8)]())return;VisuMZ['ConvertParams'](_0x5c4279,_0x5c4279);const _0x53c0f8=$gameTemp['getLastPluginCommandInterpreter'](),_0x887e50=VisuMZ[_0x25a2bb(0x6c4)](_0x5c4279[_0x25a2bb(0x59d)]),_0xa7ae39=VisuMZ[_0x25a2bb(0x6c4)](_0x5c4279[_0x25a2bb(0x161)]),_0x50adc7=_0x5c4279['TargetLocation'];let _0x4d347e=_0x5c4279[_0x25a2bb(0x17f)];const _0x56e33e=_0x5c4279[_0x25a2bb(0x36e)],_0x4a0010=_0x5c4279[_0x25a2bb(0x5cb)],_0x2df5e6=_0x5c4279[_0x25a2bb(0x191)],_0x1453a5=_0x5c4279[_0x25a2bb(0x88b)],_0x32f461=_0x5c4279['FaceDirection'],_0x10345a=_0x5c4279[_0x25a2bb(0xc70)],_0x1c6ae4=_0x5c4279[_0x25a2bb(0x8df)],_0x3e5118=_0x5c4279['WaitForMovement'],_0x47fc02=Math[_0x25a2bb(0x15d)](..._0xa7ae39['map'](_0x1cae24=>_0x1cae24['battler']()[_0x25a2bb(0x8bf)]-_0x1cae24['battler']()[_0x25a2bb(0x217)]()/0x2)),_0x25d0bb=Math['max'](..._0xa7ae39[_0x25a2bb(0x390)](_0x22daa8=>_0x22daa8[_0x25a2bb(0x3ee)]()['_baseX']+_0x22daa8[_0x25a2bb(0x3ee)]()[_0x25a2bb(0x217)]()/0x2)),_0x3a0104=Math[_0x25a2bb(0x15d)](..._0xa7ae39[_0x25a2bb(0x390)](_0x544e60=>_0x544e60['battler']()[_0x25a2bb(0x559)]-_0x544e60[_0x25a2bb(0x3ee)]()[_0x25a2bb(0x8a4)]())),_0x36588d=Math['max'](..._0xa7ae39['map'](_0x2388ab=>_0x2388ab[_0x25a2bb(0x3ee)]()['_baseY'])),_0x3e0436=_0xa7ae39[_0x25a2bb(0x475)](_0x574f44=>_0x574f44[_0x25a2bb(0xa65)]())[_0x25a2bb(0x7da)],_0x221169=_0xa7ae39['filter'](_0x22b2e3=>_0x22b2e3['isEnemy']())[_0x25a2bb(0x7da)];let _0x3a198e=0x0,_0x44a17c=0x0;if(_0x50adc7[_0x25a2bb(0xb51)](/front/i)){if('JHnab'===_0x25a2bb(0xab7))_0x3a198e=_0x3e0436>=_0x221169?_0x47fc02:_0x25d0bb;else return _0x2f1116[_0x25a2bb(0x567)]?_0x1eba71[_0x25a2bb(0xaa5)][_0x25a2bb(0x326)]['QoL']['DigitGroupingDamageSprites']:![];}else{if(_0x50adc7[_0x25a2bb(0xb51)](/middle/i))'mCZdM'===_0x25a2bb(0xa72)?(_0x44c356[_0x25a2bb(0x710)][_0x25a2bb(0x270)]['call'](this,_0x2a77cc),this['callNextMethod']()):(_0x3a198e=(_0x47fc02+_0x25d0bb)/0x2,_0x4d347e=-0x1);else _0x50adc7['match'](/back/i)&&(_0x3a198e=_0x3e0436>=_0x221169?_0x25d0bb:_0x47fc02);}if(_0x50adc7[_0x25a2bb(0xb51)](/head/i))_0x44a17c=_0x3a0104;else{if(_0x50adc7[_0x25a2bb(0xb51)](/center/i))_0x44a17c=(_0x3a0104+_0x36588d)/0x2;else _0x50adc7[_0x25a2bb(0xb51)](/base/i)&&(_0x25a2bb(0x7d7)!==_0x25a2bb(0x7d7)?(_0x238949[_0x25a2bb(0x710)]['Spriteset_Battle_update'][_0x25a2bb(0x701)](this),this['updateUiContainerPosition'](),this[_0x25a2bb(0x62f)]()):_0x44a17c=_0x36588d);}if(!_0x53c0f8)return;for(const _0x49ee46 of _0x887e50){if(!_0x49ee46)continue;let _0x274c7f=_0x3a198e,_0xa38a2e=_0x44a17c;if(_0x56e33e['match'](/none/i))_0x274c7f+=_0x4a0010,_0xa38a2e+=_0x2df5e6;else{if(_0x56e33e[_0x25a2bb(0xb51)](/horz/i)&&_0x56e33e[_0x25a2bb(0xb51)](/vert/i))_0x25a2bb(0x188)===_0x25a2bb(0x1dc)?(_0x3696fd[_0x25a2bb(0x44d)]['performMagicEvasion'][_0x25a2bb(0x701)](this),this['requestMotion']('evade')):(_0x274c7f+=_0x49ee46['isActor']()?-_0x4a0010:_0x4a0010,_0xa38a2e+=_0x49ee46[_0x25a2bb(0xa65)]()?-_0x2df5e6:_0x2df5e6);else{if(_0x56e33e[_0x25a2bb(0xb51)](/horz/i))_0x274c7f+=_0x49ee46[_0x25a2bb(0xa65)]()?-_0x4a0010:_0x4a0010,_0xa38a2e+=_0x2df5e6;else{if(_0x56e33e[_0x25a2bb(0xb51)](/vert/i)){if(_0x25a2bb(0x2b8)===_0x25a2bb(0x2b8))_0x274c7f+=_0x4a0010,_0xa38a2e+=_0x49ee46[_0x25a2bb(0xa65)]()?-_0x2df5e6:_0x2df5e6;else{let _0x539f58=_0x42bc0f(_0x1c6e6d['$1']);while(_0x539f58--){const _0x79bc8e=_0x140961[_0x25a2bb(0x96f)](0x2)===0x0?this[_0x25a2bb(0x759)]():this[_0x25a2bb(0x7a6)]();_0x332866['push'](_0x79bc8e[_0x25a2bb(0x5be)]());}return this[_0x25a2bb(0x1f0)](_0x2511c9);}}}}}_0x49ee46['moveBattlerToPoint'](_0x274c7f,_0xa38a2e,_0x1453a5,_0x32f461,_0x10345a,_0x4d347e),_0x49ee46['requestMotion'](_0x1c6ae4);}if(_0x3e5118)_0x53c0f8[_0x25a2bb(0x4cc)](_0x25a2bb(0x3c9));}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0x1a2),_0x3966cf=>{const _0x17028f=_0x5d4113;if(!SceneManager[_0x17028f(0x2ab)]())return;VisuMZ[_0x17028f(0xb3d)](_0x3966cf,_0x3966cf);const _0x5302dd=$gameTemp['getLastPluginCommandInterpreter'](),_0x5606a4=VisuMZ[_0x17028f(0x6c4)](_0x3966cf[_0x17028f(0xac6)]),_0x534f1b=_0x3966cf[_0x17028f(0x271)],_0x5b328e=_0x3966cf[_0x17028f(0x88b)],_0x4b33e1=_0x3966cf[_0x17028f(0xc70)],_0xf5d2b3=_0x3966cf[_0x17028f(0xa95)];if(!_0x5302dd)return;for(const _0x37f9b7 of _0x5606a4){if(!_0x37f9b7)continue;_0x37f9b7[_0x17028f(0x830)](_0x534f1b,_0x5b328e,_0x4b33e1);}if(_0xf5d2b3)_0x5302dd[_0x17028f(0x4cc)](_0x17028f(0xb70));}),PluginManager['registerCommand'](pluginData['name'],_0x5d4113(0xc59),_0x323474=>{const _0x5417c7=_0x5d4113;if(!SceneManager[_0x5417c7(0x2ab)]())return;VisuMZ[_0x5417c7(0xb3d)](_0x323474,_0x323474);const _0xdc0164=$gameTemp['getLastPluginCommandInterpreter'](),_0x4a2ec2=VisuMZ[_0x5417c7(0x6c4)](_0x323474[_0x5417c7(0xac6)]),_0x46c0a2=_0x323474[_0x5417c7(0xb8e)],_0x4620cf=_0x323474[_0x5417c7(0xb37)],_0x5e9c64=_0x323474['Duration'],_0x4d852c=_0x323474[_0x5417c7(0xc70)],_0x49ba67=_0x323474[_0x5417c7(0x1a0)];if(!_0xdc0164)return;for(const _0x18e6de of _0x4a2ec2){if(!_0x18e6de)continue;_0x18e6de[_0x5417c7(0x5f4)](_0x46c0a2,_0x4620cf,_0x5e9c64,_0x4d852c);}if(_0x49ba67)_0xdc0164['setWaitMode'](_0x5417c7(0x4c3));}),PluginManager['registerCommand'](pluginData['name'],_0x5d4113(0x585),_0x5147fa=>{const _0x3ba3f3=_0x5d4113;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3ba3f3(0xb3d)](_0x5147fa,_0x5147fa);const _0x10b6a4=$gameTemp[_0x3ba3f3(0xc2b)](),_0xd9ba41=VisuMZ[_0x3ba3f3(0x6c4)](_0x5147fa[_0x3ba3f3(0xac6)]),_0x58a457=_0x5147fa[_0x3ba3f3(0x94a)],_0x16147a=_0x5147fa[_0x3ba3f3(0x174)],_0x5bbf57=_0x5147fa[_0x3ba3f3(0x88b)],_0x3fd80e=_0x5147fa[_0x3ba3f3(0xc70)],_0x4abaff=_0x5147fa[_0x3ba3f3(0x231)];if(!_0x10b6a4)return;for(const _0x1b403d of _0xd9ba41){if(_0x3ba3f3(0x1bc)!==_0x3ba3f3(0x3ed)){if(!_0x1b403d)continue;_0x1b403d[_0x3ba3f3(0x66d)](_0x58a457,_0x16147a,_0x5bbf57,_0x3fd80e);}else this[_0x3ba3f3(0xa02)]=_0x3611ca;}if(_0x4abaff)_0x10b6a4['setWaitMode'](_0x3ba3f3(0x368));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x297),_0x74696f=>{const _0x3230f9=_0x5d4113;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3230f9(0xb3d)](_0x74696f,_0x74696f);const _0x552e93=$gameTemp[_0x3230f9(0xc2b)](),_0xa339d=VisuMZ['CreateActionSequenceTargets'](_0x74696f[_0x3230f9(0xac6)]),_0x5f3fc8=_0x74696f[_0x3230f9(0x844)],_0x1f39b5=_0x74696f[_0x3230f9(0x88b)],_0x3074d1=_0x74696f['EasingType'],_0x5dee50=_0x74696f[_0x3230f9(0x2f8)],_0x1b4616=_0x74696f[_0x3230f9(0x3d9)];if(!_0x552e93)return;for(const _0x51d75f of _0xa339d){if(_0x3230f9(0x5f9)!==_0x3230f9(0xbb5)){if(!_0x51d75f)continue;_0x51d75f['spinBattler'](_0x5f3fc8,_0x1f39b5,_0x3074d1,_0x5dee50);}else this[_0x3230f9(0x8bc)]&&this[_0x3230f9(0x9fd)](this[_0x3230f9(0x8bc)]),this[_0x3230f9(0x594)]&&this['addChildToBack'](this[_0x3230f9(0x594)]);}if(_0x1b4616)_0x552e93['setWaitMode'](_0x3230f9(0x3fd));}),PluginManager['registerCommand'](pluginData['name'],_0x5d4113(0x90b),_0x9fbe=>{const _0x2e1af2=_0x5d4113;if(!SceneManager[_0x2e1af2(0x2ab)]())return;const _0x18fde8=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x18fde8)return;_0x18fde8[_0x2e1af2(0x4cc)](_0x2e1af2(0x858));}),PluginManager['registerCommand'](pluginData['name'],_0x5d4113(0x599),_0x214000=>{const _0x5d4265=_0x5d4113;if(!SceneManager[_0x5d4265(0x2ab)]())return;const _0x5e3fee=$gameTemp[_0x5d4265(0xc2b)]();if(!_0x5e3fee)return;_0x5e3fee['setWaitMode']('battleJump');}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x569),_0x5e24b1=>{const _0x5dbf8f=_0x5d4113;if(!SceneManager[_0x5dbf8f(0x2ab)]())return;const _0x591918=$gameTemp[_0x5dbf8f(0xc2b)]();if(!_0x591918)return;_0x591918[_0x5dbf8f(0x4cc)](_0x5dbf8f(0x3c9));}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xa0e),_0x1bc613=>{const _0x956c38=_0x5d4113;if(!SceneManager[_0x956c38(0x2ab)]())return;const _0x38ba91=$gameTemp[_0x956c38(0xc2b)]();if(!_0x38ba91)return;_0x38ba91['setWaitMode'](_0x956c38(0xb70));}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0xbb2),_0x577a02=>{const _0x534cb4=_0x5d4113;if(!SceneManager[_0x534cb4(0x2ab)]())return;const _0x551edc=$gameTemp[_0x534cb4(0xc2b)]();if(!_0x551edc)return;_0x551edc[_0x534cb4(0x4cc)](_0x534cb4(0x4c3));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Movement_WaitForSkew',_0x4ff04d=>{const _0x46c529=_0x5d4113;if(!SceneManager[_0x46c529(0x2ab)]())return;const _0x2c49be=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2c49be)return;_0x2c49be[_0x46c529(0x4cc)](_0x46c529(0x368));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x924),_0x2dfb64=>{const _0x2f47f7=_0x5d4113;if(!SceneManager[_0x2f47f7(0x2ab)]())return;const _0x47816f=$gameTemp[_0x2f47f7(0xc2b)]();if(!_0x47816f)return;_0x47816f[_0x2f47f7(0x4cc)](_0x2f47f7(0x3fd));}),PluginManager['registerCommand'](pluginData['name'],_0x5d4113(0xb36),_0x1fdb11=>{const _0x2c47ec=_0x5d4113;if(!SceneManager[_0x2c47ec(0x2ab)]())return;if(!Imported[_0x2c47ec(0x7d0)])return;VisuMZ['ConvertParams'](_0x1fdb11,_0x1fdb11);const _0x2898d5=$gameTemp[_0x2c47ec(0xc2b)](),_0xfdecee=_0x1fdb11['WaitForProjectile'];if(!_0x2898d5)return;const _0x45a8f1=BattleManager[_0x2c47ec(0xa9a)];if(!_0x45a8f1)return;_0x45a8f1[_0x2c47ec(0x642)](_0x1fdb11);if(_0xfdecee)_0x2898d5[_0x2c47ec(0x4cc)](_0x2c47ec(0x18d));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Projectile_Icon',_0x71f12f=>{const _0xb588e8=_0x5d4113;if(!SceneManager[_0xb588e8(0x2ab)]())return;if(!Imported[_0xb588e8(0x7d0)])return;VisuMZ[_0xb588e8(0xb3d)](_0x71f12f,_0x71f12f);const _0x34abb2=$gameTemp[_0xb588e8(0xc2b)](),_0x7d36c0=_0x71f12f[_0xb588e8(0x696)];if(!_0x34abb2)return;const _0x3c5cd1=BattleManager[_0xb588e8(0xa9a)];if(!_0x3c5cd1)return;_0x3c5cd1[_0xb588e8(0x642)](_0x71f12f);if(_0x7d36c0)_0x34abb2['setWaitMode']('battleProjectiles');}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0x277),_0x94559b=>{const _0x33b4d6=_0x5d4113;if(!SceneManager[_0x33b4d6(0x2ab)]())return;if(!Imported[_0x33b4d6(0x7d0)])return;VisuMZ[_0x33b4d6(0xb3d)](_0x94559b,_0x94559b);const _0x34d5bb=$gameTemp[_0x33b4d6(0xc2b)](),_0x2b6e7d=_0x94559b[_0x33b4d6(0x696)];if(!_0x34d5bb)return;const _0x44d1a0=BattleManager['_spriteset'];if(!_0x44d1a0)return;_0x44d1a0[_0x33b4d6(0x642)](_0x94559b);if(_0x2b6e7d)_0x34d5bb[_0x33b4d6(0x4cc)](_0x33b4d6(0x18d));}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xaff),_0x358adf=>{const _0x249357=_0x5d4113;if(!SceneManager[_0x249357(0x2ab)]())return;if(!Imported[_0x249357(0xc30)])return;VisuMZ[_0x249357(0xb3d)](_0x358adf,_0x358adf);const _0x3793c0=$gameTemp[_0x249357(0xc2b)](),_0x13e2b0=_0x358adf[_0x249357(0x231)];if(!_0x3793c0)return;$gameScreen[_0x249357(0x753)](_0x358adf['SkewX'],_0x358adf[_0x249357(0x174)],_0x358adf[_0x249357(0x88b)],_0x358adf['EasingType']);if(_0x13e2b0)_0x3793c0['setWaitMode'](_0x249357(0x787));}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],'ActSeq_Skew_Reset',_0x139670=>{const _0xfbad17=_0x5d4113;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xfbad17(0xc30)])return;VisuMZ['ConvertParams'](_0x139670,_0x139670);const _0x426784=$gameTemp[_0xfbad17(0xc2b)](),_0x3c768b=_0x139670[_0xfbad17(0x231)];if(!_0x426784)return;$gameScreen[_0xfbad17(0x753)](0x0,0x0,_0x139670[_0xfbad17(0x88b)],_0x139670[_0xfbad17(0xc70)]);if(_0x3c768b)_0x426784[_0xfbad17(0x4cc)](_0xfbad17(0x787));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],'ActSeq_Skew_WaitForSkew',_0xae0de2=>{const _0x2d1da4=_0x5d4113;if(!SceneManager[_0x2d1da4(0x2ab)]())return;if(!Imported[_0x2d1da4(0xc30)])return;const _0x4838fd=$gameTemp[_0x2d1da4(0xc2b)]();if(!_0x4838fd)return;_0x4838fd[_0x2d1da4(0x4cc)](_0x2d1da4(0x787));}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],'ActSeq_Target_CurrentIndex',_0x2d7b17=>{const _0x188b17=_0x5d4113;if(!SceneManager[_0x188b17(0x2ab)]())return;VisuMZ[_0x188b17(0xb3d)](_0x2d7b17,_0x2d7b17);const _0x4fc968=$gameTemp[_0x188b17(0xc2b)](),_0x32e7ff=_0x2d7b17[_0x188b17(0xa24)],_0x1ee7de=_0x2d7b17[_0x188b17(0x1b3)];if(!_0x4fc968)return;BattleManager['_targetIndex']=_0x32e7ff,BattleManager['_target']=BattleManager['_allTargets']?BattleManager[_0x188b17(0xbba)][BattleManager[_0x188b17(0x276)]]||null:null,BattleManager['_target']&&_0x1ee7de['toUpperCase']()[_0x188b17(0xacb)]()!==_0x188b17(0x5f1)&&_0x4fc968[_0x188b17(0x37d)]([_0x1ee7de]);}),PluginManager[_0x5d4113(0x1c4)](pluginData['name'],_0x5d4113(0x6b4),_0x354583=>{const _0x46f687=_0x5d4113;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x46f687(0xb3d)](_0x354583,_0x354583);const _0x46008c=$gameTemp[_0x46f687(0xc2b)](),_0x5219b8=_0x354583[_0x46f687(0x1b3)];if(!_0x46008c)return;BattleManager[_0x46f687(0x276)]++,BattleManager[_0x46f687(0x3c7)]=BattleManager[_0x46f687(0xbba)][BattleManager[_0x46f687(0x276)]]||null,BattleManager[_0x46f687(0x3c7)]&&_0x5219b8['toUpperCase']()[_0x46f687(0xacb)]()!==_0x46f687(0x5f1)&&_0x46008c[_0x46f687(0x37d)]([_0x5219b8]);}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],'ActSeq_Target_PrevTarget',_0x3c89cd=>{const _0x3aa8c5=_0x5d4113;if(!SceneManager[_0x3aa8c5(0x2ab)]())return;VisuMZ[_0x3aa8c5(0xb3d)](_0x3c89cd,_0x3c89cd);const _0x53c615=$gameTemp[_0x3aa8c5(0xc2b)](),_0x2b6e03=_0x3c89cd[_0x3aa8c5(0x1b3)];if(!_0x53c615)return;BattleManager[_0x3aa8c5(0x276)]--,BattleManager[_0x3aa8c5(0x3c7)]=BattleManager[_0x3aa8c5(0xbba)][BattleManager[_0x3aa8c5(0x276)]]||null,BattleManager[_0x3aa8c5(0x3c7)]&&_0x2b6e03[_0x3aa8c5(0x6d1)]()[_0x3aa8c5(0xacb)]()!=='UNTITLED'&&_0x53c615[_0x3aa8c5(0x37d)]([_0x2b6e03]);}),PluginManager['registerCommand'](pluginData['name'],_0x5d4113(0x293),_0x5d2045=>{const _0x538c21=_0x5d4113;if(!SceneManager[_0x538c21(0x2ab)]())return;VisuMZ[_0x538c21(0xb3d)](_0x5d2045,_0x5d2045);const _0x48e65d=$gameTemp['getLastPluginCommandInterpreter'](),_0x222f25=_0x5d2045['ForceRandom'],_0x4f8fad=_0x5d2045[_0x538c21(0x1b3)];if(!_0x48e65d)return;const _0x225024=BattleManager['_targetIndex'];for(;;){BattleManager[_0x538c21(0x276)]=Math['randomInt'](BattleManager[_0x538c21(0xbba)][_0x538c21(0x7da)]);if(!_0x222f25)break;if(BattleManager[_0x538c21(0x276)]!==_0x225024)break;if(BattleManager[_0x538c21(0xbba)][_0x538c21(0x7da)]<=0x1){if(_0x538c21(0x953)===_0x538c21(0x70d))_0x5d7352-=_0x5cfd1d[_0x538c21(0x8a4)]()/0x2;else{BattleManager[_0x538c21(0x276)]=0x0;break;}}}BattleManager[_0x538c21(0x3c7)]=BattleManager[_0x538c21(0xbba)][BattleManager[_0x538c21(0x276)]]||null,BattleManager[_0x538c21(0x3c7)]&&_0x4f8fad[_0x538c21(0x6d1)]()['trim']()!==_0x538c21(0x5f1)&&('fEfzH'!==_0x538c21(0x92f)?this[_0x538c21(0x5dc)](_0x21d1d0,_0x3d541b,_0x4adfb7):_0x48e65d[_0x538c21(0x37d)]([_0x4f8fad]));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xbe7),_0x3bb952=>{const _0x4fa891=_0x5d4113;if(!SceneManager[_0x4fa891(0x2ab)]())return;VisuMZ[_0x4fa891(0xb3d)](_0x3bb952,_0x3bb952);const _0x4869e0=VisuMZ[_0x4fa891(0x6c4)](_0x3bb952['Targets']);for(const _0x2dc313 of _0x4869e0){if(!_0x2dc313)continue;if(!_0x2dc313['isActor']())continue;_0x2dc313[_0x4fa891(0x89a)]();}}),PluginManager['registerCommand'](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xc3a),_0x926d14=>{const _0xeac87f=_0x5d4113;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xeac87f(0xb3d)](_0x926d14,_0x926d14);const _0x287418=$gameTemp[_0xeac87f(0xc2b)]();let _0x2396d0=![];const _0x50b49b=_0x926d14[_0xeac87f(0x1b3)],_0x5404a4=VisuMZ[_0xeac87f(0x6c4)](_0x926d14[_0xeac87f(0xac6)]);for(const _0x14b9d9 of _0x5404a4){if('SRSmF'===_0xeac87f(0x400)){if(!_0x14b9d9)continue;if(!_0x14b9d9[_0xeac87f(0xa65)]())continue;_0x14b9d9['nextActiveWeaponSlot'](),_0x14b9d9[_0xeac87f(0xa77)]()['length']>0x0?_0x2396d0=!![]:_0x14b9d9[_0xeac87f(0x89a)]();}else!_0x35ff5e[_0xeac87f(0xc0c)]()[_0xeac87f(0x4b0)](this[_0xeac87f(0x22a)])&&(this[_0xeac87f(0x22a)]=null);}_0x2396d0&&_0x50b49b[_0xeac87f(0x6d1)]()[_0xeac87f(0xacb)]()!==_0xeac87f(0x5f1)&&_0x287418[_0xeac87f(0x37d)]([_0x50b49b]);}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Weapon_SetActiveWeapon',_0x28ccf7=>{const _0x4f51c5=_0x5d4113;if(!SceneManager[_0x4f51c5(0x2ab)]())return;VisuMZ['ConvertParams'](_0x28ccf7,_0x28ccf7);let _0xaa45d7=_0x28ccf7['SlotID'];_0xaa45d7--,_0xaa45d7=Math[_0x4f51c5(0xbcc)](_0xaa45d7,0x0);const _0x55099c=VisuMZ[_0x4f51c5(0x6c4)](_0x28ccf7[_0x4f51c5(0xac6)]);for(const _0x35c837 of _0x55099c){if(_0x4f51c5(0x2e1)==='qRasI')return this[_0x4f51c5(0x514)]()[_0x4f51c5(0x3f0)];else{if(!_0x35c837)continue;if(!_0x35c837[_0x4f51c5(0xa65)]())continue;_0x35c837[_0x4f51c5(0x546)](_0xaa45d7);}}}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xc63),_0x433b87=>{const _0x6b7c96=_0x5d4113;if(!SceneManager[_0x6b7c96(0x2ab)]())return;if(!Imported[_0x6b7c96(0xc30)])return;VisuMZ[_0x6b7c96(0xb3d)](_0x433b87,_0x433b87);const _0x913dc8=$gameTemp[_0x6b7c96(0xc2b)](),_0x4629dc=_0x433b87[_0x6b7c96(0xa93)];if(!_0x913dc8)return;$gameScreen[_0x6b7c96(0xa3f)](_0x433b87[_0x6b7c96(0x2d4)],_0x433b87[_0x6b7c96(0x88b)],_0x433b87[_0x6b7c96(0xc70)]);if(_0x4629dc)_0x913dc8[_0x6b7c96(0x4cc)](_0x6b7c96(0x425));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0x4ed),_0x1f3454=>{const _0x4d58f5=_0x5d4113;if(!SceneManager[_0x4d58f5(0x2ab)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x4d58f5(0xb3d)](_0x1f3454,_0x1f3454);const _0x6f9004=$gameTemp[_0x4d58f5(0xc2b)](),_0xfd420e=_0x1f3454[_0x4d58f5(0xa93)];if(!_0x6f9004)return;$gameScreen[_0x4d58f5(0xa3f)](0x1,_0x1f3454[_0x4d58f5(0x88b)],_0x1f3454[_0x4d58f5(0xc70)]);if(_0xfd420e)_0x6f9004[_0x4d58f5(0x4cc)](_0x4d58f5(0x425));}),PluginManager[_0x5d4113(0x1c4)](pluginData[_0x5d4113(0x2c0)],_0x5d4113(0xb2a),_0x588788=>{const _0x4030e4=_0x5d4113;if(!SceneManager[_0x4030e4(0x2ab)]())return;if(!Imported[_0x4030e4(0xc30)])return;const _0x4dd2a3=$gameTemp[_0x4030e4(0xc2b)]();if(!_0x4dd2a3)return;_0x4dd2a3['setWaitMode'](_0x4030e4(0x425));}),VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x40a)]=Scene_Boot[_0x5d4113(0x44d)]['onDatabaseLoaded'],Scene_Boot[_0x5d4113(0x44d)]['onDatabaseLoaded']=function(){const _0x3d3787=_0x5d4113;this['process_VisuMZ_BattleCore_Failsafes'](),this['process_VisuMZ_BattleCore_PluginParams'](),this[_0x3d3787(0x91e)](),this[_0x3d3787(0x422)](),VisuMZ[_0x3d3787(0x710)][_0x3d3787(0x40a)][_0x3d3787(0x701)](this),this['process_VisuMZ_BattleCore_Notetags'](),this[_0x3d3787(0xc4d)](),this[_0x3d3787(0x763)](),this['process_VisuMZ_BattleCore_CommonEventKeys']();},Scene_Boot['prototype'][_0x5d4113(0x43b)]=function(){const _0x524575=_0x5d4113;if(VisuMZ['ParseAllNotetags'])return;this[_0x524575(0x81b)](),this[_0x524575(0x23a)](),this[_0x524575(0x55e)]();},Scene_Boot[_0x5d4113(0x44d)][_0x5d4113(0x3c0)]=function(){const _0xb74b47=_0x5d4113,_0x50dd45=$dataSystem[_0xb74b47(0xc21)][_0xb74b47(0x7da)];for(let _0x95f523=0x0;_0x95f523<_0x50dd45;_0x95f523++){const _0xeb1c5c=$dataSystem[_0xb74b47(0xc27)][_0x95f523];if(_0xeb1c5c)continue;$dataSystem[_0xb74b47(0xc27)][_0x95f523]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot['prototype'][_0x5d4113(0x496)]=function(){const _0x9fefa3=_0x5d4113,_0x5789d0=VisuMZ[_0x9fefa3(0x710)][_0x9fefa3(0x326)];if(_0x5789d0[_0x9fefa3(0x96d)][_0x9fefa3(0x576)]===undefined){if('qmiaS'!==_0x9fefa3(0xaad))_0x5789d0['Damage']['PopupPosition']=_0x9fefa3(0xbc8);else{_0x4236ed[_0x9fefa3(0x710)][_0x9fefa3(0xc7f)][_0x9fefa3(0x701)](this);if(this[_0x9fefa3(0x931)]&&!_0x159938[_0x9fefa3(0x932)])this[_0x9fefa3(0x849)]();}}_0x5789d0[_0x9fefa3(0xc03)][_0x9fefa3(0xaa6)]===undefined&&(_0x5789d0[_0x9fefa3(0xc03)][_0x9fefa3(0xaa6)]=![]);_0x5789d0[_0x9fefa3(0x194)][_0x9fefa3(0xaa6)]===undefined&&(_0x9fefa3(0x73c)==='wqSiz'?_0x328c25[_0x9fefa3(0x155)](_0x9fefa3(0x219)):_0x5789d0[_0x9fefa3(0x194)][_0x9fefa3(0xaa6)]=!![]);_0x5789d0[_0x9fefa3(0xc03)][_0x9fefa3(0x53f)]===undefined&&('dAYWA'!==_0x9fefa3(0x801)?(_0x52fcd0['skew']['x']=(_0x49b137[_0x9fefa3(0x33a)]['x']*(_0x531a1e-0x1)+this[_0x9fefa3(0x590)])/_0x415aec,_0x300783['skew']['y']=(_0x5446f1['skew']['y']*(_0x55a5d6-0x1)+this[_0x9fefa3(0x5e9)])/_0x4dc1fc):_0x5789d0[_0x9fefa3(0xc03)]['PrioritySortActive']=![]);if(_0x5789d0[_0x9fefa3(0xc03)]['PrioritySortActors']===undefined){if('IhGoV'===_0x9fefa3(0x5cf))_0x5789d0['Actor'][_0x9fefa3(0xc16)]=!![];else{let _0x3e1b61=_0x518e8a[_0x9fefa3(0x710)]['Sprite_Battler_damageOffsetX'][_0x9fefa3(0x701)](this),_0x340224=_0x1a4a07[_0x9fefa3(0x710)][_0x9fefa3(0x326)]['Damage'][_0x9fefa3(0xb03)]||0x0;return _0x20fe9[_0x9fefa3(0xb50)](_0x3e1b61+_0x340224);}}},VisuMZ[_0x5d4113(0x6c7)]={},Scene_Boot[_0x5d4113(0x44d)][_0x5d4113(0x91e)]=function(){const _0x323df9=_0x5d4113;for(const _0x3617c1 of VisuMZ[_0x323df9(0x710)]['Settings'][_0x323df9(0x96d)][_0x323df9(0xa98)]){if(!_0x3617c1)continue;const _0x177873=_0x3617c1[_0x323df9(0x26b)][_0x323df9(0x6d1)]()[_0x323df9(0xacb)]();VisuMZ[_0x323df9(0x6c7)][_0x177873]=_0x3617c1;}},VisuMZ['BattleCore'][_0x5d4113(0x283)]={},Scene_Boot[_0x5d4113(0x44d)]['process_VisuMZ_BattleCore_CreateRegExp']=function(){const _0x3b962e=_0x5d4113,_0x1f1bf6=VisuMZ['BattleCore'][_0x3b962e(0x283)],_0x5cd6b3='<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>',_0x4ad7a0=[['Pre','PRE-'],[_0x3b962e(0x51d),_0x3b962e(0x690)]],_0x2f2962=[[_0x3b962e(0x279),_0x3b962e(0x4d0)],[_0x3b962e(0x151),_0x3b962e(0x285)]],_0xac43c1=[['',''],['AsUser',_0x3b962e(0x2a7)],[_0x3b962e(0x2c2),_0x3b962e(0x4d9)]];for(const _0x51256c of _0x2f2962){if('dHbGy'===_0x3b962e(0x3af))for(const _0x1ad05c of _0xac43c1){if('CdbkO'!=='pFdlf')for(const _0xee5db7 of _0x4ad7a0){if(_0x3b962e(0x930)===_0x3b962e(0x200)){if(!this[_0x3b962e(0x493)][_0x3b962e(0x3dd)](_0x3dffc2['id']))return![];}else{const _0x321daa=_0x51256c[0x0]['format'](_0xee5db7[0x0],_0x1ad05c[0x0]),_0x114cda=_0x51256c[0x1][_0x3b962e(0x85d)](_0xee5db7[0x1],_0x1ad05c[0x1])[_0x3b962e(0xacb)](),_0x396991=new RegExp(_0x5cd6b3['format'](_0x114cda),'i');_0x1f1bf6[_0x321daa]=_0x396991;}}else _0x4fc49a*=_0x23f339['stateRate'](_0x23fe8d['dataId']),_0x1a72ca*=this[_0x3b962e(0xbad)](_0x2f6e86);}else return this[_0x3b962e(0x1da)]()[_0x3b962e(0x7f3)](_0x584497=>_0x584497[_0x3b962e(0xa43)]());}const _0x2017a8=[[_0x3b962e(0x503),_0x3b962e(0x8d2)],[_0x3b962e(0x8ec),_0x3b962e(0x988)]];for(const _0x837180 of _0x2017a8){for(const _0x45f0b4 of _0x4ad7a0){const _0x2cfb86=_0x837180[0x0][_0x3b962e(0x85d)](_0x45f0b4[0x0]),_0x4a9d95=_0x837180[0x1][_0x3b962e(0x85d)](_0x45f0b4[0x1]),_0x1b0557=new RegExp(_0x5cd6b3['format'](_0x4a9d95),'i');_0x1f1bf6[_0x2cfb86]=_0x1b0557;}}const _0x39cfd2=[[_0x3b962e(0x720),_0x3b962e(0x3b7)],[_0x3b962e(0x56a),'JS\x20%1END\x20BATTLE'],[_0x3b962e(0xc5c),_0x3b962e(0x580)],[_0x3b962e(0x3df),_0x3b962e(0x845)],['EscapeSuccessJS',_0x3b962e(0x972)],[_0x3b962e(0x1f3),'JS\x20ESCAPE\x20FAILURE'],['%1StartTurnJS',_0x3b962e(0x3b4)],[_0x3b962e(0x818),_0x3b962e(0x1d9)],[_0x3b962e(0x762),'JS\x20%1REGENERATE']];for(const _0x4cfe02 of _0x39cfd2){if('jmFrS'===_0x3b962e(0x785))for(const _0x551651 of _0x4ad7a0){const _0x460b64=_0x4cfe02[0x0][_0x3b962e(0x85d)](_0x551651[0x0]),_0x5aa1d4=_0x4cfe02[0x1][_0x3b962e(0x85d)](_0x551651[0x1]),_0x8006d5=new RegExp(_0x5cd6b3[_0x3b962e(0x85d)](_0x5aa1d4),'i');_0x1f1bf6[_0x460b64]=_0x8006d5;}else{_0x46daad=_0x42b87f||0x1,_0x25ed15--;const _0x197b69=this[_0x3b962e(0xa77)]();return _0x197b69[_0xcd6522]?_0x197b69[_0x2a2c16]['animationId']:0x0;}}},Scene_Boot[_0x5d4113(0x44d)][_0x5d4113(0x81b)]=function(){const _0x52cebb=_0x5d4113,_0x3d95a6=$dataSkills[_0x52cebb(0x545)]($dataItems);for(const _0x502386 of _0x3d95a6){if('sYFOx'===_0x52cebb(0x726)){if(!_0x502386)continue;VisuMZ[_0x52cebb(0x710)][_0x52cebb(0x55a)](_0x502386);}else{const _0x2bd5f3=this['visibilityState']();if(_0x2bd5f3&&this[_0x52cebb(0x380)]<0xff)this[_0x52cebb(0x380)]+=0x10;else!_0x2bd5f3&&this['opacity']>0x0&&(this[_0x52cebb(0x380)]-=0x10);}}},Scene_Boot[_0x5d4113(0x44d)][_0x5d4113(0x23a)]=function(){const _0xc8c020=_0x5d4113,_0x3e397a=$dataActors['concat']($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x305526 of _0x3e397a){if(!_0x305526)continue;VisuMZ['BattleCore'][_0xc8c020(0x3f7)](_0x305526);}},Scene_Boot[_0x5d4113(0x44d)][_0x5d4113(0xc4d)]=function(){const _0x200fdb=_0x5d4113,_0x56e34a=VisuMZ[_0x200fdb(0x710)][_0x200fdb(0x326)]['Mechanics'][_0x200fdb(0x227)],_0x5f3251=[];for(const _0x5eb899 of _0x56e34a){if('cYJqh'==='oXKUJ'){const _0x47b52b=_0x19a02e[_0x200fdb(0xa63)](_0x14e8bf[_0x200fdb(0x61e)]/0x3),_0x136162=this[_0x200fdb(0x78e)]()?(_0x778cad['width']+_0x54a55e[_0x200fdb(0xbb8)])/0x2-_0x47b52b:(_0x3f143f['width']-_0x59b1aa['boxWidth'])/-0x2,_0x57f5cd=this[_0x200fdb(0x1ea)](),_0x42d6c5=_0x57f5cd['y']+_0x57f5cd[_0x200fdb(0x6ce)],_0x56a80d=this['statusWindowRectBorderStyle'](),_0x13b9af=_0x56a80d['y']-_0x42d6c5;return new _0x21d208(_0x136162,_0x42d6c5,_0x47b52b,_0x13b9af);}else{const _0x1a4806=$dataTroops[_0x5eb899];if(_0x1a4806)_0x5f3251[_0x200fdb(0x2ce)](JsonEx['makeDeepCopy'](_0x1a4806));}}for(const _0x109f39 of $dataTroops){if(!_0x109f39)continue;for(const _0x193998 of _0x5f3251){if('aZZwi'===_0x200fdb(0x8ee))return _0x25f90b[_0x200fdb(0x710)][_0x200fdb(0x326)][_0x200fdb(0xb91)][_0x200fdb(0x39f)][_0x200fdb(0x701)](this);else{if(_0x193998['id']===_0x109f39['id'])continue;_0x109f39[_0x200fdb(0xc54)]=_0x109f39[_0x200fdb(0xc54)][_0x200fdb(0x545)](_0x193998[_0x200fdb(0xc54)]);}}}},Scene_Boot[_0x5d4113(0x44d)][_0x5d4113(0x763)]=function(){const _0x6f319=_0x5d4113,_0x5f2b72=VisuMZ[_0x6f319(0x710)][_0x6f319(0x326)][_0x6f319(0x6c3)];if(_0x5f2b72[_0x6f319(0x29b)]>0x0&&$dataCommonEvents[_0x5f2b72[_0x6f319(0x29b)]]){const _0x5067bf=$dataCommonEvents[_0x5f2b72[_0x6f319(0x29b)]],_0x25d252=_0x5067bf[_0x6f319(0x95c)][_0x6f319(0x7da)]-0x2,_0x2abc74=_0x5067bf[_0x6f319(0x95c)][_0x25d252];if(_0x2abc74&&_0x2abc74[_0x6f319(0x7cd)]!==0xe6){const _0x5c96a2={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x6a39b1=_0x5067bf[_0x6f319(0x95c)][_0x6f319(0x2af)]();_0x5067bf[_0x6f319(0x95c)][_0x6f319(0xc1c)](_0x5c96a2),_0x5067bf[_0x6f319(0x95c)][_0x6f319(0xc1c)](_0x6a39b1);}}},Scene_Boot['prototype'][_0x5d4113(0x746)]=function(){const _0x5a3ec1=_0x5d4113;VisuMZ[_0x5a3ec1(0x710)][_0x5a3ec1(0x29d)](),VisuMZ[_0x5a3ec1(0x710)][_0x5a3ec1(0x1a5)]($dataSkills),VisuMZ[_0x5a3ec1(0x710)][_0x5a3ec1(0x1a5)]($dataItems);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x29d)]=function(){const _0x77310a=_0x5d4113;VisuMZ[_0x77310a(0x710)][_0x77310a(0x8d5)]={};for(const _0x16316f of $dataCommonEvents){if('DRoMS'!==_0x77310a(0xc25)){if(!_0x16316f)continue;if(_0x16316f[_0x77310a(0x2c0)]['match'](/\[(.*)\]/i)){if(_0x77310a(0x142)!==_0x77310a(0x142))_0xf63789+=_0x483007['isActor']()?-_0x4bbcf8:_0x13372b,_0x31be78+=_0x5d1165;else{let _0x4c5bdd=String(RegExp['$1'])[_0x77310a(0xc9e)](/,/g,'')[_0x77310a(0x6d1)]()[_0x77310a(0xacb)]();VisuMZ[_0x77310a(0x710)]['_commonEventKey'][_0x4c5bdd]=_0x16316f['id'];}}}else _0x34be6a=_0x48e07b[_0x77310a(0x3ee)]()[_0x77310a(0x64f)],_0x1581ba=_0x454742[_0x77310a(0x3ee)]()['_homeY'];}},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x1a5)]=function(_0x180df9){const _0x280832=_0x5d4113;for(const _0x3f929c of _0x180df9){if(_0x280832(0x80d)!==_0x280832(0x80d))return!![];else{if(!_0x3f929c)continue;VisuMZ['BattleCore']['BindCommonEventKeysForObj'](_0x3f929c);}}},VisuMZ['BattleCore'][_0x5d4113(0x535)]=function(_0x5ba74f){const _0xeb54cc=_0x5d4113;if(!_0x5ba74f)return;if(!_0x5ba74f[_0xeb54cc(0x21c)])return;VisuMZ['BattleCore'][_0xeb54cc(0x8d5)]=VisuMZ['BattleCore'][_0xeb54cc(0x8d5)]||{};const _0x47057d=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0xd0d9cb=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x2f06d0=[];const _0x168d03=_0x5ba74f[_0xeb54cc(0x80a)][_0xeb54cc(0xb51)](_0x47057d);if(_0x168d03){if('IGehb'!==_0xeb54cc(0xad6)){for(const _0x302f7e of _0x168d03){_0x302f7e[_0xeb54cc(0xb51)](_0x47057d);const _0x489a07=String(RegExp['$1'])[_0xeb54cc(0x3d8)](',')[_0xeb54cc(0x390)](_0x4fc2f2=>String(_0x4fc2f2)[_0xeb54cc(0x6d1)]()['trim']());_0x2f06d0=_0x2f06d0['concat'](_0x489a07);}!_0x5ba74f[_0xeb54cc(0x80a)][_0xeb54cc(0xb51)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x5ba74f[_0xeb54cc(0x80a)]+=_0xeb54cc(0x8a0));;}else this[_0xeb54cc(0xb6c)]['push'](_0x3fbb8a),this[_0xeb54cc(0x602)](),this[_0xeb54cc(0xa6b)]();}if(_0x5ba74f['note'][_0xeb54cc(0xb51)](_0xd0d9cb)){if(_0xeb54cc(0x7af)===_0xeb54cc(0x4f2))this[_0xeb54cc(0x58d)](_0x41ae81);else{const _0x3fff5a=String(RegExp['$1'])[_0xeb54cc(0x3d8)](/[\r\n]+/)[_0xeb54cc(0x390)](_0x214bf6=>String(_0x214bf6)[_0xeb54cc(0x6d1)]()['trim']());_0x2f06d0=_0x2f06d0[_0xeb54cc(0x545)](_0x3fff5a);!_0x5ba74f[_0xeb54cc(0x80a)][_0xeb54cc(0xb51)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x5ba74f[_0xeb54cc(0x80a)]+=_0xeb54cc(0x8a0));;}}for(const _0x507a35 of _0x2f06d0){if(VisuMZ['BattleCore'][_0xeb54cc(0x8d5)][_0x507a35]){if(_0xeb54cc(0x2c6)!==_0xeb54cc(0x35e)){const _0x59f83c=VisuMZ[_0xeb54cc(0x710)][_0xeb54cc(0x8d5)][_0x507a35],_0x282aee={'code':0x2c,'dataId':_0x59f83c,'value1':0x1,'value2':0x0};_0x5ba74f[_0xeb54cc(0x21c)][_0xeb54cc(0x2ce)](_0x282aee);}else return this[_0xeb54cc(0xbb3)];}}},Scene_Boot[_0x5d4113(0x44d)][_0x5d4113(0x55e)]=function(){const _0x50679a=_0x5d4113,_0x28aed2=$dataSkills['concat']($dataItems);for(const _0x69cec1 of _0x28aed2){if('fxWJv'!==_0x50679a(0x218)){if(!_0x69cec1)continue;VisuMZ[_0x50679a(0x710)][_0x50679a(0xc5b)](_0x69cec1);}else _0x3cdc1c[_0x50679a(0x710)]['Scene_Battle_startActorCommandSelection'][_0x50679a(0x701)](this),_0x7f5335['isTpb']()&&_0x1bd616['_tpbNeedsPartyCommand']&&(_0x4f33df['_tpbNeedsPartyCommand']=![],this[_0x50679a(0x7e6)]());}},VisuMZ['BattleCore']['ParseActorNotetags']=VisuMZ[_0x5d4113(0x631)],VisuMZ[_0x5d4113(0x631)]=function(_0x2fbb67){const _0x314563=_0x5d4113;VisuMZ[_0x314563(0x710)]['ParseActorNotetags']&&('EqqQE'!==_0x314563(0xa64)?_0x560f2d[_0x314563(0x546)](_0x156163):VisuMZ[_0x314563(0x710)][_0x314563(0x631)][_0x314563(0x701)](this,_0x2fbb67)),VisuMZ[_0x314563(0x710)][_0x314563(0x3f7)](_0x2fbb67);},VisuMZ['BattleCore'][_0x5d4113(0x48f)]=VisuMZ[_0x5d4113(0x48f)],VisuMZ['ParseClassNotetags']=function(_0x11072b){const _0x505207=_0x5d4113;VisuMZ[_0x505207(0x710)][_0x505207(0x48f)]&&(_0x505207(0x96a)==='JpsMY'?VisuMZ[_0x505207(0x710)][_0x505207(0x48f)][_0x505207(0x701)](this,_0x11072b):this['addChildToBack'](this[_0x505207(0x594)])),VisuMZ['BattleCore'][_0x505207(0x3f7)](_0x11072b);},VisuMZ[_0x5d4113(0x710)]['ParseSkillNotetags']=VisuMZ[_0x5d4113(0x8a1)],VisuMZ[_0x5d4113(0x8a1)]=function(_0x1a0333){const _0x467c22=_0x5d4113;VisuMZ[_0x467c22(0x710)][_0x467c22(0x8a1)]&&VisuMZ[_0x467c22(0x710)][_0x467c22(0x8a1)]['call'](this,_0x1a0333),VisuMZ['BattleCore'][_0x467c22(0x55a)](_0x1a0333),VisuMZ['BattleCore']['Parse_Notetags_Targets'](_0x1a0333);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x367)]=VisuMZ[_0x5d4113(0x367)],VisuMZ[_0x5d4113(0x367)]=function(_0x2e9061){const _0x34c3c8=_0x5d4113;VisuMZ[_0x34c3c8(0x710)]['ParseItemNotetags']&&VisuMZ[_0x34c3c8(0x710)][_0x34c3c8(0x367)][_0x34c3c8(0x701)](this,_0x2e9061),VisuMZ[_0x34c3c8(0x710)][_0x34c3c8(0x55a)](_0x2e9061),VisuMZ[_0x34c3c8(0x710)][_0x34c3c8(0xc5b)](_0x2e9061);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x92c)]=VisuMZ['ParseWeaponNotetags'],VisuMZ[_0x5d4113(0x92c)]=function(_0x4d7857){const _0x31f32d=_0x5d4113;VisuMZ[_0x31f32d(0x710)][_0x31f32d(0x92c)]&&VisuMZ[_0x31f32d(0x710)]['ParseWeaponNotetags'][_0x31f32d(0x701)](this,_0x4d7857),VisuMZ[_0x31f32d(0x710)][_0x31f32d(0x3f7)](_0x4d7857);},VisuMZ['BattleCore'][_0x5d4113(0x751)]=VisuMZ[_0x5d4113(0x751)],VisuMZ[_0x5d4113(0x751)]=function(_0x17c33f){const _0x437014=_0x5d4113;VisuMZ['BattleCore'][_0x437014(0x751)]&&VisuMZ[_0x437014(0x710)][_0x437014(0x751)]['call'](this,_0x17c33f),VisuMZ[_0x437014(0x710)]['Parse_Notetags_TraitObjects'](_0x17c33f);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xa96)]=VisuMZ[_0x5d4113(0xa96)],VisuMZ[_0x5d4113(0xa96)]=function(_0x3620fa){const _0x3de506=_0x5d4113;VisuMZ['BattleCore'][_0x3de506(0xa96)]&&VisuMZ[_0x3de506(0x710)][_0x3de506(0xa96)][_0x3de506(0x701)](this,_0x3620fa),VisuMZ[_0x3de506(0x710)][_0x3de506(0x3f7)](_0x3620fa);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x5d7)]=VisuMZ['ParseStateNotetags'],VisuMZ[_0x5d4113(0x5d7)]=function(_0x34dac6){const _0x12750a=_0x5d4113;VisuMZ[_0x12750a(0x710)][_0x12750a(0x5d7)]&&VisuMZ['BattleCore'][_0x12750a(0x5d7)][_0x12750a(0x701)](this,_0x34dac6),VisuMZ['BattleCore'][_0x12750a(0x3f7)](_0x34dac6);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x55a)]=function(_0x4755ec){const _0x444099=_0x5d4113,_0x8c9479=['PreApplyJS','PostApplyJS','PreDamageJS',_0x444099(0x7c1),_0x444099(0x219),_0x444099(0x469),_0x444099(0x4ea),_0x444099(0xc98)];for(const _0x187746 of _0x8c9479){VisuMZ[_0x444099(0x710)][_0x444099(0x4ef)](_0x4755ec,_0x187746);}const _0x581fc0=_0x4755ec[_0x444099(0x80a)];_0x581fc0[_0x444099(0xb51)](/<ALWAYS CRITICAL/i)&&(_0x444099(0x9b7)!==_0x444099(0x547)?_0x4755ec[_0x444099(0x769)]['critical']=!![]:this[_0x444099(0x4b4)]()),_0x581fc0[_0x444099(0xb51)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x4755ec[_0x444099(0x6f7)]=Math[_0x444099(0xbcc)](0x1,Number(RegExp['$1']))),_0x581fc0[_0x444099(0xb51)](/<TARGET:[ ](.*)>/i)&&(_0x444099(0x791)!==_0x444099(0x548)?_0x4755ec['scope']=String(RegExp['$1'])[_0x444099(0x6d1)]()['trim']():_0x3cb730=_0x2427bd(_0x3c8fba['$1']));},VisuMZ[_0x5d4113(0x710)]['Parse_Notetags_TraitObjects']=function(_0x56c9a6){const _0x10317e=_0x5d4113,_0x3ca2d0=[_0x10317e(0x4cb),'PostApplyAsUserJS',_0x10317e(0x354),_0x10317e(0x32f),_0x10317e(0x88a),'PostApplyAsTargetJS','PreDamageAsTargetJS','PostDamageAsTargetJS',_0x10317e(0x219),_0x10317e(0x469),_0x10317e(0x4ea),'PostEndActionJS',_0x10317e(0xc5e),_0x10317e(0x586),_0x10317e(0xb48),'PostEndBattleJS',_0x10317e(0xc5c),_0x10317e(0x3df),'EscapeSuccessJS','EscapeFailureJS','PreStartTurnJS',_0x10317e(0x2cc),_0x10317e(0x7dd),'PostEndTurnJS',_0x10317e(0x5db),_0x10317e(0x3d4)];for(const _0x129575 of _0x3ca2d0){if(_0x10317e(0xa83)===_0x10317e(0xa83))VisuMZ[_0x10317e(0x710)][_0x10317e(0x4ef)](_0x56c9a6,_0x129575);else{this[_0x10317e(0x2ce)](_0x10317e(0x937),_0x564c28,_0x45ccfa);if(!_0xfac845[_0x10317e(0x710)][_0x10317e(0x326)][_0x10317e(0xb91)][_0x10317e(0x1ec)])return;const _0x2784c8=_0x4efc88['name'](),_0x144d78=_0x13e745['substitute']['format'](_0x2784c8,_0x23408b[_0x10317e(0x2c0)]());this[_0x10317e(0x2ce)]('addText',_0x144d78);}}},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xc5b)]=function(_0x384335){const _0x4c2d0f=_0x5d4113,_0xb2a2bb=_0x384335[_0x4c2d0f(0x80a)];if(_0xb2a2bb[_0x4c2d0f(0xb51)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x21afc7=String(RegExp['$1']),_0x53d7a7=VisuMZ['BattleCore'][_0x4c2d0f(0x978)](_0x384335,_0x4c2d0f(0xac6));VisuMZ['BattleCore'][_0x4c2d0f(0x2f1)](_0x21afc7,_0x53d7a7);}if(_0xb2a2bb[_0x4c2d0f(0xb51)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x4e110b=String(RegExp['$1']),_0x4080ab=VisuMZ[_0x4c2d0f(0x710)]['createKeyJS'](_0x384335,_0x4c2d0f(0x24d));VisuMZ[_0x4c2d0f(0x710)][_0x4c2d0f(0x4bc)](_0x4e110b,_0x4080ab);}},VisuMZ[_0x5d4113(0x710)]['JS']={},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x4ef)]=function(_0x16f2a8,_0x56606e){const _0x41d07c=_0x5d4113,_0x540a2f=_0x16f2a8[_0x41d07c(0x80a)];if(_0x540a2f['match'](VisuMZ['BattleCore']['RegExp'][_0x56606e])){const _0xa921f6=RegExp['$1'],_0x3b4357=_0x41d07c(0x721)['format'](_0xa921f6),_0xc8b3e=VisuMZ[_0x41d07c(0x710)]['createKeyJS'](_0x16f2a8,_0x56606e);VisuMZ[_0x41d07c(0x710)]['JS'][_0xc8b3e]=new Function(_0x3b4357);}},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x978)]=function(_0xeeabfa,_0x35b991){const _0xc51f44=_0x5d4113;if(VisuMZ[_0xc51f44(0x978)])return VisuMZ[_0xc51f44(0x978)](_0xeeabfa,_0x35b991);let _0x42fb1f='';if($dataActors['includes'](_0xeeabfa))_0x42fb1f=_0xc51f44(0xbf3)[_0xc51f44(0x85d)](_0xeeabfa['id'],_0x35b991);if($dataClasses['includes'](_0xeeabfa))_0x42fb1f=_0xc51f44(0x2d0)['format'](_0xeeabfa['id'],_0x35b991);if($dataSkills[_0xc51f44(0x4b0)](_0xeeabfa))_0x42fb1f=_0xc51f44(0x88c)[_0xc51f44(0x85d)](_0xeeabfa['id'],_0x35b991);if($dataItems['includes'](_0xeeabfa))_0x42fb1f='Item-%1-%2'[_0xc51f44(0x85d)](_0xeeabfa['id'],_0x35b991);if($dataWeapons[_0xc51f44(0x4b0)](_0xeeabfa))_0x42fb1f='Weapon-%1-%2'[_0xc51f44(0x85d)](_0xeeabfa['id'],_0x35b991);if($dataArmors['includes'](_0xeeabfa))_0x42fb1f=_0xc51f44(0x904)['format'](_0xeeabfa['id'],_0x35b991);if($dataEnemies['includes'](_0xeeabfa))_0x42fb1f='Enemy-%1-%2'[_0xc51f44(0x85d)](_0xeeabfa['id'],_0x35b991);if($dataStates['includes'](_0xeeabfa))_0x42fb1f=_0xc51f44(0x4ba)['format'](_0xeeabfa['id'],_0x35b991);return _0x42fb1f;},VisuMZ['BattleCore'][_0x5d4113(0x2f1)]=function(_0x51f940,_0x37569b){const _0x44ea28=_0x5d4113,_0x2e0aac='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0x44ea28(0x85d)](_0x51f940);VisuMZ['BattleCore']['JS'][_0x37569b]=new Function(_0x2e0aac);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x4bc)]=function(_0x168870,_0x505c89){const _0x213a28=_0x5d4113,_0xf439b8=_0x213a28(0x533)[_0x213a28(0x85d)](_0x168870);VisuMZ['BattleCore']['JS'][_0x505c89]=new Function(_0xf439b8);},TextManager[_0x5d4113(0x8b3)]=VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x326)][_0x5d4113(0x9c4)][_0x5d4113(0xc26)],TextManager['autoBattleStart']=VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x326)]['AutoBattle']['StartName'],TextManager[_0x5d4113(0x39d)]=VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x326)][_0x5d4113(0x9e5)][_0x5d4113(0x497)],TextManager['visualHpGauge']=VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x326)]['HpGauge']['Name'],ColorManager[_0x5d4113(0x913)]=function(_0x576ca2){const _0x1e562f=_0x5d4113;_0x576ca2=String(_0x576ca2);if(_0x576ca2[_0x1e562f(0xb51)](/#(.*)/i))return'#%1'[_0x1e562f(0x85d)](String(RegExp['$1']));else{if('WiQZw'!==_0x1e562f(0xbfb))return this[_0x1e562f(0x776)](Number(_0x576ca2));else{let _0x4c9efc=_0x1504d3[_0x1e562f(0x710)][_0x1e562f(0x8b1)][_0x1e562f(0x701)](this);return this[_0x1e562f(0x3ad)]&&(_0x4c9efc*=this[_0x1e562f(0x3ad)]()),_0x20ec2e[_0x1e562f(0x6aa)](_0x4c9efc);}}},DataManager['getDamageStyle']=function(_0x414854){const _0x3d5952=_0x5d4113;if(_0x414854[_0x3d5952(0x80a)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x51e586=String(RegExp['$1'])[_0x3d5952(0x6d1)]()[_0x3d5952(0xacb)]();if(_0x51e586==='MANUAL')return _0x3d5952(0x438);if(VisuMZ['DamageStyles'][_0x51e586])return _0x51e586;}const _0x260bd5=VisuMZ[_0x3d5952(0x710)][_0x3d5952(0x326)][_0x3d5952(0x96d)][_0x3d5952(0xafa)][_0x3d5952(0x6d1)]()[_0x3d5952(0xacb)]();if(VisuMZ[_0x3d5952(0x6c7)][_0x260bd5])return _0x260bd5;return _0x3d5952(0x438);},DataManager[_0x5d4113(0x54e)]=function(_0x3e3f87){const _0x420c97=_0x5d4113;_0x3e3f87=_0x3e3f87[_0x420c97(0x6d1)]()[_0x420c97(0xacb)](),this[_0x420c97(0x81d)]=this[_0x420c97(0x81d)]||{};if(this['_stypeIDs'][_0x3e3f87])return this[_0x420c97(0x81d)][_0x3e3f87];for(let _0x55c6f9=0x1;_0x55c6f9<0x64;_0x55c6f9++){if(!$dataSystem[_0x420c97(0x32a)][_0x55c6f9])continue;let _0x515b69=$dataSystem['skillTypes'][_0x55c6f9][_0x420c97(0x6d1)]()[_0x420c97(0xacb)]();_0x515b69=_0x515b69[_0x420c97(0xc9e)](/\x1I\[(\d+)\]/gi,''),_0x515b69=_0x515b69['replace'](/\\I\[(\d+)\]/gi,''),this[_0x420c97(0x81d)][_0x515b69]=_0x55c6f9;}return this[_0x420c97(0x81d)][_0x3e3f87]||0x0;},DataManager['getSkillIdWithName']=function(_0x2de0e1){const _0x13c291=_0x5d4113;_0x2de0e1=_0x2de0e1[_0x13c291(0x6d1)]()['trim'](),this[_0x13c291(0xc0f)]=this[_0x13c291(0xc0f)]||{};if(this[_0x13c291(0xc0f)][_0x2de0e1])return this[_0x13c291(0xc0f)][_0x2de0e1];for(const _0x289663 of $dataSkills){if(!_0x289663)continue;this['_skillIDs'][_0x289663[_0x13c291(0x2c0)][_0x13c291(0x6d1)]()[_0x13c291(0xacb)]()]=_0x289663['id'];}return this[_0x13c291(0xc0f)][_0x2de0e1]||0x0;},DataManager['getEnemyIdWithName']=function(_0x228adb){const _0x48ebd0=_0x5d4113;_0x228adb=_0x228adb[_0x48ebd0(0x6d1)]()[_0x48ebd0(0xacb)](),this[_0x48ebd0(0x89f)]=this[_0x48ebd0(0x89f)]||{};if(this['_enemyIDs'][_0x228adb])return this['_enemyIDs'][_0x228adb];for(const _0x2bfbc4 of $dataEnemies){if(!_0x2bfbc4)continue;this['_enemyIDs'][_0x2bfbc4[_0x48ebd0(0x2c0)][_0x48ebd0(0x6d1)]()['trim']()]=_0x2bfbc4['id'];}return this[_0x48ebd0(0x89f)][_0x228adb]||0x0;},DataManager['getWtypeIdWithName']=function(_0x337c17){const _0x1665ef=_0x5d4113;_0x337c17=_0x337c17[_0x1665ef(0x6d1)]()[_0x1665ef(0xacb)](),this[_0x1665ef(0x3ab)]=this[_0x1665ef(0x3ab)]||{};if(this[_0x1665ef(0x3ab)][_0x337c17])return this[_0x1665ef(0x3ab)][_0x337c17];for(let _0x14ac85=0x1;_0x14ac85<0x64;_0x14ac85++){if(!$dataSystem[_0x1665ef(0xc21)][_0x14ac85])continue;let _0x44106a=$dataSystem[_0x1665ef(0xc21)][_0x14ac85][_0x1665ef(0x6d1)]()[_0x1665ef(0xacb)]();_0x44106a=_0x44106a[_0x1665ef(0xc9e)](/\x1I\[(\d+)\]/gi,''),_0x44106a=_0x44106a['replace'](/\\I\[(\d+)\]/gi,''),this[_0x1665ef(0x3ab)][_0x44106a]=_0x14ac85;}return this[_0x1665ef(0x3ab)][_0x1665ef(0x41f)]=0x0,this['_wtypeIDs'][_0x337c17]||0x0;},DataManager[_0x5d4113(0xc9c)]=function(_0x112659){const _0x1f21ff=_0x5d4113,_0x341d2e=_0x1f21ff(0x4a8);let _0x3c3149=_0x112659[_0x1f21ff(0xa4c)],_0x18412f=_0x112659['name'];const _0x53f784=_0x112659[_0x1f21ff(0x80a)];return _0x53f784['match'](/<DISPLAY ICON: (\d+)>/i)&&(_0x3c3149=Number(RegExp['$1'])),_0x53f784[_0x1f21ff(0xb51)](/<DISPLAY TEXT: (.*)>/i)&&(_0x18412f=String(RegExp['$1'])),_0x341d2e[_0x1f21ff(0x85d)](_0x3c3149,_0x18412f);},DataManager[_0x5d4113(0xa75)]=function(_0x407b5d){const _0x3aba3b=_0x5d4113;return _0x407b5d['note'][_0x3aba3b(0xb51)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):'pNsfy'!=='hPABq'?_0x407b5d['name']:this[_0x3aba3b(0xa8d)]();},DataManager['battleCommandIcon']=function(_0x39e4d6){const _0x375500=_0x5d4113;if(_0x39e4d6['note'][_0x375500(0xb51)](/<COMMAND ICON: (\d+)>/i)){if(_0x375500(0x821)!==_0x375500(0x821))_0xe81a16[_0x375500(0x44d)]['_updateClientArea'][_0x375500(0x701)](this),this['_updateCursorArea']();else return Number(RegExp['$1']);}else{if(_0x375500(0x525)!==_0x375500(0x7ff))return _0x39e4d6['iconIndex'];else this[_0x375500(0x8a9)]=_0x266bb[_0x375500(0x1c3)]>=0x0?0x2:0x3,this[_0x375500(0x260)](_0x5e0be2[_0x375500(0x1c3)]);}},DataManager[_0x5d4113(0x2cd)]=function(_0x941c1e){const _0x3cf76a=_0x5d4113,_0x5ec725=$dataEnemies[_0x941c1e];if(_0x5ec725){if(_0x5ec725[_0x3cf76a(0x80a)][_0x3cf76a(0xb51)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x31c389=String(RegExp['$1'])[_0x3cf76a(0x3d8)](/[\r\n]+/)[_0x3cf76a(0x828)](''),_0x2f4259=this[_0x3cf76a(0x1dd)](_0x31c389);_0x941c1e=this[_0x3cf76a(0x284)](_0x2f4259)||_0x941c1e,_0x941c1e=DataManager[_0x3cf76a(0x2cd)](_0x941c1e);}}return _0x941c1e;},DataManager['processRandomizedData']=function(_0x322ea9){const _0x1129d6=_0x5d4113;let _0x23dd5d=0x0;const _0x2e7c90={};for(const _0x69f5fd of _0x322ea9){if(_0x1129d6(0x61b)==='Trgaz'){if(_0x69f5fd[_0x1129d6(0xb51)](/(.*):[ ](\d+)/i)){const _0x3c95f1=String(RegExp['$1'])['trim'](),_0xcb6a6e=Number(RegExp['$2']);_0x2e7c90[_0x3c95f1]=_0xcb6a6e,_0x23dd5d+=_0xcb6a6e;}else{if(_0x69f5fd[_0x1129d6(0xb51)](/(.*):[ ](\d+\.?\d+)/i)){const _0xf07f27=String(RegExp['$1'])['trim'](),_0x35f011=Number(RegExp['$2']);_0x2e7c90[_0xf07f27]=_0x35f011,_0x23dd5d+=_0x35f011;}else _0x69f5fd!==''&&(_0x2e7c90[_0x69f5fd]=0x1,_0x23dd5d++);}}else{if(this[_0x1129d6(0x8ab)]===_0x4b26e7&&!_0x416b56[_0x1129d6(0x73e)]())return;}}if(_0x23dd5d<=0x0)return'';let _0x4000a0=Math[_0x1129d6(0x22c)]()*_0x23dd5d;for(const _0xb540cc in _0x2e7c90){_0x4000a0-=_0x2e7c90[_0xb540cc];if(_0x4000a0<=0x0)return _0xb540cc;}return'';},DataManager[_0x5d4113(0x322)]=function(_0x2b4df1){const _0x2c9cd6=_0x5d4113;if(!_0x2b4df1)return![];if(!VisuMZ[_0x2c9cd6(0x710)]['Settings'][_0x2c9cd6(0x998)]['AutoNotetag'])return![];if(_0x2b4df1[_0x2c9cd6(0x80a)][_0x2c9cd6(0xb51)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x2b4df1['note'][_0x2c9cd6(0xb51)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x78c7b0 of _0x2b4df1[_0x2c9cd6(0x21c)]){if(!_0x78c7b0)continue;if(_0x78c7b0[_0x2c9cd6(0x7cd)]===Game_Action['EFFECT_COMMON_EVENT'])return!![];}return![];},DataManager[_0x5d4113(0xa2e)]=function(_0x33f109){const _0x2a3fa6=_0x5d4113,_0x2f4b95=$dataTroops[_0x33f109];if(!_0x2f4b95)return'';let _0x27f472='';_0x27f472+=_0x2f4b95[_0x2a3fa6(0x2c0)];for(const _0x19e845 of _0x2f4b95[_0x2a3fa6(0xc54)]){if(_0x2a3fa6(0x805)==='okcBj')_0xdaefa3[_0x2a3fa6(0xada)]?this[_0x2a3fa6(0x970)]():_0x2a560c[_0x2a3fa6(0x710)]['Scene_Map_launchBattle']['call'](this);else for(const _0x2f497b of _0x19e845['list']){_0x2a3fa6(0x7e0)==='PGVdy'?[0x6c,0x198][_0x2a3fa6(0x4b0)](_0x2f497b['code'])&&(_0x27f472+='\x0a',_0x27f472+=_0x2f497b[_0x2a3fa6(0x4d7)][0x0]):_0x3f227f[_0x2a3fa6(0x155)](_0x2a3fa6(0x4ea));}}return _0x27f472;},ConfigManager[_0x5d4113(0x23b)]=ConfigManager[_0x5d4113(0x23b)]??![],ConfigManager[_0x5d4113(0x53e)]=ConfigManager[_0x5d4113(0x53e)]??![],ConfigManager[_0x5d4113(0x2e2)]=ConfigManager[_0x5d4113(0x2e2)]??!![],VisuMZ[_0x5d4113(0x710)]['ConfigManager_makeData']=ConfigManager['makeData'],ConfigManager[_0x5d4113(0x965)]=function(){const _0x592af3=_0x5d4113,_0x6e8887=VisuMZ[_0x592af3(0x710)][_0x592af3(0x794)][_0x592af3(0x701)](this);return _0x6e8887[_0x592af3(0x23b)]=this['autoBattleAtStart'],_0x6e8887[_0x592af3(0x53e)]=this[_0x592af3(0x53e)],_0x6e8887[_0x592af3(0x2e2)]=this[_0x592af3(0x2e2)],_0x6e8887;},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x482)]=ConfigManager[_0x5d4113(0x3a9)],ConfigManager[_0x5d4113(0x3a9)]=function(_0x37f72d){const _0x2a697b=_0x5d4113;VisuMZ[_0x2a697b(0x710)][_0x2a697b(0x482)][_0x2a697b(0x701)](this,_0x37f72d);if(_0x2a697b(0x23b)in _0x37f72d){if(_0x2a697b(0x19a)==='MUpsV')return _0x35570d[_0x2a697b(0x710)]['Settings'][_0x2a697b(0x9c4)][_0x2a697b(0x8d0)];else this[_0x2a697b(0x23b)]=_0x37f72d[_0x2a697b(0x23b)];}else this[_0x2a697b(0x23b)]=![];if(_0x2a697b(0x53e)in _0x37f72d){if(_0x2a697b(0x3a5)!=='spkCE'){this[_0x2a697b(0x2e4)][_0x2a697b(0x39c)]=_0x117fa8[_0x2a697b(0x745)]();const _0x46bfb9=_0x3046c8[_0x2a697b(0x80b)](),_0x275369=_0x46bfb9?_0x46bfb9[_0x2a697b(0x8d3)]()||'':'';if(_0x46bfb9===this[_0x2a697b(0x2e4)][_0x2a697b(0x80b)]&&_0x275369===this[_0x2a697b(0x2e4)]['lastFilename'])return;this[_0x2a697b(0x2e4)][_0x2a697b(0x80b)]=_0x46bfb9||this[_0x2a697b(0x2e4)][_0x2a697b(0x80b)],this[_0x2a697b(0x2e4)][_0x2a697b(0xa10)]=_0x275369;if(!_0x46bfb9)return;else{if(_0x275369===''){this['_borderPortraitSprite']['bitmap']=_0x5e9cf2[_0x2a697b(0x57d)],this[_0x2a697b(0x2e4)][_0x2a697b(0xa10)]='';return;}else{const _0x55bb7e=_0x4204e5[_0x2a697b(0xc49)](_0x275369);this[_0x2a697b(0x2e4)][_0x2a697b(0x380)]=0x0,_0x55bb7e[_0x2a697b(0x897)](this[_0x2a697b(0x74a)][_0x2a697b(0xa11)](this,_0x55bb7e));}}}else this['autoBattleUseSkills']=_0x37f72d[_0x2a697b(0x53e)];}else{if('rRFfV'===_0x2a697b(0xa06))return![];else this[_0x2a697b(0x53e)]=![];}_0x2a697b(0x2e2)in _0x37f72d?this['visualHpGauge']=_0x37f72d[_0x2a697b(0x2e2)]:this[_0x2a697b(0x2e2)]=!![];},ImageManager[_0x5d4113(0x3ff)]=ImageManager[_0x5d4113(0x3ff)]||0x9,ImageManager[_0x5d4113(0xc60)]=ImageManager['svActorVertCells']||0x6,VisuMZ['BattleCore'][_0x5d4113(0x318)]=BattleManager['initMembers'],BattleManager[_0x5d4113(0x22f)]=function(){const _0x358d8a=_0x5d4113;VisuMZ[_0x358d8a(0x710)][_0x358d8a(0x318)][_0x358d8a(0x701)](this),this[_0x358d8a(0xa66)]=[];},BattleManager[_0x5d4113(0x5ce)]=function(){const _0x2c8565=_0x5d4113;if(!SceneManager['isSceneBattle']())return;const _0x2f1609=SceneManager[_0x2c8565(0x5a4)][_0x2c8565(0x480)];if(_0x2f1609)_0x2f1609[_0x2c8565(0x255)]();},BattleManager['battleSys']=function(){const _0x510c6b=_0x5d4113;if(BattleManager[_0x510c6b(0x5fd)]())return _0x510c6b(0x307);return _0x510c6b(0x2b9);},BattleManager['isBattleSys']=function(_0x48a69a){const _0x15b1e9=_0x5d4113;return _0x48a69a=_0x48a69a['toUpperCase']()[_0x15b1e9(0xacb)](),this[_0x15b1e9(0xc75)]()===_0x48a69a;},BattleManager[_0x5d4113(0xb22)]=function(){const _0x323a5d=_0x5d4113;return this[_0x323a5d(0x5b5)](_0x323a5d(0x2b9));},BattleManager[_0x5d4113(0x767)]=function(){const _0x2dcd93=_0x5d4113;return this[_0x2dcd93(0xb22)]();},BattleManager[_0x5d4113(0xace)]=function(){const _0x26b45d=_0x5d4113;return!this[_0x26b45d(0x767)]();},BattleManager['isTeamBased']=function(){const _0x161249=_0x5d4113;return!this[_0x161249(0x767)]()&&!this[_0x161249(0xace)]();},BattleManager[_0x5d4113(0x890)]=function(_0x364144){const _0x484d85=_0x5d4113;_0x364144==='BattleVictoryJS'&&(_0x484d85(0x25f)===_0x484d85(0x409)?_0xdbf5f3=_0x5cbcb7:this[_0x484d85(0x561)]=!![]),$gameParty[_0x484d85(0x890)](_0x364144),$gameTroop[_0x484d85(0x890)](_0x364144);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x5c5)]=BattleManager['startBattle'],BattleManager[_0x5d4113(0x534)]=function(){const _0x72b99a=_0x5d4113;this[_0x72b99a(0x914)]=![],this['_autoBattle']=ConfigManager[_0x72b99a(0x23b)],this['_endingBattle']=![],this['processBattleCoreJS']('PreStartBattleJS'),VisuMZ['BattleCore'][_0x72b99a(0x5c5)][_0x72b99a(0x701)](this),this[_0x72b99a(0x890)]('PostStartBattleJS');},BattleManager[_0x5d4113(0x637)]=function(_0x568ad6){const _0x43aeb1=_0x5d4113,_0x372d29=VisuMZ[_0x43aeb1(0x710)][_0x43aeb1(0x326)][_0x43aeb1(0x6c3)];_0x568ad6!==_0x43aeb1(0x911)&&_0x372d29['BattleEndEvent']&&VisuMZ[_0x43aeb1(0x710)][_0x43aeb1(0x88d)](_0x372d29[_0x43aeb1(0xa00)])&&$gameTemp['reserveCommonEvent'](_0x372d29[_0x43aeb1(0xa00)]);const _0x5cebe0=_0x43aeb1(0x4a1)[_0x43aeb1(0x85d)](_0x568ad6);_0x372d29[_0x5cebe0]&&VisuMZ[_0x43aeb1(0x710)][_0x43aeb1(0x88d)](_0x372d29[_0x5cebe0])&&(_0x43aeb1(0x7fe)===_0x43aeb1(0x6b3)?(this[_0x43aeb1(0x1cf)][_0x43aeb1(0x507)][_0x43aeb1(0x596)]['x']=-0x1/(this['scale']['x']||0.001),this[_0x43aeb1(0x1cf)][_0x43aeb1(0x507)]['scale']['y']=0x1/(this['scale']['y']||0.001)):$gameTemp[_0x43aeb1(0x813)](_0x372d29[_0x5cebe0]));},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x81c)]=BattleManager[_0x5d4113(0x203)],BattleManager['checkBattleEnd']=function(){const _0x14814b=_0x5d4113;if(this[_0x14814b(0x2f4)]==='turn'){if($gameTemp['isCommonEventReserved']())return![];}return VisuMZ[_0x14814b(0x710)][_0x14814b(0x81c)][_0x14814b(0x701)](this);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xb65)]=BattleManager['processVictory'],BattleManager['processVictory']=function(){const _0x4fa925=_0x5d4113;this['_endingBattle']=!![],this[_0x4fa925(0x890)]('BattleVictoryJS'),VisuMZ[_0x4fa925(0x710)]['BattleManager_processVictory'][_0x4fa925(0x701)](this),this['processPostBattleCommonEvents'](_0x4fa925(0x224));},VisuMZ['BattleCore'][_0x5d4113(0x7b0)]=BattleManager[_0x5d4113(0x640)],BattleManager['processAbort']=function(){const _0x1bd2c0=_0x5d4113;this[_0x1bd2c0(0x561)]=!![],VisuMZ[_0x1bd2c0(0x710)]['BattleManager_processAbort'][_0x1bd2c0(0x701)](this);},VisuMZ['BattleCore']['BattleManager_processDefeat']=BattleManager['processDefeat'],BattleManager[_0x5d4113(0x568)]=function(){const _0x44186f=_0x5d4113;this[_0x44186f(0x561)]=!![],this[_0x44186f(0x890)](_0x44186f(0x3df)),VisuMZ[_0x44186f(0x710)]['BattleManager_processDefeat'][_0x44186f(0x701)](this),this[_0x44186f(0x637)](_0x44186f(0x4f4));},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x1a8)]=BattleManager[_0x5d4113(0x335)],BattleManager[_0x5d4113(0x335)]=function(_0x5ed263){const _0x391267=_0x5d4113;this[_0x391267(0x914)]=!![],this[_0x391267(0xab3)]=![],this[_0x391267(0x890)]('PreEndBattleJS'),VisuMZ[_0x391267(0x710)]['BattleManager_endBattle'][_0x391267(0x701)](this,_0x5ed263),this['processBattleCoreJS'](_0x391267(0xc32));},VisuMZ['BattleCore']['BattleManager_startTurn']=BattleManager[_0x5d4113(0x766)],BattleManager[_0x5d4113(0x766)]=function(){const _0xc06c60=_0x5d4113;if(this[_0xc06c60(0x767)]())this[_0xc06c60(0x890)](_0xc06c60(0x7cb));VisuMZ[_0xc06c60(0x710)]['BattleManager_startTurn']['call'](this);if(this['isTurnBased']())this[_0xc06c60(0x890)](_0xc06c60(0x2cc));},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xafb)]=BattleManager[_0x5d4113(0x48b)],BattleManager[_0x5d4113(0x48b)]=function(){const _0x4dc2de=_0x5d4113,_0x2ce40f=this[_0x4dc2de(0x932)][_0x4dc2de(0x2de)](),_0x7fd164=this[_0x4dc2de(0x932)];if(_0x2ce40f&&_0x2ce40f[_0x4dc2de(0x652)]()===_0x7fd164){if(_0x4dc2de(0xb90)===_0x4dc2de(0xc93)){if(_0x2b5629[_0x4dc2de(0x710)]['Settings'][_0x4dc2de(0x998)][_0x4dc2de(0xb4e)]){const _0x4adda9=_0x41a7bd[_0x4dc2de(0x441)]();this[_0x4dc2de(0x2ce)](_0x4dc2de(0xa0d),_0x5e27ff,[_0x345d0d],_0x4adda9[_0x4dc2de(0xbed)]);}}else _0x2ce40f['actionBattleCoreJS']('PreStartActionJS');}VisuMZ['BattleCore'][_0x4dc2de(0xafb)][_0x4dc2de(0x701)](this),_0x2ce40f&&_0x2ce40f[_0x4dc2de(0x652)]()===_0x7fd164&&_0x2ce40f[_0x4dc2de(0x155)](_0x4dc2de(0x469));},VisuMZ['BattleCore'][_0x5d4113(0x68b)]=BattleManager[_0x5d4113(0x2e5)],BattleManager[_0x5d4113(0x2e5)]=function(){const _0x4c711b=_0x5d4113,_0x1ae0ce=this[_0x4c711b(0x1bb)],_0x3f643d=this[_0x4c711b(0x932)];if(_0x1ae0ce&&_0x1ae0ce!==this['_lastAction']&&_0x1ae0ce[_0x4c711b(0x652)]()===_0x3f643d){if(_0x4c711b(0x365)!=='jRMXp')_0x1ae0ce['actionBattleCoreJS'](_0x4c711b(0x4ea));else return _0x444a15[_0x4c711b(0xaa5)]['Settings'][_0x4c711b(0xc86)]['DigitGroupingDamageSprites'];}if(this[_0x4c711b(0x932)])_0x4c711b(0x651)!==_0x4c711b(0x75e)?VisuMZ[_0x4c711b(0x710)]['BattleManager_endAction'][_0x4c711b(0x701)](this):_0x2ddd0d+=_0x43af11(_0x2d8882['$1']);else{if(_0x4c711b(0x90d)===_0x4c711b(0x90d))this[_0x4c711b(0x2f4)]=_0x4c711b(0x32e);else{if(!_0x53c2ef[_0x4c711b(0x6b7)](_0x9d96c1))return!![];}}_0x1ae0ce&&_0x1ae0ce!==this['_lastAction']&&_0x1ae0ce[_0x4c711b(0x652)]()===_0x3f643d&&_0x1ae0ce['actionBattleCoreJS']('PostEndActionJS'),this[_0x4c711b(0x74b)](this['allBattleMembers']()),this[_0x4c711b(0x1d0)]=this[_0x4c711b(0x1bb)];},BattleManager['refreshBattlerMotions']=function(_0x54d08c){const _0x537692=_0x5d4113;for(const _0x89da3d of _0x54d08c){if(!_0x89da3d)continue;if(!_0x89da3d[_0x537692(0x3ee)]())continue;_0x89da3d[_0x537692(0x3ee)]()[_0x537692(0x221)]();}},BattleManager[_0x5d4113(0x8fb)]=function(){const _0x11bba6=_0x5d4113;!this['_logWindow'][_0x11bba6(0x835)]()&&this[_0x11bba6(0x2e5)]();},Game_Battler['prototype'][_0x5d4113(0xbf1)]=function(){const _0x2f6b57=_0x5d4113;this['clearResult']();if(Imported['VisuMZ_1_SkillsStatesCore']){const _0x3fcfd6=VisuMZ[_0x2f6b57(0x601)][_0x2f6b57(0x326)][_0x2f6b57(0x2e9)];_0x3fcfd6&&_0x3fcfd6[_0x2f6b57(0x7d9)]===![]&&this[_0x2f6b57(0xbca)](0x1);}else this[_0x2f6b57(0xbca)](0x1);this['removeBuffsAuto']();},BattleManager[_0x5d4113(0xc3b)]=function(){const _0x5947fc=_0x5d4113;this['_escapeRatio']=VisuMZ['BattleCore'][_0x5947fc(0x326)][_0x5947fc(0x6c3)][_0x5947fc(0x251)][_0x5947fc(0x701)](this);},VisuMZ['BattleCore'][_0x5d4113(0x233)]=BattleManager[_0x5d4113(0xbe2)],BattleManager[_0x5d4113(0xbe2)]=function(){const _0x4af229=_0x5d4113;this[_0x4af229(0x890)](_0x4af229(0x9b3)),BattleManager[_0x4af229(0xa9a)][_0x4af229(0x6f6)](),VisuMZ[_0x4af229(0x710)][_0x4af229(0x233)][_0x4af229(0x701)](this),this['processPostBattleCommonEvents'](_0x4af229(0x278));},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x4c2)]=BattleManager[_0x5d4113(0x4b8)],BattleManager['onEscapeFailure']=function(){const _0x4022de=_0x5d4113;this['processBattleCoreJS'](_0x4022de(0x1f3));const _0x64d77a=this[_0x4022de(0x506)];VisuMZ['BattleCore']['BattleManager_onEscapeFailure']['call'](this),this[_0x4022de(0x506)]=_0x64d77a+VisuMZ[_0x4022de(0x710)][_0x4022de(0x326)][_0x4022de(0x6c3)][_0x4022de(0xc35)][_0x4022de(0x701)](this),this['processPostBattleCommonEvents'](_0x4022de(0x911));},BattleManager[_0x5d4113(0xaee)]=function(){const _0x473062=_0x5d4113;let _0x2e93b0=![];if(this[_0x473062(0xc4b)]()){if(_0x473062(0xaf9)==='xzWFs'){if(!_0xf8e78e[_0x473062(0x2ab)]())return;const _0x2600eb=_0x1bc79e[_0x473062(0xc2b)]();if(!_0x2600eb)return;_0x2600eb['setWaitMode']('battleSpriteSkew');}else for(const _0xb4a10d of $gameTroop[_0x473062(0x826)]()){_0x473062(0x343)==='yUZyL'?this[_0x473062(0x2ce)](_0x473062(0x93e),this['makeHpDamageText'](_0x3f2013)):(this[_0x473062(0x7c2)][_0x473062(0x2ce)](_0x473062(0x93e),TextManager[_0x473062(0xb31)]['format'](_0xb4a10d)),this['_logWindow']['push'](_0x473062(0x64b)),_0x2e93b0=!![]);}}if(this[_0x473062(0x28a)])this['_logWindow'][_0x473062(0x2ce)](_0x473062(0x93e),TextManager[_0x473062(0x163)][_0x473062(0x85d)]($gameParty['name']())),this[_0x473062(0x7c2)]['push'](_0x473062(0x64b));else this[_0x473062(0x2c8)]&&('FJGDD'==='Skpmp'?_0x1e64a9[_0x473062(0x37d)]([_0x65c17c]):(this['_logWindow'][_0x473062(0x2ce)](_0x473062(0x93e),TextManager[_0x473062(0x705)][_0x473062(0x85d)]($gameParty[_0x473062(0x2c0)]())),this[_0x473062(0x7c2)][_0x473062(0x2ce)](_0x473062(0x64b))));if(_0x2e93b0){if(_0x473062(0x3ba)!==_0x473062(0x145))this[_0x473062(0x7c2)]['push'](_0x473062(0x64b)),this[_0x473062(0x7c2)][_0x473062(0x2ce)](_0x473062(0x192));else{if(this['constructor']===_0x397c58)return;this[_0x473062(0x6d5)](),this[_0x473062(0xa59)]();}}this[_0x473062(0x5fd)]()&&this[_0x473062(0x477)]()&&(this[_0x473062(0x5dd)]=![]);},BattleManager[_0x5d4113(0xc4b)]=function(){const _0x4bfffc=_0x5d4113;if(BattleManager[_0x4bfffc(0xab3)])return![];return VisuMZ[_0x4bfffc(0x710)][_0x4bfffc(0x326)][_0x4bfffc(0x194)]['EmergeText'];},VisuMZ['BattleCore']['BattleManager_startInput']=BattleManager[_0x5d4113(0x21a)],BattleManager[_0x5d4113(0x21a)]=function(){const _0x6a8bc6=_0x5d4113;VisuMZ[_0x6a8bc6(0x710)][_0x6a8bc6(0x397)]['call'](this);if(this['isDTB']()&&this[_0x6a8bc6(0x477)]()&&!this[_0x6a8bc6(0x2c8)]&&$gameParty[_0x6a8bc6(0x607)]()){if(_0x6a8bc6(0x55c)!==_0x6a8bc6(0x55c))return _0x19d02b[_0x6a8bc6(0x710)][_0x6a8bc6(0x60c)][_0x6a8bc6(0x701)](this);else this[_0x6a8bc6(0x3c3)]();}},BattleManager[_0x5d4113(0x477)]=function(){const _0x501d6a=_0x5d4113;return VisuMZ[_0x501d6a(0x710)][_0x501d6a(0x326)][_0x501d6a(0x9c4)]['SkipPartyCmd'];},BattleManager[_0x5d4113(0x3c5)]=function(){const _0x3183d0=_0x5d4113;this[_0x3183d0(0xb07)]()&&this[_0x3183d0(0x3c3)]();},VisuMZ[_0x5d4113(0x710)]['Scene_Battle_startActorCommandSelection']=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x77a)],Scene_Battle[_0x5d4113(0x44d)]['startActorCommandSelection']=function(){const _0x3914e5=_0x5d4113;VisuMZ['BattleCore'][_0x3914e5(0x9b9)][_0x3914e5(0x701)](this),BattleManager[_0x3914e5(0x5fd)]()&&BattleManager[_0x3914e5(0x5dd)]&&(BattleManager['_tpbNeedsPartyCommand']=![],this['actorCommandCancelTPB']());},BattleManager[_0x5d4113(0x5d4)]=function(_0x50561c,_0x1bd1da){const _0x54c00b=_0x5d4113;this[_0x54c00b(0x1bb)][_0x54c00b(0x46f)]=_0x1bd1da,this[_0x54c00b(0x7c2)][_0x54c00b(0x2fe)](_0x1bd1da),this[_0x54c00b(0x7c2)][_0x54c00b(0x620)](_0x50561c,this[_0x54c00b(0x1bb)]),this[_0x54c00b(0x1bb)]['apply'](_0x50561c),this['_logWindow'][_0x54c00b(0x374)](_0x50561c,_0x50561c);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x1d3)]=BattleManager['makeActionOrders'],BattleManager['makeActionOrders']=function(){const _0x12a1e8=_0x5d4113;VisuMZ['BattleCore']['BattleManager_makeActionOrders'][_0x12a1e8(0x701)](this),this[_0x12a1e8(0x6e8)]=this[_0x12a1e8(0x6e8)][_0x12a1e8(0x475)](_0x12a220=>_0x12a220&&_0x12a220[_0x12a1e8(0x461)]());},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x9d6)]=BattleManager[_0x5d4113(0x447)],BattleManager[_0x5d4113(0x447)]=function(_0x215909){const _0x64901=_0x5d4113;if(this['_phase']==='custom')this[_0x64901(0x934)]();else this[_0x64901(0x2f4)]===_0x64901(0x4c8)?this[_0x64901(0x4b4)]():_0x64901(0xbe5)!=='gMWCj'?VisuMZ['BattleCore']['BattleManager_updatePhase']['call'](this,_0x215909):this[_0x64901(0x8ca)](_0x265544,_0x1b8f50['x']+_0x4f29a3[_0x64901(0x61e)]-_0x2a1534,_0x286bda['y'],_0x596d22);},BattleManager['prepareCustomActionSequence']=function(){const _0x5e1683=_0x5d4113;this[_0x5e1683(0xbba)]=this[_0x5e1683(0x23e)][_0x5e1683(0x481)](0x0),this[_0x5e1683(0x276)]=0x0,this['_target']=this['_allTargets'][0x0]||null,this[_0x5e1683(0x2f4)]=_0x5e1683(0x855);},BattleManager['updateCustomActionSequence']=function(){const _0x541448=_0x5d4113;if(!this['updateEventMain']()&&!this[_0x541448(0x7c2)][_0x541448(0x835)]()){if('nbGAo'!=='nbGAo')return this[_0x541448(0x64e)]();else this['_phase']=_0x541448(0x57c);}},BattleManager[_0x5d4113(0x4c8)]=function(_0x4a7f58){const _0x2d5fa9=_0x5d4113;this[_0x2d5fa9(0x6e8)][_0x2d5fa9(0x828)](_0x4a7f58);if(_0x4a7f58===this[_0x2d5fa9(0x932)])return;const _0x413d21=JsonEx['makeDeepCopy'](_0x4a7f58['currentAction']());this['_forcedBattlers'][_0x2d5fa9(0x2ce)]([_0x4a7f58,_0x413d21]);},BattleManager[_0x5d4113(0x964)]=function(){},BattleManager[_0x5d4113(0x23c)]=function(){const _0x2c6826=_0x5d4113;if(this[_0x2c6826(0x5fd)]())_0x2c6826(0x977)!==_0x2c6826(0x976)?this[_0x2c6826(0x2f4)]=_0x2c6826(0x32e):(this[_0x2c6826(0x143)][_0x2c6826(0xbbf)](),this[_0x2c6826(0x143)][_0x2c6826(0x61d)]&&this[_0x2c6826(0x143)][_0x2c6826(0xb89)](),this[_0x2c6826(0x48e)]['open'](),this['_itemWindow'][_0x2c6826(0x61d)]&&this[_0x2c6826(0x48e)][_0x2c6826(0xb89)]());else this[_0x2c6826(0xa66)][_0x2c6826(0x7da)]>0x0?_0x2c6826(0x36d)===_0x2c6826(0x36d)?this['_phase']=_0x2c6826(0x32e):(_0x230295['BattleCore'][_0x2c6826(0x416)][_0x2c6826(0x701)](this),this[_0x2c6826(0x185)](),this['addShowHpGaugeCommand']()):'hUMKy'===_0x2c6826(0x99b)?this[_0x2c6826(0x21a)]():this[_0x2c6826(0x21a)]();},BattleManager[_0x5d4113(0x743)]=function(){const _0x2181cd=_0x5d4113,_0x1d0be6=this[_0x2181cd(0x932)];if(_0x1d0be6&&this[_0x2181cd(0x5fd)]()){if(_0x2181cd(0x27c)===_0x2181cd(0x9b1)){if(!this[_0x2181cd(0x5c1)]())return;if(!this['_distortionSprite'])return;if(this[_0x2181cd(0x37a)]===_0x108e21&&this['_targetGrowY']===_0x67905d)return;this['_targetGrowX']=_0x4c763b,this[_0x2181cd(0xc14)]=_0x37ee90,this[_0x2181cd(0xa8f)]=_0x55b007,this[_0x2181cd(0x28d)]=_0x5d3576,this[_0x2181cd(0xaae)]=_0x1ec17d||_0x2181cd(0x1ab),_0x57f7a0<=0x0&&(this['_growX']=this[_0x2181cd(0x37a)],this[_0x2181cd(0xa9c)]=this[_0x2181cd(0xc14)]);}else _0x1d0be6[_0x2181cd(0x7ee)](_0x2181cd(0x58b));}for(;;){const _0x5a0dff=this[_0x2181cd(0x3dc)]();if(!_0x5a0dff){if(_0x2181cd(0x466)===_0x2181cd(0x50d))for(const _0x4668d2 of _0x229b78){const _0x4fdba6=_0x11cf6b[0x0]['format'](_0x4668d2[0x0]),_0x3ef9a2=_0x4c7788[0x1][_0x2181cd(0x85d)](_0x4668d2[0x1]),_0x3018c5=new _0x1583ef(_0x400a75['format'](_0x3ef9a2),'i');_0x3f2491[_0x4fdba6]=_0x3018c5;}else return null;}if(_0x5a0dff[_0x2181cd(0xb5a)]()&&_0x5a0dff[_0x2181cd(0x6ab)]())return _0x5a0dff;}},BattleManager[_0x5d4113(0x3dc)]=function(){const _0x5a8325=_0x5d4113;if(this[_0x5a8325(0xa66)][_0x5a8325(0x7da)]>0x0){const _0x40748c=this[_0x5a8325(0xa66)][_0x5a8325(0x2bc)](),_0x2fcbe1=_0x40748c[0x0];return _0x2fcbe1[_0x5a8325(0x427)]=_0x2fcbe1['_actions']||[],_0x2fcbe1['_actions'][0x0]=_0x40748c[0x1],_0x2fcbe1;}else{if(_0x5a8325(0xa44)==='UPbDJ'){const _0x45100e=_0x375980(_0x333454['$1']);this[_0x5a8325(0x668)](_0x45100e);}else return this['_actionBattlers'][_0x5a8325(0x2bc)]();}},VisuMZ[_0x5d4113(0x710)]['Game_Battler_forceAction']=Game_Battler['prototype'][_0x5d4113(0x4c8)],Game_Battler[_0x5d4113(0x44d)]['forceAction']=function(_0x1e1aac,_0x3a1055){const _0x544f54=_0x5d4113;VisuMZ['BattleCore'][_0x544f54(0x6bb)][_0x544f54(0x701)](this,_0x1e1aac,_0x3a1055),this['_actions'][this[_0x544f54(0x427)][_0x544f54(0x7da)]-0x1][_0x544f54(0x7ab)]=!![];},Game_Interpreter['prototype'][_0x5d4113(0x8ba)]=function(_0x4eff42){const _0x58a2c1=_0x5d4113;return this[_0x58a2c1(0x413)](_0x4eff42[0x0],_0x4eff42[0x1],_0x1afd43=>{const _0x2e7a2a=_0x58a2c1;if(!_0x1afd43[_0x2e7a2a(0x816)]()){if(_0x2e7a2a(0x7bc)===_0x2e7a2a(0x876)){if(!this['canMove']())return;if(!this[_0x2e7a2a(0x148)])return;if(this['_targetSkewX']===_0x238dfb&&this['_targetSkewY']===_0x50c1da)return;this['_targetSkewX']=_0x461aaf,this['_targetSkewY']=_0x597295,this[_0x2e7a2a(0x98c)]=_0xbefecb,this['_skewWholeDuration']=_0x4a5a7a,this[_0x2e7a2a(0xc73)]=_0x4d1aeb||_0x2e7a2a(0x1ab),_0x4c3e0c<=0x0&&(this[_0x2e7a2a(0x148)][_0x2e7a2a(0x33a)]['x']=this['_targetSkewX'],this[_0x2e7a2a(0x148)][_0x2e7a2a(0x33a)]['y']=this['_targetSkewY']);}else _0x1afd43[_0x2e7a2a(0x4c8)](_0x4eff42[0x2],_0x4eff42[0x3]),BattleManager[_0x2e7a2a(0x4c8)](_0x1afd43);}}),!![];},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x9a0)]=Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x900)],Game_Battler['prototype'][_0x5d4113(0x900)]=function(){const _0x13d7c2=_0x5d4113;VisuMZ['BattleCore']['Game_Battler_makeSpeed'][_0x13d7c2(0x701)](this);if(this['_actions'][_0x13d7c2(0x7da)]<=0x0){if('WFzYW'===_0x13d7c2(0x250)){const _0x5ed206=_0x9ecc69[_0x13d7c2(0x4ac)](_0x27ef7c);_0x5ed206[_0x13d7c2(0x897)](this[_0x13d7c2(0x28e)]['bind'](this,_0x5ed206));}else this['_speed']=Number[_0x13d7c2(0x76a)];}},BattleManager[_0x5d4113(0x6bf)]=function(){const _0x31d817=_0x5d4113;if(VisuMZ['BattleCore'][_0x31d817(0x326)][_0x31d817(0x96d)][_0x31d817(0xa49)]??!![])return![];return SceneManager[_0x31d817(0x2ab)]()&&this[_0x31d817(0x561)];},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x8b4)]=BattleManager[_0x5d4113(0x3c3)],BattleManager[_0x5d4113(0x3c3)]=function(){const _0x59ef5a=_0x5d4113;if(this['isTpb']())this[_0x59ef5a(0xa5a)]();else{if(_0x59ef5a(0x898)!==_0x59ef5a(0x898)){if(this['_battler']&&this[_0x59ef5a(0x484)][_0x59ef5a(0x9e2)]){const _0xf42a97=this[_0x59ef5a(0x484)]['_freezeMotionData'];this[_0x59ef5a(0x32d)]=_0x55c83f[_0x59ef5a(0x5cd)][_0xf42a97[_0x59ef5a(0x146)]],this[_0x59ef5a(0x86d)]=_0xf42a97[_0x59ef5a(0x41e)];const _0x59a7da=this[_0x59ef5a(0xc6c)];_0x59a7da[_0x59ef5a(0x2f0)](_0xf42a97[_0x59ef5a(0x7de)],_0xf42a97[_0x59ef5a(0x41e)]),this[_0x59ef5a(0x43c)]();}}else VisuMZ[_0x59ef5a(0x710)][_0x59ef5a(0x8b4)]['call'](this);}},BattleManager[_0x5d4113(0xa5a)]=function(){const _0x2f6572=_0x5d4113;if(this[_0x2f6572(0x3ca)]){if(this[_0x2f6572(0x3ca)][_0x2f6572(0x3c3)]()){if(_0x2f6572(0x526)!=='umrQP')_0x404582[_0x2f6572(0xaec)]=_0x2128e2[_0x2f6572(0x80c)](_0x3e907c['$1']);else return;}this[_0x2f6572(0x7ca)](),this[_0x2f6572(0x334)](),!this[_0x2f6572(0x932)]&&!this[_0x2f6572(0x3ca)]&&SceneManager['_scene'][_0x2f6572(0x579)]();}else{if(!this[_0x2f6572(0x932)]){if(_0x2f6572(0xaf6)!==_0x2f6572(0xaf6)){_0x3ba93e[_0x2f6572(0x44d)][_0x2f6572(0xb6f)][_0x2f6572(0x701)](this);const _0x2d38f4=this[_0x2f6572(0xa4b)]()||this;if(!_0x2d38f4)return;!_0x2d38f4[_0x2f6572(0x432)]&&(_0x2d38f4['bitmap']=new _0x27e5ca(this[_0x2f6572(0x61e)],this[_0x2f6572(0x6ce)])),this['_effectType']===_0x2f6572(0x66c)?this['_mainSprite'][_0x2f6572(0x5bd)](0x0,0x0,this['_mainSprite'][_0x2f6572(0x61e)],this[_0x2f6572(0x2a8)]):_0x2d38f4[_0x2f6572(0x5bd)](0x0,0x0,_0x2d38f4[_0x2f6572(0x432)][_0x2f6572(0x61e)],this['bitmap'][_0x2f6572(0x6ce)]);}else this[_0x2f6572(0x57f)]();}}},BattleManager['checkTpbInputClose']=function(){const _0x92cb28=_0x5d4113;if(!this[_0x92cb28(0xb07)]()||this[_0x92cb28(0x948)]()){if(this[_0x92cb28(0x22a)]){if(!$gameParty[_0x92cb28(0xc0c)]()[_0x92cb28(0x4b0)](this[_0x92cb28(0x22a)])){if(_0x92cb28(0xb13)===_0x92cb28(0x9fe)){const _0x1bb82f=this['svBattlerData']()[_0x92cb28(0xaec)]||0x0;return _0xe05b9a[_0x92cb28(0xc27)][_0x1bb82f];}else this['_tpbSceneChangeCacheActor']=null;}}if(!this[_0x92cb28(0x22a)])this[_0x92cb28(0x892)](),this[_0x92cb28(0x3ca)]=null,this['_inputting']=![];else{if(_0x92cb28(0x1fe)!==_0x92cb28(0x1fe)){_0x26d67c('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x1f3fa5['exit']();return;}else this[_0x92cb28(0x6b2)]();}}},BattleManager[_0x5d4113(0x6b2)]=function(){const _0x22077f=_0x5d4113;!$gameParty['battleMembers']()[_0x22077f(0x4b0)](this[_0x22077f(0x22a)])&&(this[_0x22077f(0x22a)]=null);if(this[_0x22077f(0x22a)])_0x22077f(0x6d3)===_0x22077f(0x6d3)?(this['_currentActor']=this[_0x22077f(0x22a)],this[_0x22077f(0x3ca)][_0x22077f(0x803)]=_0x22077f(0x50b),this[_0x22077f(0x311)]=!![],this['_tpbSceneChangeCacheActor']=null):(_0x2b7bc2[_0x22077f(0x44d)]['initMembers']['call'](this),this[_0x22077f(0x380)]=0x0,this[_0x22077f(0x1b8)]=null,this[_0x22077f(0x636)]['x']=0.5,this[_0x22077f(0x636)]['y']=0x0);else{if(_0x22077f(0x34a)===_0x22077f(0x242)){if(!_0x2dfae7['BattleCore'][_0x22077f(0x326)][_0x22077f(0xb91)][_0x22077f(0x16f)])return;_0x13bc22[_0x22077f(0x710)][_0x22077f(0x4bf)]['call'](this,_0x48d8eb);}else this['cancelActorInput'](),this[_0x22077f(0x3ca)]=null,this[_0x22077f(0x311)]=![];}},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x60c)]=BattleManager[_0x5d4113(0x685)],BattleManager[_0x5d4113(0x685)]=function(){const _0x5d7bf2=_0x5d4113;if(this[_0x5d7bf2(0x2f4)]===_0x5d7bf2(0x855)){if(_0x5d7bf2(0x2b7)!==_0x5d7bf2(0x2b7)){let _0x515abe=-0x10,_0x429e0a=this['height']*0.5;const _0x6a0c8e=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x2c93de=this['_battler']['traitObjects']()[_0x5d7bf2(0x390)](_0xba3b6a=>_0xba3b6a&&_0xba3b6a[_0x5d7bf2(0x80a)][_0x5d7bf2(0xb51)](_0x6a0c8e)?_0x145805(_0x39e55c['$1']):0x0),_0x27a277=this['_battler'][_0x5d7bf2(0x1f6)]()[_0x5d7bf2(0x390)](_0x236fd7=>_0x236fd7&&_0x236fd7['note'][_0x5d7bf2(0xb51)](_0x6a0c8e)?_0x587965(_0x328e02['$2']):0x0);_0x515abe=_0x2c93de[_0x5d7bf2(0x27d)]((_0x1d0e4a,_0xf20d81)=>_0x1d0e4a+_0xf20d81,_0x515abe),_0x429e0a=_0x27a277['reduce']((_0x47f64b,_0x3d12ce)=>_0x47f64b+_0x3d12ce,_0x429e0a),this[_0x5d7bf2(0xc6c)]['x']=_0x515abe,this[_0x5d7bf2(0xc6c)]['y']=_0x429e0a,this['_weaponSprite'][_0x5d7bf2(0x5fb)]();}else return this['battleCoreTpbMainPhase']();}else return VisuMZ[_0x5d7bf2(0x710)][_0x5d7bf2(0x60c)][_0x5d7bf2(0x701)](this);},BattleManager[_0x5d4113(0x7b9)]=function(){const _0xca739e=_0x5d4113;return this[_0xca739e(0x629)]();},VisuMZ['BattleCore'][_0x5d4113(0xc40)]=BattleManager[_0x5d4113(0x892)],BattleManager['cancelActorInput']=function(){const _0x376ebe=_0x5d4113;this[_0x376ebe(0x5fd)]()&&this['_phase']===_0x376ebe(0xa73)&&(_0x376ebe(0x9b8)===_0x376ebe(0x9b8)?this[_0x376ebe(0x3ca)]=null:this[_0x376ebe(0x8ed)](_0x376ebe(0x417))),VisuMZ[_0x376ebe(0x710)][_0x376ebe(0xc40)][_0x376ebe(0x701)](this);},VisuMZ[_0x5d4113(0x710)]['BattleManager_inputtingAction']=BattleManager['inputtingAction'],BattleManager[_0x5d4113(0xbaf)]=function(){const _0x20d6cb=_0x5d4113,_0x2523ad=this[_0x20d6cb(0x3ca)];if(_0x2523ad&&!_0x2523ad[_0x20d6cb(0xbaf)]()){const _0x2e40c7=_0x2523ad[_0x20d6cb(0x50c)];_0x2523ad[_0x20d6cb(0x427)][_0x2e40c7]=new Game_Action(_0x2523ad);}return VisuMZ[_0x20d6cb(0x710)][_0x20d6cb(0x551)]['call'](this);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x61a)]=BattleManager[_0x5d4113(0x323)],BattleManager[_0x5d4113(0x323)]=function(_0x244d92){const _0x533241=_0x5d4113;if(this[_0x533241(0x1bb)][_0x533241(0x45a)]())return![];return VisuMZ['BattleCore'][_0x533241(0x61a)][_0x533241(0x701)](this,_0x244d92);},SceneManager[_0x5d4113(0x2ab)]=function(){const _0x1c44ff=_0x5d4113;return this[_0x1c44ff(0x5a4)]&&this[_0x1c44ff(0x5a4)][_0x1c44ff(0x8ab)]===Scene_Battle;},SceneManager[_0x5d4113(0x800)]=function(){const _0x2d00a0=_0x5d4113;return Spriteset_Battle[_0x2d00a0(0x44d)][_0x2d00a0(0xb96)]();},SceneManager[_0x5d4113(0x199)]=function(){const _0xd22bb6=_0x5d4113;if(SceneManager[_0xd22bb6(0x4f7)](Scene_Options))return!![];return![];},SceneManager[_0x5d4113(0xc82)]=function(){const _0x318f18=_0x5d4113;if(SceneManager[_0x318f18(0x51b)](Scene_Options))return!![];return![];},SceneManager[_0x5d4113(0x85b)]=function(_0x1c1fa1){const _0x7030c2=_0x5d4113;if(!SceneManager[_0x7030c2(0x2ab)]())return!![];const _0x38ab9b=['Scene_Options','Scene_Party'];return _0x38ab9b[_0x7030c2(0x4b0)](_0x1c1fa1[_0x7030c2(0x2c0)]);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x5c7)]=SceneManager['push'],SceneManager[_0x5d4113(0x2ce)]=function(_0x34c618){const _0x536ba9=_0x5d4113;if(!SceneManager[_0x536ba9(0x85b)](_0x34c618)){if(_0x536ba9(0x810)==='VaamL'){if(!_0x285260[_0x536ba9(0x2ab)]())return![];if(!_0x3d25a5)return![];if(!_0x1330a0[_0x536ba9(0x441)]())return![];if(_0x3c50f4[_0x536ba9(0x441)]()[_0x536ba9(0x80a)][_0x536ba9(0xb51)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(_0xe2b73b['checkAutoCustomActionSequenceNotetagEffect'](_0x135204[_0x536ba9(0x441)]()))return!![];return![];}else return this[_0x536ba9(0x783)](_0x34c618);}VisuMZ[_0x536ba9(0x710)][_0x536ba9(0x5c7)][_0x536ba9(0x701)](this,_0x34c618);},SceneManager[_0x5d4113(0x783)]=function(_0x2a5534){const _0x3687bb=_0x5d4113;if(!$gameTemp['isPlaytest']())return;if(this[_0x3687bb(0x9d9)])return;this[_0x3687bb(0x9d9)]=!![];let _0x819bc0='';_0x819bc0+=_0x3687bb(0x570),_0x819bc0+='\x20to\x20%1\x20midbattle.'[_0x3687bb(0x85d)](_0x2a5534[_0x3687bb(0x2c0)]),alert(_0x819bc0);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xb8d)]=Game_Temp[_0x5d4113(0x44d)][_0x5d4113(0xbef)],Game_Temp[_0x5d4113(0x44d)]['requestAnimation']=function(_0x56441,_0x20a868,_0x307d45){const _0x46731b=_0x5d4113;_0x56441=_0x56441['filter']((_0x4a9e8a,_0x4fab09,_0x26f0d6)=>_0x26f0d6[_0x46731b(0x6ef)](_0x4a9e8a)===_0x4fab09);if(SceneManager['isSceneBattle']()&&SceneManager[_0x46731b(0x800)]()){if(_0x46731b(0x73f)===_0x46731b(0x73f))_0x307d45=!_0x307d45;else return _0x3e3614[_0x46731b(0x710)]['Settings'][_0x46731b(0x18b)]['SkillItemMiddleLayout'];}VisuMZ['BattleCore'][_0x46731b(0xb8d)]['call'](this,_0x56441,_0x20a868,_0x307d45),SceneManager['isSceneBattle']()&&BattleManager['_spriteset'][_0x46731b(0x595)]();},Game_Temp['prototype'][_0x5d4113(0x97a)]=function(_0x60ba2){const _0x1e4a1d=_0x5d4113;this[_0x1e4a1d(0xbb3)]=_0x60ba2;},Game_Temp[_0x5d4113(0x44d)][_0x5d4113(0xc2b)]=function(){const _0x4acddd=_0x5d4113;return this[_0x4acddd(0xbb3)];},Game_Temp[_0x5d4113(0x44d)][_0x5d4113(0x20b)]=function(){const _0x4b1255=_0x5d4113;this[_0x4b1255(0xa02)]=undefined;},Game_Temp['prototype'][_0x5d4113(0xa9e)]=function(_0x46abdb){const _0xeb214c=_0x5d4113;$gameMap&&$dataMap&&$dataMap['note']&&this[_0xeb214c(0x54c)]($dataMap[_0xeb214c(0x80a)]);const _0x2fb9ec=$dataTroops[_0x46abdb];if(_0x2fb9ec){if('yjHbW'==='XungM'){if(_0x1d8b2d['isTpb']()&&this[_0xeb214c(0x803)]===_0xeb214c(0x443))return this[_0xeb214c(0x4a3)]()?this['currentAction']()&&this[_0xeb214c(0x2de)]()['item']()&&!this[_0xeb214c(0x2de)]()[_0xeb214c(0xa41)]():this[_0xeb214c(0x2de)]()&&this[_0xeb214c(0x2de)]()[_0xeb214c(0x441)]()&&!this[_0xeb214c(0x2de)]()[_0xeb214c(0x204)]();return![];}else{let _0x30fce2=DataManager[_0xeb214c(0xa2e)](_0x2fb9ec['id']);this[_0xeb214c(0x54c)](_0x30fce2);}}},Game_Temp[_0x5d4113(0x44d)][_0x5d4113(0x54c)]=function(_0x699e2){const _0x38c4ce=_0x5d4113;if(!_0x699e2)return;if(_0x699e2[_0x38c4ce(0xb51)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x5adf7d=String(RegExp['$1']);if(_0x5adf7d[_0x38c4ce(0xb51)](/DEFAULT/i))_0x38c4ce(0xa29)!==_0x38c4ce(0xa4e)?this[_0x38c4ce(0xa02)]=_0x38c4ce(0x39e):(_0x22056d['x']=_0x417af2['x']+_0x3129d9[_0x38c4ce(0x513)]*_0x29fd89,_0x408e31['y']=_0x552e41['y']+_0x30f6d6['PopupShiftY']);else{if(_0x5adf7d[_0x38c4ce(0xb51)](/LIST/i))_0x38c4ce(0x4bb)!=='nnHmE'?this[_0x38c4ce(0xa02)]=_0x38c4ce(0x95c):this[_0x38c4ce(0x5dc)](_0x746529,_0x1d9eda,_0xbf704d);else{if(_0x5adf7d['match'](/XP/i))this[_0x38c4ce(0xa02)]='xp';else{if(_0x5adf7d[_0x38c4ce(0xb51)](/PORTRAIT/i))this[_0x38c4ce(0xa02)]=_0x38c4ce(0x453);else{if(_0x5adf7d['match'](/BORDER/i))this['_forcedBattleLayout']='border';else{if(_0x5adf7d[_0x38c4ce(0xb51)](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(_0x38c4ce(0x213)!==_0x38c4ce(0x624))Imported['VisuMZ_3_SideviewBattleUI']?this[_0x38c4ce(0xa02)]=_0x38c4ce(0x79a):_0x38c4ce(0x529)===_0x38c4ce(0x529)?this['_forcedBattleLayout']=_0x38c4ce(0x39e):_0x248dfd[_0x38c4ce(0x4cc)](_0x38c4ce(0x1fb));else{const _0x2c9699=_0x10fd28['parse']('['+_0x56cec6['$1'][_0x38c4ce(0xb51)](/\d+/g)+']');for(const _0x1a07cb of _0x2c9699){if(!_0x52d26b['value'](_0x1a07cb))return![];}return!![];}}else{if(_0x5adf7d['match'](/(?:FRONTVIEW UI|FRONTVIEW)/i)){if(_0x38c4ce(0x627)===_0x38c4ce(0x956)){if(!_0x126ebf)return 0x0;let _0x18e3ce=0x0;const _0x19e5cd=_0x29523f[_0x38c4ce(0x80a)];return _0x19e5cd[_0x38c4ce(0xb51)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x18e3ce+=_0x24f181(_0x265912['$1'])),_0x19e5cd['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x18e3ce+=_0x4cb2ed(_0x54b1ea['$1'])),_0x18e3ce;}else Imported['VisuMZ_3_FrontviewBattleUI']?this[_0x38c4ce(0xa02)]='frontview_ui':this[_0x38c4ce(0xa02)]=_0x38c4ce(0x39e);}}}}}}}}},VisuMZ[_0x5d4113(0x710)]['Game_System_initialize']=Game_System[_0x5d4113(0x44d)][_0x5d4113(0x7e2)],Game_System['prototype'][_0x5d4113(0x7e2)]=function(){const _0x2cacb5=_0x5d4113;VisuMZ[_0x2cacb5(0x710)][_0x2cacb5(0x966)][_0x2cacb5(0x701)](this),this[_0x2cacb5(0x1f9)]();},Game_System[_0x5d4113(0x44d)][_0x5d4113(0x1f9)]=function(){this['_defeatedEnemies']=this['_defeatedEnemies']||[];},Game_System['prototype']['getDefeatedEnemies']=function(){const _0x25ce33=_0x5d4113;if(this[_0x25ce33(0x3ea)]===undefined)this['initBattleCore']();return this[_0x25ce33(0x3ea)];},Game_System[_0x5d4113(0x44d)][_0x5d4113(0x59c)]=function(_0x45db64){const _0x508f22=_0x5d4113;if(this[_0x508f22(0x3ea)]===undefined)this['initBattleCore']();if(!_0x45db64)return;if(this[_0x508f22(0x3ea)][_0x508f22(0x4b0)](_0x45db64))return;this['_defeatedEnemies'][_0x508f22(0x2ce)](_0x45db64),this[_0x508f22(0x3ea)][_0x508f22(0x740)]((_0x2b5f29,_0x40c94b)=>_0x2b5f29-_0x40c94b);},VisuMZ[_0x5d4113(0x710)]['Game_BattlerBase_addNewState']=Game_BattlerBase[_0x5d4113(0x44d)][_0x5d4113(0x9e3)],Game_BattlerBase['prototype'][_0x5d4113(0x9e3)]=function(_0x176086){const _0x5c2ecc=_0x5d4113,_0x2d3134=this['isAlive'](),_0x3b2cd2=this[_0x5c2ecc(0x3a2)]();VisuMZ[_0x5c2ecc(0x710)][_0x5c2ecc(0x5e7)]['call'](this,_0x176086),this['isEnemy']()&&_0x2d3134&&this[_0x5c2ecc(0xa26)]()&&(this[_0x5c2ecc(0x942)]=!this[_0x5c2ecc(0x927)](),$gameSystem['registerDefeatedEnemy'](this[_0x5c2ecc(0xb41)]())),SceneManager['isSceneBattle']()&&_0x3b2cd2!==this[_0x5c2ecc(0x3a2)]()&&(this[_0x5c2ecc(0x3ee)]()&&this[_0x5c2ecc(0x3ee)]()['refreshMotion']());},Game_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x927)]=function(){const _0x4ced9a=_0x5d4113;return $gameSystem['getDefeatedEnemies']()[_0x4ced9a(0x4b0)](this[_0x4ced9a(0x2dd)]);},VisuMZ['BattleCore'][_0x5d4113(0x97f)]=Game_BattlerBase[_0x5d4113(0x44d)][_0x5d4113(0x359)],Game_BattlerBase['prototype'][_0x5d4113(0x359)]=function(_0x424c17){const _0x46d921=_0x5d4113;VisuMZ[_0x46d921(0x710)]['Game_BattlerBase_eraseState'][_0x46d921(0x701)](this,_0x424c17);if(this[_0x46d921(0xb88)]()&&_0x424c17===this[_0x46d921(0x747)]()&&this['isAlive']()){if(_0x46d921(0xbff)!=='OsBdB'){if(_0x324151['isCommonEventReserved']())return![];}else this[_0x46d921(0x942)]=![];}if(!this[_0x46d921(0x153)]&&!this[_0x46d921(0x737)]&&SceneManager[_0x46d921(0x2ab)]()){if(_0x46d921(0x8b9)!==_0x46d921(0x8b9)){if(_0x41a81a['battleCameraData']()[_0x46d921(0x9d2)]>0x0)return!![];this[_0x46d921(0xbdc)]='';}else this['requestMotionRefresh']();}},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x713)]=Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x192)],Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x192)]=function(){const _0x651a25=_0x5d4113;VisuMZ['BattleCore']['Game_Action_clear'][_0x651a25(0x701)](this),this[_0x651a25(0x473)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x651a25(0xb64)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']=_0x651a25(0x39e);},Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x7fd)]=function(_0xb8a005,_0x42065c){const _0x551aa9=_0x5d4113;return VisuMZ[_0x551aa9(0x710)]['Settings'][_0x551aa9(0x96d)]['OverallFormulaJS']['call'](this,_0xb8a005,_0x42065c);},Game_Action[_0x5d4113(0x44d)]['applyVariance']=function(_0x3dc65e,_0xa3f6be){const _0x5c6e60=_0x5d4113;return VisuMZ[_0x5c6e60(0x710)][_0x5c6e60(0x326)][_0x5c6e60(0x96d)]['VarianceFormulaJS'][_0x5c6e60(0x701)](this,_0x3dc65e,_0xa3f6be);},Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x176)]=function(_0x5c5950,_0x9bede9){const _0xd16999=_0x5d4113;return VisuMZ['BattleCore'][_0xd16999(0x326)][_0xd16999(0x96d)][_0xd16999(0x310)][_0xd16999(0x701)](this,_0x5c5950,_0x9bede9);},VisuMZ[_0x5d4113(0x710)]['Game_Action_itemHit']=Game_Action['prototype']['itemHit'],Game_Action['prototype'][_0x5d4113(0x617)]=function(_0x56ca03){const _0x1225e8=_0x5d4113,_0x388a87=this['item']()[_0x1225e8(0x80a)];if(_0x388a87[_0x1225e8(0xb51)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x388a87['match'](/<ALWAYS HIT RATE: (\d+)([%％])>/i)){if('vSFzC'!==_0x1225e8(0x7df))return Number(RegExp['$1'])/0x64;else this[_0x1225e8(0x421)]();}else{if(_0x1225e8(0xaa3)!==_0x1225e8(0xaa3))this[_0x1225e8(0x8bf)]=this['x'],this['_baseY']=this['y'],this[_0x1225e8(0xaa9)](),this[_0x1225e8(0x4e1)](),this['x']+=this[_0x1225e8(0xc45)](),this['y']+=this['extraPositionY'](),this['y']+=this[_0x1225e8(0x9c0)](),this['x']=_0x38e616[_0x1225e8(0xa63)](this['x']),this['y']=_0xdb02fa[_0x1225e8(0xa63)](this['y']);else{let _0x1eed46=VisuMZ[_0x1225e8(0x710)][_0x1225e8(0xc97)]['call'](this,_0x56ca03);return _0x1eed46=this[_0x1225e8(0xb64)][_0x1225e8(0x30f)]*_0x1eed46+this[_0x1225e8(0xb64)][_0x1225e8(0x84a)],_0x1eed46;}}}},Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x808)]=function(_0x25cd65){const _0x59a65a=_0x5d4113;if(!this[_0x59a65a(0x441)]()[_0x59a65a(0x769)][_0x59a65a(0xb97)])return 0x0;let _0x5cd154=VisuMZ['BattleCore'][_0x59a65a(0x326)][_0x59a65a(0x96d)]['CriticalHitRateJS']['call'](this,_0x25cd65);return _0x5cd154=this['_multipliers']['criticalHitRate']*_0x5cd154+this[_0x59a65a(0xb64)][_0x59a65a(0x566)],_0x5cd154;},Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x634)]=function(_0x37f388){const _0x2aa43f=_0x5d4113;return _0x37f388=VisuMZ[_0x2aa43f(0x710)][_0x2aa43f(0x326)][_0x2aa43f(0x96d)]['CriticalHitMultiplier'][_0x2aa43f(0x701)](this,_0x37f388),_0x37f388=this[_0x2aa43f(0xb64)][_0x2aa43f(0x8e8)]*_0x37f388+this[_0x2aa43f(0xb64)][_0x2aa43f(0x8a5)],_0x37f388;},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x46b)]=Game_Action[_0x5d4113(0x44d)]['evalDamageFormula'],Game_Action['prototype']['evalDamageFormula']=function(_0x460ab8){const _0x4fff82=_0x5d4113;if(this[_0x4fff82(0xadc)]!=='default')return this[_0x4fff82(0x9e7)](_0x460ab8);else return DataManager[_0x4fff82(0x13e)](this[_0x4fff82(0x441)]())===_0x4fff82(0x438)?VisuMZ[_0x4fff82(0x710)][_0x4fff82(0x46b)]['call'](this,_0x460ab8):this[_0x4fff82(0xad0)](_0x460ab8);},Game_Action['prototype'][_0x5d4113(0x981)]=function(_0x29e1c1){const _0x43fc6a=_0x5d4113;this[_0x43fc6a(0xadc)]=_0x29e1c1;},Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x9e7)]=function(_0x4046ca){const _0xc93a91=_0x5d4113,_0x3e2461=this[_0xc93a91(0x441)](),_0x116b6d=_0x3e2461[_0xc93a91(0x769)][_0xc93a91(0xaa7)];_0x3e2461['damage']['formula']=this[_0xc93a91(0xadc)];let _0x4e3304=VisuMZ[_0xc93a91(0x710)][_0xc93a91(0x46b)][_0xc93a91(0x701)](this,_0x4046ca);return _0x3e2461[_0xc93a91(0x769)][_0xc93a91(0xaa7)]=_0x116b6d,_0x4e3304;},Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x1db)]=function(){const _0xf945e5=_0x5d4113;if(this[_0xf945e5(0x441)]()[_0xf945e5(0x80a)][_0xf945e5(0xb51)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x302e0c=String(RegExp['$1'])[_0xf945e5(0x6d1)]()[_0xf945e5(0xacb)]();return _0x302e0c;}return _0xf945e5(0x438);},Game_Action[_0x5d4113(0x44d)][_0x5d4113(0xad0)]=function(_0x30f242){const _0xa40820=_0x5d4113,_0x19ad0a=DataManager[_0xa40820(0x13e)](this[_0xa40820(0x441)]()),_0x294217=VisuMZ[_0xa40820(0x6c7)][_0x19ad0a];try{return _0x294217[_0xa40820(0x1e4)][_0xa40820(0x701)](this,_0x30f242);}catch(_0x2b6f67){if($gameTemp[_0xa40820(0x4f1)]())console['log'](_0x2b6f67);return VisuMZ['BattleCore'][_0xa40820(0x46b)][_0xa40820(0x701)](this);}},Game_Action['prototype'][_0x5d4113(0x1e7)]=function(_0x261215,_0x4e9156){const _0x49e0ed=_0x5d4113;if(this[_0x49e0ed(0x225)]())return _0x4e9156;const _0x41c586=this[_0x49e0ed(0x652)](),_0x21361e=_0x261215;let _0x3d6f68=[],_0xf8080a=[];_0x3d6f68['push'](this[_0x49e0ed(0x473)][_0x49e0ed(0x7be)],this['_armorPenetration'][_0x49e0ed(0x86f)]),_0xf8080a[_0x49e0ed(0x2ce)](this['_armorPenetration'][_0x49e0ed(0x5e5)],this[_0x49e0ed(0x473)]['arRedRate']);const _0x3370a8=this[_0x49e0ed(0x166)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x38c7ed=this[_0x49e0ed(0x166)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x44bb60=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x579f43=this[_0x49e0ed(0x166)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;_0x3d6f68=_0x3d6f68[_0x49e0ed(0x545)](_0x21361e[_0x49e0ed(0x1f6)]()[_0x49e0ed(0x390)](_0x41ab01=>_0x41ab01&&_0x41ab01[_0x49e0ed(0x80a)][_0x49e0ed(0xb51)](_0x3370a8)?Number(RegExp['$1']):0x0)),_0xf8080a=_0xf8080a[_0x49e0ed(0x545)](_0x21361e[_0x49e0ed(0x1f6)]()[_0x49e0ed(0x390)](_0x454f77=>_0x454f77&&_0x454f77['note'][_0x49e0ed(0xb51)](_0x38c7ed)?Number(RegExp['$1'])/0x64:0x0)),_0x3d6f68=_0x3d6f68[_0x49e0ed(0x545)](_0x41c586[_0x49e0ed(0x1f6)]()[_0x49e0ed(0x390)](_0x1f1b1c=>_0x1f1b1c&&_0x1f1b1c[_0x49e0ed(0x80a)]['match'](_0x44bb60)?Number(RegExp['$1']):0x0)),_0xf8080a=_0xf8080a[_0x49e0ed(0x545)](_0x41c586[_0x49e0ed(0x1f6)]()[_0x49e0ed(0x390)](_0x5f358e=>_0x5f358e&&_0x5f358e[_0x49e0ed(0x80a)][_0x49e0ed(0xb51)](_0x579f43)?Number(RegExp['$1'])/0x64:0x0));if(this[_0x49e0ed(0x441)]()[_0x49e0ed(0x80a)][_0x49e0ed(0xb51)](_0x44bb60)){if('HWMMp'!=='HWMMp')for(const _0x5698cc of _0x469676){const _0x3163e9=_0x3e4bb9['format'](_0x340605[_0x49e0ed(0x2c0)](),_0x21775c['param'](_0x5698cc));this[_0x49e0ed(0x2ce)](_0x49e0ed(0xae8)),this[_0x49e0ed(0x2ce)](_0x49e0ed(0xa1c)),this[_0x49e0ed(0x2ce)](_0x49e0ed(0x93e),_0x3163e9),this[_0x49e0ed(0x2ce)](_0x49e0ed(0x64b));}else _0x3d6f68[_0x49e0ed(0x2ce)](Number(RegExp['$1']));}return this[_0x49e0ed(0x441)]()[_0x49e0ed(0x80a)]['match'](_0x579f43)&&(_0x49e0ed(0x328)===_0x49e0ed(0x328)?_0xf8080a[_0x49e0ed(0x2ce)](Number(RegExp['$1'])):(this['_logWindow']['push'](_0x49e0ed(0x93e),_0x246577[_0x49e0ed(0x705)][_0x49e0ed(0x85d)](_0xf48fe5[_0x49e0ed(0x2c0)]())),this['_logWindow'][_0x49e0ed(0x2ce)](_0x49e0ed(0x64b)))),_0x4e9156=_0x3d6f68[_0x49e0ed(0x27d)]((_0x11fe5a,_0x1eb3a1)=>_0x11fe5a-_0x1eb3a1,_0x4e9156),_0x4e9156>0x0&&(_0x4e9156=_0xf8080a[_0x49e0ed(0x27d)]((_0x4687ec,_0x35bb8a)=>_0x4687ec*(0x1-_0x35bb8a),_0x4e9156)),_0x4e9156;},VisuMZ['BattleCore'][_0x5d4113(0x98b)]=Game_Action[_0x5d4113(0x44d)]['executeDamage'],Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x6a5)]=function(_0x16702b,_0x159a47){const _0x10cc1b=_0x5d4113;_0x159a47=_0x159a47*this[_0x10cc1b(0xb64)][_0x10cc1b(0x2b4)],_0x159a47+=this[_0x10cc1b(0xb64)]['damageFlat']*(_0x159a47>=0x0?0x1:-0x1),_0x159a47=this[_0x10cc1b(0x267)](_0x10cc1b(0x6f0),_0x16702b,_0x159a47,![]),_0x159a47=this[_0x10cc1b(0x252)](_0x159a47),_0x159a47=Math[_0x10cc1b(0xb50)](_0x159a47),this[_0x10cc1b(0x9d7)]=_0x159a47,this['_totalValue']=this[_0x10cc1b(0x36c)]||0x0,this[_0x10cc1b(0x36c)]+=_0x159a47,VisuMZ[_0x10cc1b(0x710)]['Game_Action_executeDamage'][_0x10cc1b(0x701)](this,_0x16702b,_0x159a47),this[_0x10cc1b(0x267)](_0x10cc1b(0x9bc),_0x16702b,_0x159a47,!![]);},Game_Action[_0x5d4113(0x44d)]['applyDamageCaps']=function(_0xe57eb4){const _0x3764e7=_0x5d4113;if(this[_0x3764e7(0x768)]())return _0xe57eb4;return _0xe57eb4=this[_0x3764e7(0x5b8)](_0xe57eb4),_0xe57eb4=this[_0x3764e7(0xb57)](_0xe57eb4),_0xe57eb4;},Game_Action[_0x5d4113(0x44d)]['isBypassDamageCap']=function(){const _0x9fcb6f=_0x5d4113,_0x20dca5=/<BYPASS DAMAGE CAP>/i;if(this[_0x9fcb6f(0x441)]()[_0x9fcb6f(0x80a)][_0x9fcb6f(0xb51)](_0x20dca5))return!![];if(this[_0x9fcb6f(0x652)]()['traitObjects']()['some'](_0x2488d9=>_0x2488d9&&_0x2488d9[_0x9fcb6f(0x80a)][_0x9fcb6f(0xb51)](_0x20dca5)))return!![];return!VisuMZ['BattleCore']['Settings'][_0x9fcb6f(0x96d)][_0x9fcb6f(0x993)];},Game_Action[_0x5d4113(0x44d)]['applySoftDamageCap']=function(_0x4b4ca9){const _0x55a1f2=_0x5d4113;if(!VisuMZ[_0x55a1f2(0x710)][_0x55a1f2(0x326)][_0x55a1f2(0x96d)][_0x55a1f2(0x521)])return _0x4b4ca9;const _0x34be90=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x55a1f2(0x441)]()['note']['match'](_0x34be90))return _0x4b4ca9;if(this[_0x55a1f2(0x652)]()[_0x55a1f2(0x1f6)]()[_0x55a1f2(0x7f3)](_0x2f6388=>_0x2f6388&&_0x2f6388[_0x55a1f2(0x80a)][_0x55a1f2(0xb51)](_0x34be90)))return _0x4b4ca9;const _0x211301=_0x4b4ca9<0x0?-0x1:0x1;_0x4b4ca9=Math['abs'](_0x4b4ca9);let _0x110117=this[_0x55a1f2(0x652)]()[_0x55a1f2(0xb7b)]();this[_0x55a1f2(0x441)]()[_0x55a1f2(0x80a)][_0x55a1f2(0xb51)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x110117+=Number(RegExp['$1'])/0x64);_0x110117=_0x110117[_0x55a1f2(0xc0e)](0.01,0x1);const _0x3e2e82=this[_0x55a1f2(0x575)](),_0x23629f=_0x110117*_0x3e2e82;if(_0x4b4ca9>_0x23629f&&_0x3e2e82>_0x23629f){if(_0x55a1f2(0xb95)!==_0x55a1f2(0x7b1)){_0x4b4ca9-=_0x23629f;const _0x5bb81f=VisuMZ[_0x55a1f2(0x710)]['Settings'][_0x55a1f2(0x96d)][_0x55a1f2(0x388)],_0x3a39ac=Math[_0x55a1f2(0xbcc)](0x1-_0x4b4ca9/((_0x3e2e82-_0x23629f)*_0x5bb81f+_0x4b4ca9),0.01);_0x4b4ca9*=_0x3a39ac,_0x4b4ca9+=_0x23629f;}else _0x24eb1b[_0x55a1f2(0x487)](_0x1cc298);}return _0x4b4ca9*_0x211301;},Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x575)]=function(){const _0x2e6bc9=_0x5d4113;return this[_0x2e6bc9(0x441)]()['note']['match'](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x2e6bc9(0x652)]()[_0x2e6bc9(0x2e7)]();},Game_Action[_0x5d4113(0x44d)]['applyHardDamageCap']=function(_0x11559d){const _0x2eae91=_0x5d4113;console['log'](_0x11559d);let _0x1ca168=this[_0x2eae91(0x575)]();return _0x11559d['clamp'](-_0x1ca168,_0x1ca168);},VisuMZ[_0x5d4113(0x710)]['Game_Action_apply']=Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x4e0)],Game_Action[_0x5d4113(0x44d)]['apply']=function(_0x1c1901){const _0x4c0025=_0x5d4113;this['applyBattleCoreJS'](_0x4c0025(0xb3c),_0x1c1901,0x0,!![]),VisuMZ[_0x4c0025(0x710)][_0x4c0025(0x1f1)]['call'](this,_0x1c1901),this[_0x4c0025(0x267)](_0x4c0025(0x96c),_0x1c1901,this['_executedValue']||0x0,!![]),this['applyResultSwitches'](_0x1c1901);},Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x267)]=function(_0x3be9ef,_0x56583d,_0x12d4a4,_0x3e9a9e){const _0x49160a=_0x5d4113;if(this[_0x49160a(0x737)]||this[_0x49160a(0x153)])return;_0x12d4a4=_0x12d4a4||0x0;const _0x1537bf=_0x12d4a4,_0x444ea3=VisuMZ[_0x49160a(0x710)][_0x49160a(0x326)][_0x49160a(0x6c3)],_0x4769e7=_0x3be9ef[_0x49160a(0x85d)]('');if(_0x444ea3[_0x4769e7]){if('YNYJE'!==_0x49160a(0x4c4))this[_0x49160a(0x437)][_0x49160a(0xc68)]=_0x39b1e7(_0x45ed50['$1']),this['_cache'][_0x49160a(0x517)]=_0x4a0abc(_0x5adfef['$2']);else{_0x12d4a4=_0x444ea3[_0x4769e7][_0x49160a(0x701)](this,_0x12d4a4,_0x56583d);if(_0x3e9a9e)_0x12d4a4=_0x1537bf;}}let _0x5dcfb4=VisuMZ[_0x49160a(0x710)][_0x49160a(0x978)](this[_0x49160a(0x441)](),_0x3be9ef[_0x49160a(0x85d)](''));if(VisuMZ['BattleCore']['JS'][_0x5dcfb4]){_0x12d4a4=VisuMZ[_0x49160a(0x710)]['JS'][_0x5dcfb4]['call'](this,this['subject'](),_0x56583d,this[_0x49160a(0x441)](),_0x12d4a4);if(_0x3e9a9e)_0x12d4a4=_0x1537bf;}for(const _0x186e6a of this[_0x49160a(0x652)]()[_0x49160a(0x1f6)]()){if(_0x49160a(0x522)===_0x49160a(0x522)){if(!_0x186e6a)continue;_0x5dcfb4=VisuMZ[_0x49160a(0x710)][_0x49160a(0x978)](_0x186e6a,_0x3be9ef[_0x49160a(0x85d)](_0x49160a(0x645)));if(VisuMZ[_0x49160a(0x710)]['JS'][_0x5dcfb4]){_0x12d4a4=VisuMZ[_0x49160a(0x710)]['JS'][_0x5dcfb4]['call'](this,this[_0x49160a(0x652)](),_0x56583d,_0x186e6a,_0x12d4a4);if(_0x3e9a9e)_0x12d4a4=_0x1537bf;}}else return this['width']*this[_0x49160a(0x655)]();}for(const _0xd88dbb of _0x56583d['traitObjects']()){if(_0x49160a(0x83d)!==_0x49160a(0x52a)){if(!_0xd88dbb)continue;_0x5dcfb4=VisuMZ[_0x49160a(0x710)]['createKeyJS'](_0xd88dbb,_0x3be9ef[_0x49160a(0x85d)](_0x49160a(0x2c2)));if(VisuMZ[_0x49160a(0x710)]['JS'][_0x5dcfb4]){if(_0x49160a(0x22d)!==_0x49160a(0x22d))_0x5f045a[_0x49160a(0x549)]=!![];else{_0x12d4a4=VisuMZ['BattleCore']['JS'][_0x5dcfb4][_0x49160a(0x701)](this,this[_0x49160a(0x652)](),_0x56583d,_0xd88dbb,_0x12d4a4);if(_0x3e9a9e)_0x12d4a4=_0x1537bf;}}}else{const _0x1a3a75=_0x1e4dac[_0x4feaf9[_0x49160a(0x29b)]],_0x4f6e92=_0x1a3a75[_0x49160a(0x95c)]['length']-0x2,_0xf08ec4=_0x1a3a75['list'][_0x4f6e92];if(_0xf08ec4&&_0xf08ec4['code']!==0xe6){const _0xf0f07a={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x1e1bdc=_0x1a3a75[_0x49160a(0x95c)][_0x49160a(0x2af)]();_0x1a3a75['list'][_0x49160a(0xc1c)](_0xf0f07a),_0x1a3a75['list']['unshift'](_0x1e1bdc);}}}return _0x12d4a4;},Game_Action['prototype']['actionBattleCoreJS']=function(_0xb7a6f2){const _0x443c78=_0x5d4113,_0x94247d=this[_0x443c78(0x36c)]||0x0,_0x2e443b=VisuMZ['BattleCore']['Settings'][_0x443c78(0x6c3)],_0x45ce74=_0xb7a6f2[_0x443c78(0x85d)]('');_0x2e443b[_0x45ce74]&&_0x2e443b[_0x45ce74]['call'](this,_0x94247d);let _0x243488=VisuMZ['BattleCore']['createKeyJS'](this[_0x443c78(0x441)](),_0xb7a6f2);VisuMZ[_0x443c78(0x710)]['JS'][_0x243488]&&VisuMZ[_0x443c78(0x710)]['JS'][_0x243488][_0x443c78(0x701)](this,this[_0x443c78(0x652)](),this[_0x443c78(0x652)](),this[_0x443c78(0x441)](),_0x94247d);for(const _0x423c37 of this['subject']()['traitObjects']()){if(!_0x423c37)continue;_0x243488=VisuMZ['BattleCore'][_0x443c78(0x978)](_0x423c37,_0xb7a6f2);if(VisuMZ[_0x443c78(0x710)]['JS'][_0x243488]){if(_0x443c78(0x512)!=='WuGKL'){const _0x347501=_0x44c132(_0x2d2962['$1']);return[_0x5dad20[_0x443c78(0x738)]()[_0x347501]];}else VisuMZ[_0x443c78(0x710)]['JS'][_0x243488][_0x443c78(0x701)](this,this[_0x443c78(0x652)](),this['subject'](),_0x423c37,_0x94247d);}}},Game_Action[_0x5d4113(0x44d)][_0x5d4113(0xb3b)]=function(){const _0x2dd09d=_0x5d4113;return VisuMZ[_0x2dd09d(0x710)][_0x2dd09d(0x326)]['Mechanics'][_0x2dd09d(0xba7)][_0x2dd09d(0x701)](this);},Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x333)]=function(){const _0x51875e=_0x5d4113;return VisuMZ[_0x51875e(0x710)][_0x51875e(0x326)][_0x51875e(0x6c3)][_0x51875e(0x186)];},Game_Action[_0x5d4113(0x44d)]['isCustomBattleScope']=function(){const _0xc14e7c=_0x5d4113;return this[_0xc14e7c(0x441)]()[_0xc14e7c(0x80a)]['match'](/<JS TARGETS>/i);},Game_Action[_0x5d4113(0x44d)][_0x5d4113(0xb94)]=function(){const _0x3b68f4=_0x5d4113;if(!this[_0x3b68f4(0xc90)]&&this[_0x3b68f4(0x652)]()[_0x3b68f4(0x53b)]())return![];if(this['isCustomBattleScope']())return!![];return typeof this['item']()[_0x3b68f4(0xc05)]===_0x3b68f4(0x85a);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x665)]=Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x836)],Game_Action['prototype'][_0x5d4113(0x836)]=function(){const _0x432c49=_0x5d4113;return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this['isForOpponentBattleCore']():'GTlkb'===_0x432c49(0x73d)?this[_0x432c49(0x514)]()[_0x432c49(0x549)]:VisuMZ[_0x432c49(0x710)][_0x432c49(0x665)][_0x432c49(0x701)](this);},Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x69a)]=function(){const _0x276c9b=this['item']()['scope'];return _0x276c9b['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x7cc)]=Game_Action['prototype'][_0x5d4113(0x45a)],Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x45a)]=function(){const _0x22c8b4=_0x5d4113;return this[_0x22c8b4(0xb94)]()&&!this[_0x22c8b4(0xc37)]()?this[_0x22c8b4(0x940)]():VisuMZ[_0x22c8b4(0x710)][_0x22c8b4(0x7cc)]['call'](this);},Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x940)]=function(){const _0x3152ba=_0x5d4113,_0x4bfd56=this[_0x3152ba(0x441)]()[_0x3152ba(0xc05)];return _0x4bfd56['match'](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x8bb)]=Game_Action[_0x5d4113(0x44d)]['isForRandom'],Game_Action[_0x5d4113(0x44d)]['isForRandom']=function(){const _0x2d67e5=_0x5d4113;return this[_0x2d67e5(0xb94)]()&&!this[_0x2d67e5(0xc37)]()?this[_0x2d67e5(0xb2d)]():VisuMZ[_0x2d67e5(0x710)][_0x2d67e5(0x8bb)][_0x2d67e5(0x701)](this);},Game_Action['prototype'][_0x5d4113(0xb2d)]=function(){const _0x20543e=_0x5d4113,_0x220963=this['item']()[_0x20543e(0xc05)];return _0x220963['match'](/(?:RAND|RANDOM)/i);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x40f)]=Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x748)],Game_Action['prototype'][_0x5d4113(0x748)]=function(){const _0x4adc1f=_0x5d4113;return this[_0x4adc1f(0xb94)]()&&!this[_0x4adc1f(0xc37)]()?this[_0x4adc1f(0x64e)]():VisuMZ['BattleCore'][_0x4adc1f(0x40f)][_0x4adc1f(0x701)](this);},Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x64e)]=function(){const _0xc84aa9=_0x5d4113,_0x2da964=this[_0xc84aa9(0x441)]()[_0xc84aa9(0xc05)];if(_0x2da964[_0xc84aa9(0xb51)](/RANDOM/i))return![];if(_0x2da964['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x2da964['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0xc84aa9(0x710)][_0xc84aa9(0x40f)][_0xc84aa9(0x701)](this);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xa68)]=Game_Action[_0x5d4113(0x44d)]['makeTargets'],Game_Action[_0x5d4113(0x44d)]['makeTargets']=function(){const _0x16b36c=_0x5d4113;let _0x2a9eae=[];if(this[_0x16b36c(0xb94)]()){if(_0x16b36c(0x317)!==_0x16b36c(0x16d))_0x2a9eae=this[_0x16b36c(0xa46)]();else{const _0x3a33db=this[_0x16b36c(0xabe)](),_0x80c389=_0x4b9d0c['BattleCore'][_0x16b36c(0x326)][_0x16b36c(0xbfc)][_0x16b36c(0xc58)],_0x1bef6a=_0x3a33db===_0x16b36c(0x5ae)?_0x5c8e9f[_0x16b36c(0x441)]:'\x5cI[%1]%2'[_0x16b36c(0x85d)](_0x80c389,_0x2b0828[_0x16b36c(0x441)]),_0xfa52be=this[_0x16b36c(0x239)]();this[_0x16b36c(0x774)](_0x1bef6a,_0x16b36c(0x441),_0xfa52be);}}else _0x2a9eae=VisuMZ[_0x16b36c(0x710)][_0x16b36c(0xa68)]['call'](this);return _0x2a9eae=this[_0x16b36c(0x9d8)](_0x2a9eae),_0x2a9eae;},Game_Action['prototype']['makeTargetsBattleCore']=function(){const _0x2b5f3c=_0x5d4113;let _0xea1cf0=[];const _0x4c4b71=String(this[_0x2b5f3c(0x441)]()[_0x2b5f3c(0xc05)]),_0x132097=VisuMZ[_0x2b5f3c(0x710)]['createKeyJS'](this[_0x2b5f3c(0x441)](),_0x2b5f3c(0xac6));if(VisuMZ[_0x2b5f3c(0x710)]['JS'][_0x132097]){_0xea1cf0=VisuMZ[_0x2b5f3c(0x710)][_0x2b5f3c(0xa68)][_0x2b5f3c(0x701)](this);const _0x3b0fd=VisuMZ[_0x2b5f3c(0x710)][_0x2b5f3c(0x978)](this[_0x2b5f3c(0x441)](),_0x2b5f3c(0xac6));return _0xea1cf0=VisuMZ['BattleCore']['JS'][_0x3b0fd]['call'](this,this[_0x2b5f3c(0x652)](),_0xea1cf0),this[_0x2b5f3c(0x1f0)](_0xea1cf0);}if(_0x4c4b71[_0x2b5f3c(0xb51)](/(\d+) RANDOM ANY/i)){if(_0x2b5f3c(0x154)!==_0x2b5f3c(0x4b3)){let _0x4a04de=Number(RegExp['$1']);while(_0x4a04de--){const _0x398420=Math['randomInt'](0x2)===0x0?this[_0x2b5f3c(0x759)]():this[_0x2b5f3c(0x7a6)]();_0xea1cf0[_0x2b5f3c(0x2ce)](_0x398420[_0x2b5f3c(0x5be)]());}return this[_0x2b5f3c(0x1f0)](_0xea1cf0);}else this[_0x2b5f3c(0x890)]('PreEndTurnJS'),_0x3c9a15[_0x2b5f3c(0x710)][_0x2b5f3c(0x788)][_0x2b5f3c(0x701)](this),this[_0x2b5f3c(0x890)](_0x2b5f3c(0x7ec));}if(_0x4c4b71['match'](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0xeb42ee=Number(RegExp['$1']);while(_0xeb42ee--){_0xea1cf0[_0x2b5f3c(0x2ce)](this[_0x2b5f3c(0x759)]()[_0x2b5f3c(0x5be)]());}return this[_0x2b5f3c(0x1f0)](_0xea1cf0);}if(_0x4c4b71['match'](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if(_0x2b5f3c(0xb17)===_0x2b5f3c(0xb17)){let _0x3b6634=Number(RegExp['$1']);while(_0x3b6634--){if('byzTX'!==_0x2b5f3c(0xa40))_0xea1cf0[_0x2b5f3c(0x2ce)](this[_0x2b5f3c(0x7a6)]()[_0x2b5f3c(0x5be)]());else{this[_0x2b5f3c(0x32d)]=_0x528b7e[_0x2b5f3c(0x5cd)][_0x2b5f3c(0xb59)];return;}}return this['repeatTargets'](_0xea1cf0);}else{const _0x850959=_0x5a3b90(_0x4380ac['$1'])['split'](/[\r\n]+/)[_0x2b5f3c(0x828)](''),_0x19ee93=this['processRandomizedData'](_0x850959);_0x583558=this['getEnemyIdWithName'](_0x19ee93)||_0x43247a,_0x42218f=_0x1337b2[_0x2b5f3c(0x2cd)](_0x37d90a);}}if(_0x4c4b71[_0x2b5f3c(0xb51)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i)){if(_0x2b5f3c(0xb24)!=='ceuSo'){if(!_0x3f4461['isSceneBattle']())return;if(!_0x3ad4a0[_0x2b5f3c(0x9e6)])return;if(!_0x4632b4[_0x2b5f3c(0x932)])return;_0x4cad58[_0x2b5f3c(0xb3d)](_0x697a93,_0x1a4a91);const _0x55ae0e=_0xcffa58['VariableID'];_0x234b7b[_0x2b5f3c(0x74d)](_0x55ae0e,_0x1788e1['_subject']['toUseBoostPoints']());}else return _0xea1cf0[_0x2b5f3c(0x2ce)](...this['friendsUnit']()[_0x2b5f3c(0x331)]()[_0x2b5f3c(0x475)](_0x3dc680=>_0x3dc680!==this[_0x2b5f3c(0x652)]())),this['repeatTargets'](_0xea1cf0);}return VisuMZ[_0x2b5f3c(0x710)]['Game_Action_makeTargets'][_0x2b5f3c(0x701)](this);},Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x2e0)]=function(_0x1385e8){const _0x3140c2=_0x5d4113,_0x4c8f58=[];for(let _0x2088d5=0x0;_0x2088d5<this[_0x3140c2(0x84e)]();_0x2088d5++){_0x4c8f58['push'](_0x1385e8[_0x3140c2(0x5be)]());}return _0x4c8f58;},Game_Action[_0x5d4113(0x44d)]['applyTargetFilters']=function(_0x6ac4c3){const _0x112a33=_0x5d4113;if(!this[_0x112a33(0x441)]())return _0x6ac4c3;const _0x2fb543=this['item']()[_0x112a33(0x80a)];return _0x2fb543[_0x112a33(0xb51)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x6ac4c3['remove'](this[_0x112a33(0x652)]()),_0x6ac4c3;},VisuMZ[_0x5d4113(0x710)]['Game_Action_itemEffectAddAttackState']=Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x657)],Game_Action[_0x5d4113(0x44d)]['itemEffectAddAttackState']=function(_0x1a078c,_0x3002ed){const _0x37b986=_0x5d4113;VisuMZ[_0x37b986(0x710)][_0x37b986(0x295)]['call'](this,_0x1a078c,_0x3002ed);if(!_0x1a078c[_0x37b986(0x264)]())return;for(const _0x52a3ed of this[_0x37b986(0x652)]()[_0x37b986(0xa1b)]()){if(_0x52a3ed===_0x1a078c[_0x37b986(0x747)]()){let _0x71b6aa=_0x3002ed[_0x37b986(0xbe3)];_0x71b6aa*=_0x1a078c[_0x37b986(0x38c)](_0x52a3ed),_0x71b6aa*=this[_0x37b986(0x652)]()['attackStatesRate'](_0x52a3ed),_0x71b6aa*=this[_0x37b986(0xbad)](_0x1a078c);if(Math[_0x37b986(0x22c)]()<_0x71b6aa){if('ggjnq'!=='TSTva')_0x1a078c[_0x37b986(0x519)]=!![],this[_0x37b986(0xb34)](_0x1a078c);else{if(this[_0x37b986(0x437)][_0x37b986(0x3d5)]!==_0x186878)return this[_0x37b986(0x437)][_0x37b986(0x3d5)];if(this['actor']()[_0x37b986(0x80a)]['match'](/<SIDEVIEW SHOW SHADOW>/i))this[_0x37b986(0x437)][_0x37b986(0x3d5)]=!![];else this['actor']()[_0x37b986(0x80a)][_0x37b986(0xb51)](/<SIDEVIEW HIDE SHADOW>/i)?this['_cache']['svShadow']=![]:this[_0x37b986(0x437)][_0x37b986(0x3d5)]=_0x202bce['prototype']['svBattlerShadowVisible'][_0x37b986(0x701)](this);return this[_0x37b986(0x437)]['svShadow'];}}}}},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x7f7)]=Game_Action['prototype'][_0x5d4113(0x439)],Game_Action['prototype'][_0x5d4113(0x439)]=function(_0x197bc3,_0x4f18c8){const _0x16a7db=_0x5d4113;VisuMZ['BattleCore'][_0x16a7db(0x7f7)][_0x16a7db(0x701)](this,_0x197bc3,_0x4f18c8);if(!_0x197bc3['isImmortal']())return;if(_0x4f18c8[_0x16a7db(0x5d8)]!==_0x197bc3[_0x16a7db(0x747)]())return;let _0x527d56=_0x4f18c8['value1'];!this[_0x16a7db(0x225)]()&&(_0x527d56*=_0x197bc3[_0x16a7db(0x38c)](_0x4f18c8[_0x16a7db(0x5d8)]),_0x527d56*=this['lukEffectRate'](_0x197bc3)),Math[_0x16a7db(0x22c)]()<_0x527d56&&(_0x16a7db(0x92e)==='heomU'?_0x3a31af[_0x16a7db(0x44d)][_0x16a7db(0x5f5)][_0x16a7db(0x701)](this,_0x3a348a,_0x5cb40c,_0x330258,_0x5a43ac):(_0x197bc3['_deathStateApplied']=!![],this[_0x16a7db(0xb34)](_0x197bc3)));},VisuMZ[_0x5d4113(0x710)]['Game_Action_applyGlobal']=Game_Action['prototype'][_0x5d4113(0x27f)],Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x27f)]=function(){const _0x896900=_0x5d4113;VisuMZ[_0x896900(0x710)][_0x896900(0x709)][_0x896900(0x701)](this),this[_0x896900(0xbbd)](),this[_0x896900(0xb55)]();},Game_Action[_0x5d4113(0x44d)][_0x5d4113(0xbbd)]=function(){const _0x149182=_0x5d4113;if(!SceneManager[_0x149182(0x2ab)]())return;const _0x340be1=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x2bbdbb=this[_0x149182(0x441)]()[_0x149182(0x80a)][_0x149182(0xb51)](_0x340be1);if(_0x2bbdbb)for(const _0x5b8737 of _0x2bbdbb){if(!_0x5b8737)continue;_0x5b8737[_0x149182(0xb51)](_0x340be1);const _0x141012=String(RegExp['$1'])[_0x149182(0x3d8)](',')['map'](_0x60b9ad=>String(_0x60b9ad)[_0x149182(0xacb)]()),_0x5e9049=_0x141012[_0x149182(0x390)](_0x50cc2d=>DataManager['getCommonEventIdWithName'](_0x50cc2d));for(const _0x9164dc of _0x5e9049){if(_0x149182(0x878)!=='MReHn')this[_0x149182(0x64b)]();else{const _0x4b0c67=$dataCommonEvents[_0x9164dc];if(_0x4b0c67){if(_0x149182(0x5ba)!==_0x149182(0x59f))$gameTemp[_0x149182(0x813)](_0x9164dc);else return _0x3eed3f=_0x1c3789[_0x149182(0x710)][_0x149182(0x326)]['Damage'][_0x149182(0xbea)][_0x149182(0x701)](this,_0x14e7c1),_0x39b7b2=this[_0x149182(0xb64)][_0x149182(0x8e8)]*_0x4ce2b8+this[_0x149182(0xb64)][_0x149182(0x8a5)],_0x4dbdba;}}}}},DataManager[_0x5d4113(0x6ad)]=function(_0x55ca13){const _0x4183f3=_0x5d4113;_0x55ca13=_0x55ca13['toUpperCase']()[_0x4183f3(0xacb)](),this[_0x4183f3(0x253)]=this[_0x4183f3(0x253)]||{};if(this[_0x4183f3(0x253)][_0x55ca13])return this[_0x4183f3(0x253)][_0x55ca13];for(const _0x88da7a of $dataCommonEvents){if(!_0x88da7a)continue;let _0x49d8c7=_0x88da7a[_0x4183f3(0x2c0)];_0x49d8c7=_0x49d8c7['replace'](/\x1I\[(\d+)\]/gi,''),_0x49d8c7=_0x49d8c7[_0x4183f3(0xc9e)](/\\I\[(\d+)\]/gi,''),this[_0x4183f3(0x253)][_0x49d8c7['toUpperCase']()['trim']()]=_0x88da7a['id'];}return this[_0x4183f3(0x253)][_0x55ca13]||0x0;},Game_Action['prototype']['resetResultSwitches']=function(){const _0x14aa9e=_0x5d4113;if(!SceneManager[_0x14aa9e(0x2ab)]())return;const _0x137f86=VisuMZ[_0x14aa9e(0x710)][_0x14aa9e(0x326)]['Mechanics'];_0x137f86[_0x14aa9e(0x98f)]&&$gameSwitches[_0x14aa9e(0x74d)](_0x137f86['SwitchCritical'],![]);_0x137f86[_0x14aa9e(0x698)]&&$gameSwitches[_0x14aa9e(0x74d)](_0x137f86[_0x14aa9e(0x698)],![]);if(_0x137f86[_0x14aa9e(0x8db)]){if(_0x14aa9e(0x4e2)===_0x14aa9e(0x4e2))$gameVariables[_0x14aa9e(0x74d)](_0x137f86[_0x14aa9e(0x8db)],0x0);else{const _0x3f168a=this[_0x14aa9e(0x331)]();return _0x3f168a[_0x554f96[_0x14aa9e(0x96f)](_0x3f168a[_0x14aa9e(0x7da)])];}}if(_0x137f86[_0x14aa9e(0xb14)]){if('vdQUg'!==_0x14aa9e(0x909)){let _0x6a9b2d='battleUIOffsetY';if(this[_0x14aa9e(0xca2)](_0x6a9b2d))return this['_cache'][_0x6a9b2d];return this[_0x14aa9e(0x437)][_0x6a9b2d]=this[_0x14aa9e(0x35a)](this[_0x14aa9e(0x258)]()),this[_0x14aa9e(0x437)][_0x6a9b2d];}else $gameVariables[_0x14aa9e(0x74d)](_0x137f86['VariableHeal'],0x0);}},Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x2dc)]=function(_0x181831){const _0x54bb19=_0x5d4113;if(!SceneManager['isSceneBattle']())return;if(!_0x181831)return;const _0xd0dddb=_0x181831[_0x54bb19(0x47b)](),_0x5c3461=VisuMZ[_0x54bb19(0x710)][_0x54bb19(0x326)]['Mechanics'];if(_0x5c3461[_0x54bb19(0x98f)]&&_0xd0dddb[_0x54bb19(0xb97)]){if(_0x54bb19(0xbae)!=='pBZsj')return _0x3053c3[_0x54bb19(0x5a4)][_0x54bb19(0x30c)]()==='border'?_0x3276ac[_0x54bb19(0x710)][_0x54bb19(0x326)]['BattleLayout'][_0x54bb19(0x448)]:_0x13f7c9[_0x54bb19(0x710)][_0x54bb19(0x326)]['BattleLayout'][_0x54bb19(0xb9a)];else $gameSwitches[_0x54bb19(0x74d)](_0x5c3461[_0x54bb19(0x98f)],!![]);}_0x5c3461['SwitchMissEvade']&&(_0xd0dddb[_0x54bb19(0x40d)]||_0xd0dddb[_0x54bb19(0x6c9)])&&$gameSwitches[_0x54bb19(0x74d)](_0x5c3461['SwitchMissEvade'],!![]);if(_0x5c3461[_0x54bb19(0x8db)]){if('IUnJz'!==_0x54bb19(0x635)){let _0x5d7240=$gameVariables['value'](_0x5c3461['VariableDmg']);_0xd0dddb[_0x54bb19(0xa16)]>0x0&&(_0x5d7240+=Math['abs'](_0xd0dddb['hpDamage'])),$gameVariables[_0x54bb19(0x74d)](_0x5c3461[_0x54bb19(0x8db)],_0x5d7240);}else return _0xe0ece9[_0x54bb19(0x604)]['call'](this);}if(_0x5c3461[_0x54bb19(0xb14)]){let _0x419167=$gameVariables[_0x54bb19(0x6b7)](_0x5c3461[_0x54bb19(0xb14)]);_0xd0dddb['hpDamage']<0x0&&(_0x54bb19(0xb6e)===_0x54bb19(0x9fa)?this[_0x54bb19(0xb5c)](_0x54bb19(0x8eb)):_0x419167+=Math[_0x54bb19(0x164)](_0xd0dddb[_0x54bb19(0xa16)])),$gameVariables['setValue'](_0x5c3461['VariableHeal'],_0x419167);}},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x560)]=Game_BattlerBase[_0x5d4113(0x44d)][_0x5d4113(0x22f)],Game_BattlerBase[_0x5d4113(0x44d)][_0x5d4113(0x22f)]=function(){const _0x1b8b71=_0x5d4113;VisuMZ[_0x1b8b71(0x710)]['Game_BattlerBase_initMembers'][_0x1b8b71(0x701)](this),this[_0x1b8b71(0x210)]();},Game_BattlerBase[_0x5d4113(0x44d)][_0x5d4113(0x210)]=function(){const _0x38223f=_0x5d4113;this[_0x38223f(0x714)]=![];},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x3db)]=Game_BattlerBase['prototype'][_0x5d4113(0x602)],Game_BattlerBase['prototype'][_0x5d4113(0x602)]=function(){const _0x2f3cd4=_0x5d4113;this[_0x2f3cd4(0x437)]={},VisuMZ[_0x2f3cd4(0x710)]['Game_BattlerBase_refresh'][_0x2f3cd4(0x701)](this);},Game_BattlerBase[_0x5d4113(0x44d)]['checkCacheKey']=function(_0x473f04){const _0x1d18c3=_0x5d4113;return this[_0x1d18c3(0x437)]=this['_cache']||{},this[_0x1d18c3(0x437)][_0x473f04]!==undefined;},Game_BattlerBase[_0x5d4113(0x44d)][_0x5d4113(0x2e7)]=function(){const _0x5aa28c=_0x5d4113;if(this['_cache'][_0x5aa28c(0x2e7)]!==undefined)return this[_0x5aa28c(0x437)][_0x5aa28c(0x2e7)];const _0x2939c3=/<DAMAGE CAP:[ ](\d+)>/i,_0x25c9e8=this['traitObjects']()[_0x5aa28c(0x390)](_0xe97a=>_0xe97a&&_0xe97a['note']['match'](_0x2939c3)?Number(RegExp['$1']):0x0);let _0x54f36d=_0x25c9e8[_0x5aa28c(0x7da)]>0x0?Math[_0x5aa28c(0xbcc)](..._0x25c9e8):0x0;if(_0x54f36d<=0x0)_0x54f36d=VisuMZ[_0x5aa28c(0x710)][_0x5aa28c(0x326)][_0x5aa28c(0x96d)][_0x5aa28c(0x9ba)];return this[_0x5aa28c(0x437)][_0x5aa28c(0x2e7)]=_0x54f36d,this[_0x5aa28c(0x437)][_0x5aa28c(0x2e7)];},Game_BattlerBase[_0x5d4113(0x44d)][_0x5d4113(0xb7b)]=function(){const _0x9e7798=_0x5d4113;if(this[_0x9e7798(0x437)][_0x9e7798(0x1ed)]!==undefined)return this['_cache'][_0x9e7798(0x1ed)];let _0x3ba58a=VisuMZ[_0x9e7798(0x710)][_0x9e7798(0x326)][_0x9e7798(0x96d)][_0x9e7798(0x564)];const _0x16a340=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x207fd=this[_0x9e7798(0x1f6)]()[_0x9e7798(0x390)](_0x4e99bb=>_0x4e99bb&&_0x4e99bb[_0x9e7798(0x80a)][_0x9e7798(0xb51)](_0x16a340)?Number(RegExp['$1'])/0x64:0x0);return _0x3ba58a=_0x207fd[_0x9e7798(0x27d)]((_0x3941c4,_0x910036)=>_0x3941c4+_0x910036,_0x3ba58a),this[_0x9e7798(0x437)][_0x9e7798(0x1ed)]=_0x3ba58a,this[_0x9e7798(0x437)][_0x9e7798(0x1ed)][_0x9e7798(0xc0e)](0.01,0x1);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x300)]=Game_BattlerBase['prototype'][_0x5d4113(0xa9d)],Game_BattlerBase['prototype'][_0x5d4113(0xa9d)]=function(){const _0x56b284=_0x5d4113;VisuMZ[_0x56b284(0x710)][_0x56b284(0x300)][_0x56b284(0x701)](this),SceneManager['isSceneBattle']()&&this[_0x56b284(0xb5c)](_0x56b284(0xb59));},Game_BattlerBase[_0x5d4113(0x44d)]['battler']=function(){const _0x5222a8=_0x5d4113;if(!SceneManager[_0x5222a8(0x2ab)]())return null;if(!SceneManager[_0x5222a8(0x5a4)][_0x5222a8(0xa9a)])return null;return SceneManager['_scene']['_spriteset']['findTargetSprite'](this);},Game_BattlerBase['prototype'][_0x5d4113(0x773)]=function(){const _0x1ed62d=_0x5d4113;return VisuMZ[_0x1ed62d(0x710)][_0x1ed62d(0x326)]['Actor']['AnchorX'];},Game_BattlerBase['prototype'][_0x5d4113(0x1ba)]=function(){const _0x394fa7=_0x5d4113;return VisuMZ['BattleCore'][_0x394fa7(0x326)]['Actor'][_0x394fa7(0xb28)];},Game_BattlerBase[_0x5d4113(0x44d)][_0x5d4113(0xbb1)]=function(){const _0x48be74=_0x5d4113;return this[_0x48be74(0xa65)]&&this[_0x48be74(0xa65)]()?VisuMZ[_0x48be74(0x710)]['Settings'][_0x48be74(0xc03)][_0x48be74(0xaeb)]:VisuMZ[_0x48be74(0x710)]['Settings']['Enemy'][_0x48be74(0xaeb)];},Game_BattlerBase['prototype']['battlerSmoothImage']=function(){return!![];},Game_BattlerBase[_0x5d4113(0x44d)]['battleUIOffsetX']=function(){return 0x0;},Game_BattlerBase[_0x5d4113(0x44d)][_0x5d4113(0x938)]=function(){return 0x0;},Game_BattlerBase[_0x5d4113(0x44d)]['createBattleUIOffsetX']=function(_0x4e38ba){const _0x2a31f6=_0x5d4113;if(!_0x4e38ba)return 0x0;let _0x434fbb=0x0;const _0x1e538d=_0x4e38ba['note'];return _0x1e538d[_0x2a31f6(0xb51)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x434fbb+=Number(RegExp['$1'])),_0x1e538d[_0x2a31f6(0xb51)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&('uslNc'!==_0x2a31f6(0xbd8)?_0x434fbb+=Number(RegExp['$1']):(this[_0x2a31f6(0x1bb)][_0x2a31f6(0x46f)]=_0x4005aa,this[_0x2a31f6(0x7c2)][_0x2a31f6(0x2fe)](_0x49709c),this[_0x2a31f6(0x7c2)]['displayReflectionPlayBack'](_0x5675bc,this[_0x2a31f6(0x1bb)]),this[_0x2a31f6(0x1bb)]['apply'](_0x215727),this['_logWindow'][_0x2a31f6(0x374)](_0x1d217e,_0x3e013a))),_0x434fbb;},Game_BattlerBase[_0x5d4113(0x44d)][_0x5d4113(0x35a)]=function(_0x404a96){const _0x2bc550=_0x5d4113;if(!_0x404a96)return 0x0;let _0x44c749=0x0;const _0x53d438=_0x404a96[_0x2bc550(0x80a)];return _0x53d438[_0x2bc550(0xb51)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x2bc550(0x4de)==='DsiWM'?(this[_0x2bc550(0x8bf)]=0x0,this[_0x2bc550(0x559)]=0x0,this[_0x2bc550(0x30e)]=0x0,this[_0x2bc550(0xb87)]=0x0,this[_0x2bc550(0x362)]=0x0,this['_floatWholeDuration']=0x0,this[_0x2bc550(0x962)]=_0x2bc550(0x1ab),this[_0x2bc550(0x2d2)]=0x0,this[_0x2bc550(0xa2f)]=0x0,this['_jumpDuration']=0x0,this[_0x2bc550(0xa84)]=0x0,this[_0x2bc550(0x205)]=0xff,this[_0x2bc550(0x9a4)]=0x0,this[_0x2bc550(0x703)]=0x0,this['_opacityEasing']=_0x2bc550(0x1ab),this[_0x2bc550(0x19e)]=0x0,this[_0x2bc550(0x8c7)]=0x0,this[_0x2bc550(0x839)]=0x0,this[_0x2bc550(0x6ed)]=0x0,this[_0x2bc550(0x36f)]=_0x2bc550(0x1ab),this[_0x2bc550(0x5d1)]=!![],this['_skewX']=0x0,this['_skewY']=0x0,this[_0x2bc550(0x590)]=0x0,this[_0x2bc550(0x5e9)]=0x0,this['_skewDuration']=0x0,this[_0x2bc550(0x883)]=0x0,this['_skewEasing']=_0x2bc550(0x1ab),this[_0x2bc550(0x760)]=0x1,this[_0x2bc550(0xa9c)]=0x1,this['_targetGrowX']=0x1,this[_0x2bc550(0xc14)]=0x1,this[_0x2bc550(0xa8f)]=0x0,this[_0x2bc550(0x28d)]=0x0,this[_0x2bc550(0xaae)]=_0x2bc550(0x1ab),this[_0x2bc550(0x60d)]=0x1,this[_0x2bc550(0x5f8)]=0x0,this[_0x2bc550(0x6f4)]=0x0,this[_0x2bc550(0x887)]=0x0,this[_0x2bc550(0x530)]=0x0,this[_0x2bc550(0xb19)]=_0x2bc550(0x1ab),this[_0x2bc550(0x72b)]=0x0,this[_0x2bc550(0x33f)]=0x0):_0x44c749+=Number(RegExp['$1'])),_0x53d438[_0x2bc550(0xb51)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x44c749+=Number(RegExp['$2'])),_0x44c749;},VisuMZ['BattleCore'][_0x5d4113(0x654)]=Game_BattlerBase['prototype']['isStateResist'],Game_BattlerBase[_0x5d4113(0x44d)][_0x5d4113(0xb8a)]=function(_0x1b8b47){const _0x190805=_0x5d4113;if(_0x1b8b47===this[_0x190805(0x747)]()&&this[_0x190805(0x264)]())return!![];return VisuMZ[_0x190805(0x710)]['Game_BattlerBase_isStateResist'][_0x190805(0x701)](this,_0x1b8b47);},Game_BattlerBase[_0x5d4113(0x44d)][_0x5d4113(0x264)]=function(){const _0x1f71ac=_0x5d4113;return this[_0x1f71ac(0x714)];},Game_BattlerBase[_0x5d4113(0x44d)]['setImmortal']=function(_0x279657){const _0x58801b=_0x5d4113;if(_0x279657){if(_0x58801b(0xb47)===_0x58801b(0xaed))return-0x1;else this['addImmortal']();}else this[_0x58801b(0x50e)]();},Game_BattlerBase[_0x5d4113(0x44d)]['addImmortal']=function(){const _0x438b5c=_0x5d4113;if(this[_0x438b5c(0xa26)]())return;this[_0x438b5c(0x714)]=!![],this['_deathStateApplied']=![];},Game_BattlerBase[_0x5d4113(0x44d)][_0x5d4113(0x50e)]=function(){const _0x240a15=_0x5d4113,_0x4860b5=this[_0x240a15(0x6ab)]();this['_immortal']=![];_0x4860b5&&this['_deathStateApplied']&&('qtKJz'!==_0x240a15(0x7fa)?this[_0x240a15(0xa9d)]():_0x354a2c['collapse']=![]);this['_deathStateApplied']=![],this[_0x240a15(0x602)]();if(this[_0x240a15(0xa26)]()&&_0x4860b5){if(_0x240a15(0x742)!==_0x240a15(0x874))this[_0x240a15(0x47f)](),this[_0x240a15(0x578)]();else{const _0x5b6caf=_0x38f010[_0x240a15(0x13e)](this[_0x240a15(0xb7a)]),_0x2e90e9=_0x21d254[_0x240a15(0x6c7)][_0x5b6caf];if(!_0x2e90e9)return this['getItemDamageAmountLabelOriginal']();const _0x487a56=_0x240a15(0x6a9)[_0x240a15(0x85d)](this[_0x240a15(0xb7a)]['damage']['type']),_0x12f51e=[null,_0x4c2a91['hp'],_0x33cc9c['mp'],_0x4bb205['hp'],_0x30104b['mp'],_0x54a3db['hp'],_0x438dcf['mp']][this[_0x240a15(0xb7a)][_0x240a15(0x769)][_0x240a15(0x917)]];return _0x2e90e9[_0x487a56][_0x240a15(0x85d)](_0x12f51e);}}},VisuMZ[_0x5d4113(0x710)]['Game_Action_numRepeats']=Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x649)],Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x649)]=function(){const _0xcbfdef=_0x5d4113;return this[_0xcbfdef(0x441)]()?VisuMZ[_0xcbfdef(0x710)][_0xcbfdef(0xa22)][_0xcbfdef(0x701)](this):0x0;},VisuMZ['BattleCore']['Game_Action_setAttack']=Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x290)],Game_Action[_0x5d4113(0x44d)][_0x5d4113(0x290)]=function(){const _0x168a04=_0x5d4113;this['subject']()&&this['subject']()['canAttack']()?VisuMZ[_0x168a04(0x710)][_0x168a04(0xc57)][_0x168a04(0x701)](this):this[_0x168a04(0x192)]();},VisuMZ[_0x5d4113(0x710)]['Game_BattlerBase_canAttack']=Game_BattlerBase['prototype'][_0x5d4113(0xae6)],Game_BattlerBase['prototype'][_0x5d4113(0xae6)]=function(){const _0x1fe067=_0x5d4113;if(!this[_0x1fe067(0x403)]())return![];return VisuMZ[_0x1fe067(0x710)][_0x1fe067(0xb2c)][_0x1fe067(0x701)](this);},Game_BattlerBase[_0x5d4113(0x44d)][_0x5d4113(0x403)]=function(){const _0x30f0d0=_0x5d4113;for(const _0x42cecf of this[_0x30f0d0(0x1f6)]()){if(_0x30f0d0(0x4ee)!=='UpAOq'){if(!_0x42cecf)continue;if(_0x42cecf[_0x30f0d0(0x80a)][_0x30f0d0(0xb51)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}else{if(_0x2b85d8===_0x4f3031[_0x30f0d0(0x747)]()){let _0x17e200=_0x57ffa4[_0x30f0d0(0xbe3)];_0x17e200*=_0x1548cb[_0x30f0d0(0x38c)](_0x3409e8),_0x17e200*=this[_0x30f0d0(0x652)]()[_0x30f0d0(0xc77)](_0x451614),_0x17e200*=this['lukEffectRate'](_0x335606),_0x1fb19d[_0x30f0d0(0x22c)]()<_0x17e200&&(_0x58a393[_0x30f0d0(0x519)]=!![],this[_0x30f0d0(0xb34)](_0x1e4ea1));}}}return!![];},VisuMZ['BattleCore'][_0x5d4113(0x92d)]=Game_Action[_0x5d4113(0x44d)][_0x5d4113(0xa2a)],Game_Action[_0x5d4113(0x44d)]['setGuard']=function(){const _0x5a7d2a=_0x5d4113;this[_0x5a7d2a(0x652)]()['canGuard']()&&(_0x5a7d2a(0xb15)===_0x5a7d2a(0xa6f)?this[_0x5a7d2a(0x5d1)]=!![]:VisuMZ['BattleCore'][_0x5a7d2a(0x92d)][_0x5a7d2a(0x701)](this));},VisuMZ['BattleCore'][_0x5d4113(0xb6a)]=Game_BattlerBase['prototype'][_0x5d4113(0x3a0)],Game_BattlerBase[_0x5d4113(0x44d)][_0x5d4113(0x3a0)]=function(){const _0x5abf41=_0x5d4113;if(!this['canGuardBattleCore']())return![];return VisuMZ[_0x5abf41(0x710)][_0x5abf41(0xb6a)][_0x5abf41(0x701)](this);},Game_BattlerBase['prototype'][_0x5d4113(0x2d9)]=function(){const _0x3a8f9d=_0x5d4113;for(const _0x46868b of this[_0x3a8f9d(0x1f6)]()){if(_0x3a8f9d(0x39a)===_0x3a8f9d(0xc6d)){if(!this[_0x3a8f9d(0x484)])return;this[_0x3a8f9d(0x15a)]=this[_0x3a8f9d(0x484)]['battlerShadowScaleX'](),this['_shadowScaleY']=this[_0x3a8f9d(0x484)][_0x3a8f9d(0xaaa)]();}else{if(!_0x46868b)continue;if(_0x46868b[_0x3a8f9d(0x80a)][_0x3a8f9d(0xb51)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}}return!![];},Game_BattlerBase['prototype'][_0x5d4113(0x59e)]=function(){const _0x24f5be=_0x5d4113;for(const _0x33186d of this['traitObjects']()){if(_0x24f5be(0x376)==='kbYAm'){if(!_0x33186d)continue;if(_0x33186d[_0x24f5be(0x80a)]['match'](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}else _0x45b546=_0x53ba65+_0x12f2e5[_0x24f5be(0x706)]/0x2-0x4,_0x5d5829=_0x47afc9-_0x5e3f7a[_0x24f5be(0xa92)]/0x2;}return!![];},Game_Battler[_0x5d4113(0x44d)]['allowRandomSpeed']=function(){const _0x5eb4b3=_0x5d4113;return VisuMZ['BattleCore'][_0x5eb4b3(0x326)]['Mechanics'][_0x5eb4b3(0x186)];},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x990)]=Game_Battler['prototype'][_0x5d4113(0x9de)],Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x9de)]=function(){const _0x351f44=_0x5d4113;if(SceneManager[_0x351f44(0x2ab)]()){if(_0x351f44(0x687)==='VVQmE'){if(!_0x47841a[_0x351f44(0x38e)])return;const _0x25b51e=_0xd61d56[_0x351f44(0x5a4)]['_spriteset'];if(!_0x25b51e)return;if(_0x44b536[_0x351f44(0xac5)][_0x351f44(0xa2b)]<=1.04){_0x23acf0(_0x351f44(0x639)),_0x3a1649[_0x351f44(0x3e4)]();return;}_0x547192[_0x351f44(0xb3d)](_0x283222,_0x381864);const _0x1e7900=_0x1aba4b['getLastPluginCommandInterpreter'](),_0x590a1d=_0x5600ef['ms']||0x1;_0x82a9cd[_0x351f44(0xac5)][_0x351f44(0x256)](_0x590a1d,_0x1e7900);}else{if(BattleManager['isTpb']()){if(_0x351f44(0xa36)===_0x351f44(0xa36)){if(this[_0x351f44(0x4dc)]()<=0x0)return;}else{const _0x347238=_0x351f44(0x9ae)['format'](_0x2c59a5[_0x351f44(0xb54)]()),_0x167ba7=this['createInnerPortrait'](_0x347238,_0x452c65),_0x185755=_0x3000fe[_0x351f44(0x8d3)]();_0x185755!==''?_0x167ba7['bitmap']=_0x3cf387['loadPicture'](_0x185755):_0x167ba7[_0x351f44(0x432)]=_0x14c88b[_0x351f44(0x57d)];const _0x493a22=this[_0x351f44(0xb7f)](_0x17f4e4);_0x167ba7[_0x351f44(0x636)]['x']=0.5,_0x167ba7[_0x351f44(0x636)]['y']=0x1;let _0xb27837=_0x5c5700['round'](_0x493a22['x']+_0x493a22['width']/0x2)+this[_0x351f44(0x31a)];_0xb27837+=_0x3ae598[_0x351f44(0x339)]();let _0x195cbf=_0x355229['round'](this[_0x351f44(0x6ce)]);_0x195cbf+=_0x38363f[_0x351f44(0xb68)](),_0x167ba7['move'](_0xb27837,_0x195cbf);const _0x3557a1=_0x579fe4[_0x351f44(0x710)]['Settings'][_0x351f44(0x18b)][_0x351f44(0xc80)];_0x167ba7[_0x351f44(0x596)]['x']=_0x3557a1,_0x167ba7['scale']['y']=_0x3557a1,_0x167ba7[_0x351f44(0xb89)]();}}else{if($gameTroop[_0x351f44(0x4dc)]()<=0x0){if('ZQyuj'==='ZQyuj')return;else return this[_0x351f44(0x362)]>0x0;}}}}if(SceneManager[_0x351f44(0x2ab)]()&&BattleManager[_0x351f44(0x5fd)]()&&this['_lastRegenFrameCount']===Graphics[_0x351f44(0x60f)]){if(_0x351f44(0x6c1)===_0x351f44(0x48d))!_0x410157['battleMembers']()['includes'](this[_0x351f44(0x22a)])&&(this[_0x351f44(0x22a)]=null),this[_0x351f44(0x22a)]?(this[_0x351f44(0x3ca)]=this[_0x351f44(0x22a)],this[_0x351f44(0x3ca)][_0x351f44(0x803)]='charged',this[_0x351f44(0x311)]=!![],this[_0x351f44(0x22a)]=null):(this[_0x351f44(0x892)](),this[_0x351f44(0x3ca)]=null,this[_0x351f44(0x311)]=![]);else return;}this[_0x351f44(0x616)]=Graphics[_0x351f44(0x60f)];SceneManager[_0x351f44(0x2ab)]()&&(_0x351f44(0x733)!==_0x351f44(0xb0d)?this[_0x351f44(0x890)](_0x351f44(0x5db)):this[_0x351f44(0x8ea)]=_0x5e91ed);VisuMZ[_0x351f44(0x710)][_0x351f44(0x990)][_0x351f44(0x701)](this);if(SceneManager[_0x351f44(0x2ab)]()){if(_0x351f44(0xa39)===_0x351f44(0xa39))this[_0x351f44(0x31e)](),this[_0x351f44(0x890)]('PostRegenerateJS');else{if(!_0x4f77b3[_0x351f44(0x2ab)]())return;const _0x3d57c2=_0x5af822[_0x351f44(0x7c2)];_0x3d57c2['clear']();}}},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x31e)]=function(){const _0x5db92e=_0x5d4113;if(SceneManager[_0x5db92e(0x2ab)]()){if('xLGui'===_0x5db92e(0x536))for(const _0x16ea9 of this[_0x5db92e(0x1f6)]()){if(!_0x16ea9)continue;this[_0x5db92e(0x882)](_0x16ea9);}else return _0x3688b2[_0x383b32];}},Game_Battler['prototype'][_0x5d4113(0x882)]=function(_0x344dcb){const _0x58aaeb=_0x5d4113;if(!Imported[_0x58aaeb(0x567)])return;if(!SceneManager[_0x58aaeb(0x2ab)]())return;if(this['isDead']())return;if(this[_0x58aaeb(0xc8d)]())return;if(_0x344dcb[_0x58aaeb(0x80a)][_0x58aaeb(0xb51)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){if(_0x58aaeb(0x337)!=='zEcrz'){const _0x4f9049=Number(RegExp['$1']);$gameTemp[_0x58aaeb(0x893)]([this],_0x4f9049,![],![]);}else this[_0x58aaeb(0x890)](_0x58aaeb(0x7cb)),_0x121995[_0x58aaeb(0x710)][_0x58aaeb(0x986)]['call'](this),this['processBattleCoreJS'](_0x58aaeb(0x2cc));}},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x986)]=Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x1e3)],Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x1e3)]=function(){const _0x163854=_0x5d4113;this['processBattleCoreJS'](_0x163854(0x7cb)),VisuMZ[_0x163854(0x710)]['Game_Battler_startTpbTurn'][_0x163854(0x701)](this),this['processBattleCoreJS'](_0x163854(0x2cc));},VisuMZ[_0x5d4113(0x710)]['Game_Battler_onTurnEnd']=Game_Battler['prototype'][_0x5d4113(0x46e)],Game_Battler['prototype'][_0x5d4113(0x46e)]=function(){const _0x27d069=_0x5d4113;this[_0x27d069(0x890)](_0x27d069(0x7dd)),VisuMZ[_0x27d069(0x710)]['Game_Battler_onTurnEnd']['call'](this),this[_0x27d069(0x890)](_0x27d069(0x7ec));},Game_Battler['prototype'][_0x5d4113(0x890)]=function(_0x4e1c1f){const _0x45e16a=_0x5d4113;if(this[_0x45e16a(0x737)]||this[_0x45e16a(0x153)])return;const _0x50f14c=VisuMZ['BattleCore']['Settings'][_0x45e16a(0x6c3)];if(_0x50f14c[_0x4e1c1f])_0x50f14c[_0x4e1c1f][_0x45e16a(0x701)](this);for(const _0xf47073 of this['traitObjects']()){if(!_0xf47073)continue;key=VisuMZ[_0x45e16a(0x710)][_0x45e16a(0x978)](_0xf47073,_0x4e1c1f),VisuMZ[_0x45e16a(0x710)]['JS'][key]&&('VGSMl'===_0x45e16a(0x99a)?VisuMZ[_0x45e16a(0x710)]['JS'][key]['call'](this,this,this,_0xf47073,0x0):(_0x1be084[_0x45e16a(0x596)]['x']=this[_0x45e16a(0x655)](),_0x5dfc4a[_0x45e16a(0x596)]['y']=this['mainSpriteScaleY']()));}},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x4a3)]=function(){const _0x35ca8d=_0x5d4113;return VisuMZ[_0x35ca8d(0x710)]['Settings'][_0x35ca8d(0xc03)][_0x35ca8d(0xad9)]||![];},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x70e)]=function(){const _0x3ea6a6=_0x5d4113;if(this['isWaiting']()){if(this['chantStyle']()){if(_0x3ea6a6(0x9f3)!==_0x3ea6a6(0x9f3)){const _0x9a2c9d=new _0x1d7e0();this[_0x3ea6a6(0x289)][_0x3ea6a6(0x9fd)](_0x9a2c9d),_0x9a2c9d[_0x3ea6a6(0x149)](_0xc7aad6);}else{if(this[_0x3ea6a6(0x427)]['some'](_0x9c0f3a=>_0x9c0f3a[_0x3ea6a6(0x441)]()&&_0x9c0f3a['isMagical']()))return!![];}}else{if(this[_0x3ea6a6(0x427)]['some'](_0x440e37=>_0x440e37[_0x3ea6a6(0x441)]()&&_0x440e37[_0x3ea6a6(0x204)]())){if(_0x3ea6a6(0x2bf)===_0x3ea6a6(0x2bf))return!![];else _0xbc990[_0x3ea6a6(0x710)][_0x3ea6a6(0x3b5)][_0x3ea6a6(0x701)](this),_0x596a4a['BattleCore'][_0x3ea6a6(0x326)][_0x3ea6a6(0xa8e)][_0x3ea6a6(0x162)]&&this[_0x3ea6a6(0x8a7)]();}}}if(BattleManager['isTpb']()&&this['_tpbState']===_0x3ea6a6(0x443)){if(this[_0x3ea6a6(0x4a3)]())return this[_0x3ea6a6(0x2de)]()&&this[_0x3ea6a6(0x2de)]()[_0x3ea6a6(0x441)]()&&this[_0x3ea6a6(0x2de)]()[_0x3ea6a6(0xa41)]();else{if(_0x3ea6a6(0x75b)!==_0x3ea6a6(0x75b)){if(!this['item']())return _0x480408;const _0x243c74=this[_0x3ea6a6(0x441)]()[_0x3ea6a6(0x80a)];return _0x243c74[_0x3ea6a6(0xb51)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x37404d[_0x3ea6a6(0x828)](this[_0x3ea6a6(0x652)]()),_0x264952;}else return this[_0x3ea6a6(0x2de)]()&&this[_0x3ea6a6(0x2de)]()[_0x3ea6a6(0x441)]()&&this['currentAction']()[_0x3ea6a6(0x204)]();}}return![];},Game_Battler['prototype'][_0x5d4113(0xb92)]=function(){const _0x17d8d1=_0x5d4113;if(BattleManager[_0x17d8d1(0x5fd)]()&&this[_0x17d8d1(0x803)]==='casting')return this[_0x17d8d1(0x4a3)]()?this[_0x17d8d1(0x2de)]()&&this[_0x17d8d1(0x2de)]()[_0x17d8d1(0x441)]()&&!this[_0x17d8d1(0x2de)]()[_0x17d8d1(0xa41)]():this[_0x17d8d1(0x2de)]()&&this[_0x17d8d1(0x2de)]()[_0x17d8d1(0x441)]()&&!this[_0x17d8d1(0x2de)]()[_0x17d8d1(0x204)]();return![];},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x3d3)]=Game_Battler[_0x5d4113(0x44d)]['clearDamagePopup'],Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x605)]=function(){const _0x3c55a6=_0x5d4113;VisuMZ[_0x3c55a6(0x710)][_0x3c55a6(0x3d3)]['call'](this),this[_0x3c55a6(0x76b)]=[];},Game_Battler['prototype'][_0x5d4113(0xa30)]=function(){const _0x537ed1=_0x5d4113;if(!this[_0x537ed1(0x76b)])this[_0x537ed1(0x605)]();return this['_damagePopupArray']['length']>0x0;},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x77e)]=function(){const _0x45efc5=_0x5d4113;if(!SceneManager['isSceneBattle']())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this['_damagePopupArray'])this['clearDamagePopup']();this[_0x45efc5(0xc96)]();const _0x3f7b8b=this[_0x45efc5(0x3ee)]();if(_0x3f7b8b)_0x3f7b8b[_0x45efc5(0x196)]();},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0xc96)]=function(){const _0x1323fc=_0x5d4113,_0x2e4c26=this[_0x1323fc(0x47b)]();if(_0x2e4c26[_0x1323fc(0x40d)]||_0x2e4c26[_0x1323fc(0x6c9)]){const _0x40c446=JsonEx[_0x1323fc(0xca0)](_0x2e4c26);_0x40c446[_0x1323fc(0x375)]=![],_0x40c446[_0x1323fc(0x1c3)]=0x0,this[_0x1323fc(0x76b)]['push'](_0x40c446);}if(_0x2e4c26[_0x1323fc(0x375)]){const _0x26f715=JsonEx[_0x1323fc(0xca0)](_0x2e4c26);_0x26f715[_0x1323fc(0x40d)]=![],_0x26f715['evaded']=![],_0x26f715['mpDamage']=0x0,this['_damagePopupArray'][_0x1323fc(0x2ce)](_0x26f715);}if(_0x2e4c26[_0x1323fc(0x1c3)]!==0x0){const _0x45c465=JsonEx[_0x1323fc(0xca0)](_0x2e4c26);_0x45c465[_0x1323fc(0x40d)]=![],_0x45c465[_0x1323fc(0x6c9)]=![],_0x45c465['hpAffected']=![],this[_0x1323fc(0x76b)][_0x1323fc(0x2ce)](_0x45c465);}},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x86e)]=function(){const _0x43a141=_0x5d4113;if(!this[_0x43a141(0x76b)])this[_0x43a141(0x605)]();if(VisuMZ[_0x43a141(0x710)][_0x43a141(0x326)][_0x43a141(0x96d)][_0x43a141(0x491)]){if(_0x43a141(0x819)===_0x43a141(0x3cb))_0x3757b6+=_0x2e3cea;else return this['_damagePopupArray']['shift']();}else{if(_0x43a141(0xc94)!==_0x43a141(0x905))return this[_0x43a141(0x76b)][_0x43a141(0x2af)]();else _0x5d42a7[_0x43a141(0x710)][_0x43a141(0xc71)]['call'](this,_0x138589),this[_0x43a141(0x1d5)](_0x3ba2b6);}},Game_Battler[_0x5d4113(0x44d)]['setupTextPopup']=function(_0x4e1321,_0x5db8f9){const _0x5b13c0=_0x5d4113;if(!SceneManager[_0x5b13c0(0x2ab)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0x5b13c0(0x3ee)]())return;if(_0x4e1321[_0x5b13c0(0x7da)]<=0x0)return;_0x5db8f9=_0x5db8f9||{},_0x5db8f9[_0x5b13c0(0x776)]=_0x5db8f9['textColor']||'#ffffff',_0x5db8f9[_0x5b13c0(0x249)]=_0x5db8f9['flashColor']||[0x0,0x0,0x0,0x0],_0x5db8f9[_0x5b13c0(0x98d)]=_0x5db8f9[_0x5b13c0(0x98d)]||0x0,this[_0x5b13c0(0x3ee)]()[_0x5b13c0(0x749)](_0x4e1321,_0x5db8f9);},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0xb7e)]=function(_0x5a4510,_0x3f3eb9,_0x12c5f1){const _0x228af8=_0x5d4113;if(!SceneManager[_0x228af8(0x2ab)]())return;if(BattleManager[_0x228af8(0x6bf)]())return;if(!this[_0x228af8(0x3ee)]())return;if(_0x3f3eb9[_0x228af8(0x7da)]<=0x0)return;_0x12c5f1=_0x12c5f1||{},_0x12c5f1['textColor']=_0x12c5f1[_0x228af8(0x776)]||'#ffffff',_0x12c5f1[_0x228af8(0x249)]=_0x12c5f1['flashColor']||[0x0,0x0,0x0,0x0],_0x12c5f1['flashDuration']=_0x12c5f1[_0x228af8(0x98d)]||0x0,this[_0x228af8(0x3ee)]()['setupIconTextPopup'](_0x5a4510,_0x3f3eb9,_0x12c5f1);},Game_Battler['prototype'][_0x5d4113(0x184)]=function(){const _0x555386=_0x5d4113;if(this[_0x555386(0xc8d)]())return![];if(this[_0x555386(0x6ab)]()&&this[_0x555386(0x461)]())return!![];if(this['isEnemy']()&&this[_0x555386(0x73e)]()){if(this[_0x555386(0xa26)]()&&this['allowCollapse']())return![];}else{if(this[_0x555386(0xa26)]()){if(_0x555386(0x488)!==_0x555386(0x46a))return![];else _0x422ae0-=_0x45f1a5['mainSpriteHeight']();}}return!![];},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x663)]=Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0xae4)],Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0xae4)]=function(){const _0x2449a5=_0x5d4113;VisuMZ[_0x2449a5(0x710)][_0x2449a5(0x663)][_0x2449a5(0x701)](this),this[_0x2449a5(0xb69)]();},Game_Battler['prototype'][_0x5d4113(0x65d)]=function(){return!![];},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0xa80)]=function(){return![];},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x954)]=Game_Battler[_0x5d4113(0x44d)]['onBattleStart'],Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x208)]=function(_0x3423db){const _0x37e379=_0x5d4113;VisuMZ[_0x37e379(0x710)][_0x37e379(0x954)][_0x37e379(0x701)](this,_0x3423db),this[_0x37e379(0xc72)](_0x3423db),this['clearDamagePopup']();},Game_Battler[_0x5d4113(0x44d)]['onBattleStartBattleCore']=function(_0x26921f){const _0xf24d9d=_0x5d4113;this[_0xf24d9d(0x7f0)](![]),this['_forcedHomeX']=undefined,this[_0xf24d9d(0x52c)]=undefined;},VisuMZ['BattleCore'][_0x5d4113(0x366)]=Game_Battler['prototype'][_0x5d4113(0x1e8)],Game_Battler[_0x5d4113(0x44d)]['onBattleEnd']=function(){const _0x376655=_0x5d4113;VisuMZ[_0x376655(0x710)][_0x376655(0x366)][_0x376655(0x701)](this),this[_0x376655(0x356)]();},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x356)]=function(){const _0x337384=_0x5d4113;this[_0x337384(0x2ff)]=undefined,this[_0x337384(0x52c)]=undefined;},VisuMZ[_0x5d4113(0x710)]['Game_Battler_performActionStart']=Game_Battler['prototype'][_0x5d4113(0x68d)],Game_Battler['prototype']['performActionStart']=function(_0x587f7d){const _0x59f841=_0x5d4113;VisuMZ['BattleCore'][_0x59f841(0xaa2)]['call'](this,_0x587f7d);if(!_0x587f7d[_0x59f841(0xca1)]()){const _0x3c94b0=this[_0x59f841(0x3ee)]();if(_0x3c94b0){if(_0x59f841(0x852)!==_0x59f841(0x852)){const _0xbabd97=this[_0x59f841(0x441)](),_0x15602c=_0xbabd97[_0x59f841(0x769)][_0x59f841(0xaa7)];_0xbabd97[_0x59f841(0x769)][_0x59f841(0xaa7)]=this[_0x59f841(0xadc)];let _0x4722b6=_0x23ca5e['BattleCore'][_0x59f841(0x46b)][_0x59f841(0x701)](this,_0x36921d);return _0xbabd97[_0x59f841(0x769)][_0x59f841(0xaa7)]=_0x15602c,_0x4722b6;}else _0x3c94b0[_0x59f841(0x2f5)]();}}this[_0x59f841(0x7f0)](![]);},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0xaf5)]=function(){const _0x151b8=_0x5d4113,_0x4a4d87=this[_0x151b8(0x436)];this[_0x151b8(0x436)]=![];if(BattleManager[_0x151b8(0x629)]()&&this[_0x151b8(0x745)]()){if(_0x151b8(0x4db)!==_0x151b8(0x3d1)){const _0x31f98f=this[_0x151b8(0x3ee)]();if(_0x31f98f&&_0x4a4d87)_0x31f98f[_0x151b8(0x2f5)]();return;}else return _0x37f1e8['BattleCore']['Game_Action_isForOpponent']['call'](this);}const _0x42d70f=this[_0x151b8(0x3ee)]();if(_0x42d70f)_0x42d70f['stepBack']();this[_0x151b8(0x7f0)](![]),this[_0x151b8(0x578)]();},Game_Battler['prototype']['performActionMotions']=function(_0x3c9856){const _0x445e4a=_0x5d4113;if(_0x3c9856[_0x445e4a(0x7fc)]())this['performAttack']();else{if(_0x3c9856[_0x445e4a(0xca1)]())_0x445e4a(0x603)!==_0x445e4a(0x603)?this[_0x445e4a(0xbd4)](_0x45d566[_0x445e4a(0x95c)],0x0):this[_0x445e4a(0xb5c)](_0x445e4a(0x707));else{if(_0x3c9856[_0x445e4a(0xa41)]())_0x445e4a(0x248)===_0x445e4a(0x7a4)?(_0x29a1cc[_0x445e4a(0x710)][_0x445e4a(0x17e)][_0x445e4a(0x701)](this,_0x2b1d58,_0x1dc143),this[_0x445e4a(0xa6b)]()):this[_0x445e4a(0xb5c)](_0x445e4a(0x4a5));else{if(_0x3c9856[_0x445e4a(0x144)]())[0x1,0x2,0x5,0x6][_0x445e4a(0x4b0)](_0x3c9856[_0x445e4a(0x441)]()[_0x445e4a(0x769)][_0x445e4a(0x917)])?this[_0x445e4a(0xafd)]():this[_0x445e4a(0xb5c)](_0x445e4a(0x54a));else _0x3c9856['isItem']()&&this[_0x445e4a(0xb5c)](_0x445e4a(0x441));}}}},Game_Battler['prototype'][_0x5d4113(0x621)]=function(){return $dataSystem['attackMotions'][0x0];},Game_Battler['prototype'][_0x5d4113(0x775)]=function(){const _0x5cc5dc=_0x5d4113,_0x2f0ed6=this[_0x5cc5dc(0x621)]();return _0x2f0ed6?_0x2f0ed6[_0x5cc5dc(0x7de)]:0x0;},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x937)]=function(_0x298ad9){const _0x5b0d3b=_0x5d4113;if(!$gameSystem[_0x5b0d3b(0x9f8)]())return;const _0xb45e1c=this[_0x5b0d3b(0x3ee)](),_0x2cd9d4=_0x298ad9[_0x5b0d3b(0x3ee)]();if(!_0xb45e1c||!_0x2cd9d4)return;const _0x545bac=_0x2cd9d4['_baseX'],_0x57f359=_0x2cd9d4[_0x5b0d3b(0x559)];this['moveBattlerToPoint'](_0x545bac,_0x57f359,0x0,![],_0x5b0d3b(0x1ab),-0x1),_0xb45e1c[_0x5b0d3b(0xa88)]();const _0x1bbdfa=VisuMZ[_0x5b0d3b(0x710)][_0x5b0d3b(0x326)][_0x5b0d3b(0x998)];let _0x31b3f0=(_0x2cd9d4[_0x5b0d3b(0x61e)]+_0xb45e1c[_0x5b0d3b(0x61e)])/0x2;_0x31b3f0*=this[_0x5b0d3b(0xa65)]()?0x1:-0x1;let _0x6f33e5=_0x1bbdfa[_0x5b0d3b(0x952)]*(this[_0x5b0d3b(0xa65)]()?0x1:-0x1);_0x298ad9['moveBattlerDistance'](_0x31b3f0,_0x6f33e5,0x0,![],_0x5b0d3b(0x1ab)),_0x2cd9d4[_0x5b0d3b(0xa88)]();},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0xb5c)]=function(_0x2ef0eb){const _0x13ea55=_0x5d4113;if(SceneManager[_0x13ea55(0x2ab)]()){if('BTYnm'===_0x13ea55(0xc12)){const _0x1cfe57=new _0x1100e8();_0x1cfe57[_0x13ea55(0x432)]=_0x5138f3[_0x13ea55(0xc28)](_0x37de65[_0x13ea55(0x4da)]),_0x1cfe57['x']=_0x156f11[_0x13ea55(0xa5d)]||0x0,_0x1cfe57['y']=_0x3f6c2c[_0x13ea55(0x725)]||0x0,this[_0x13ea55(0x57e)](_0x1cfe57),this[_0x13ea55(0x594)]=_0x1cfe57;}else{const _0x528d38=this['battler']();_0x528d38&&(_0x528d38[_0x13ea55(0xa37)](_0x2ef0eb),['swing',_0x13ea55(0xb62),'missile']['includes'](_0x2ef0eb)&&this['performWeaponAnimation']());}}this[_0x13ea55(0xb69)]();},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x1e6)]=function(){},Game_Battler['prototype']['startWeaponAnimation']=function(_0x4ec8bd){const _0x2bb307=_0x5d4113;if(SceneManager['isSceneBattle']()){const _0x3f3053=this['battler']();if(_0x3f3053)_0x3f3053[_0x2bb307(0x49a)](_0x4ec8bd);}},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x9c6)]=function(){const _0x1577be=_0x5d4113;if(SceneManager['isSceneBattle']()){const _0x4f1eaa=this[_0x1577be(0x775)]();this[_0x1577be(0x528)](_0x4f1eaa);}},Game_Battler[_0x5d4113(0x44d)]['performCastAnimation']=function(_0x5f056f,_0x167930){const _0x3abee3=_0x5d4113;if(!_0x5f056f)return;if(!_0x5f056f[_0x3abee3(0x441)]())return;if(_0x5f056f['isAttack']())return;if(_0x5f056f[_0x3abee3(0xca1)]())return;if(_0x5f056f[_0x3abee3(0x880)]())return;let _0x2f2a99=0x0;const _0x4186fb=VisuMZ[_0x3abee3(0x710)][_0x3abee3(0x326)][_0x3abee3(0x998)],_0x47d25e=_0x5f056f[_0x3abee3(0x441)]()[_0x3abee3(0x80a)];if(_0x47d25e[_0x3abee3(0xb51)](/<CAST ANIMATION: (\d+)>/i))_0x3abee3(0x734)!==_0x3abee3(0x4eb)?_0x2f2a99=Number(RegExp['$1']):(this['_distortionSprite']=new _0x280133(),this[_0x3abee3(0x148)]['anchor']['x']=0.5,this['_distortionSprite'][_0x3abee3(0x636)]['y']=0.5,this[_0x3abee3(0x9fd)](this[_0x3abee3(0x148)]));else{if(_0x47d25e[_0x3abee3(0xb51)](/<NO CAST ANIMATION>/i)){if('khaDR'!==_0x3abee3(0x6c5)){if(!this['isFlipped']())return;this[_0x3abee3(0x518)][_0x3abee3(0x596)]['x']=-0x1,this[_0x3abee3(0x518)]['x']=this['_battleField']['width'],this[_0x3abee3(0x765)][_0x3abee3(0x596)]['x']=-0x1,this[_0x3abee3(0x765)]['x']=this[_0x3abee3(0x6e7)][_0x3abee3(0x61e)],this[_0x3abee3(0xac3)][_0x3abee3(0x596)]['x']=-0x1,this[_0x3abee3(0xac3)]['x']=this[_0x3abee3(0x6e7)][_0x3abee3(0x61e)],this[_0x3abee3(0x78d)]['scale']['x']=-0x1,this[_0x3abee3(0x78d)]['x']=this[_0x3abee3(0x6e7)]['x']+this['_battleField'][_0x3abee3(0x61e)];}else return;}else{if(_0x5f056f[_0x3abee3(0x225)]())_0x2f2a99=_0x4186fb[_0x3abee3(0xc95)];else{if(_0x5f056f[_0x3abee3(0x166)]())_0x2f2a99=_0x4186fb['CastPhysical'];else{if(_0x5f056f[_0x3abee3(0xa41)]()){if(_0x3abee3(0x8e9)!==_0x3abee3(0x8e9))return _0x45ffad[_0x3abee3(0x5a4)]['_spriteset'][_0x3abee3(0x67a)](_0x2ffe6f[0x0],_0x2b9c30[0x1]),!![];else _0x2f2a99=_0x4186fb['CastMagical'];}}}}}_0x2f2a99>0x0&&$gameTemp[_0x3abee3(0xbef)]([this],_0x2f2a99,!!_0x167930);},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x3eb)]=function(){const _0x4d6035=_0x5d4113;SoundManager[_0x4d6035(0x955)]();let _0x193d5b=VisuMZ[_0x4d6035(0x710)]['Settings'][_0x4d6035(0x998)][_0x4d6035(0x6a4)];_0x193d5b>0x0&&(Imported[_0x4d6035(0x567)]?$gameTemp[_0x4d6035(0x893)]([this],_0x193d5b):$gameTemp['requestAnimation']([this],_0x193d5b));},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x786)]=Game_Battler[_0x5d4113(0x44d)]['performDamage'],Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x353)]=function(){const _0x28cf63=_0x5d4113;VisuMZ[_0x28cf63(0x710)]['Game_Battler_performDamage'][_0x28cf63(0x701)](this),this[_0x28cf63(0xb86)](),this[_0x28cf63(0x949)]();},VisuMZ['BattleCore'][_0x5d4113(0x538)]=Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x5ca)],Game_Battler[_0x5d4113(0x44d)]['performMiss']=function(){const _0x5cb415=_0x5d4113;VisuMZ['BattleCore'][_0x5cb415(0x538)][_0x5cb415(0x701)](this),this[_0x5cb415(0xb86)]();},VisuMZ[_0x5d4113(0x710)]['Game_Battler_performEvasion']=Game_Battler['prototype']['performEvasion'],Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x2d3)]=function(){const _0x51e46e=_0x5d4113;VisuMZ['BattleCore'][_0x51e46e(0x618)]['call'](this),this[_0x51e46e(0xb86)]();},Game_Battler[_0x5d4113(0x44d)]['performFlinch']=function(){const _0x40053f=_0x5d4113;if(!$gameSystem[_0x40053f(0x9f8)]())return;if(this[_0x40053f(0x436)])return;this[_0x40053f(0x436)]=!![];const _0x4a8e1b=this[_0x40053f(0x3ee)]();if(_0x4a8e1b)_0x4a8e1b['stepFlinch']();},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x949)]=function(){const _0x3e8a16=_0x5d4113;if(!this[_0x3e8a16(0x65d)]())return;const _0x32299c=VisuMZ[_0x3e8a16(0x710)][_0x3e8a16(0x326)][_0x3e8a16(0xc03)];if(!(_0x32299c['ShakeFlinch']??![]))return;if(this[_0x3e8a16(0x5cc)]<=0x0)return;const _0x1d503b=this[_0x3e8a16(0x3ee)]();if(_0x1d503b){const _0x5b7b40=this[_0x3e8a16(0x5cc)],_0x3ea6aa=(_0x5b7b40/this[_0x3e8a16(0x4d3)])[_0x3e8a16(0xc0e)](0.8,0x1),_0x455799=_0x32299c[_0x3e8a16(0x9c2)]??0x30,_0x10e081=_0x3ea6aa*_0x455799;_0x1d503b[_0x3e8a16(0x646)](_0x10e081,_0x3ea6aa);}},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x578)]=function(){const _0x331881=_0x5d4113;if(this[_0x331881(0xa26)]()&&this[_0x331881(0x648)]!==_0x331881(0xb59)){if(_0x331881(0xb63)===_0x331881(0xb63)){this[_0x331881(0xb5c)]('dead');return;}else return _0x114ce2[_0x331881(0x567)]?_0x1f4ade['getInputButtonString'](_0x331881(0x4cd)):_0x487324[_0x331881(0x710)][_0x331881(0x326)][_0x331881(0x9e5)][_0x331881(0x420)];}if(this[_0x331881(0xa26)]()&&this[_0x331881(0x648)]===_0x331881(0xb59))return;if(!!this[_0x331881(0x9e2)])return;if(this[_0x331881(0xb88)]()){if(_0x331881(0x9dd)!==_0x331881(0x9dd)){this[_0x331881(0xb18)](_0x58e381)[_0x331881(0xb51)](/\\I\[(\d+)\]/i);const _0x511e5b=_0x40ec4d(_0x2189cb['$1'])||0x0,_0x7e9fd0=this[_0x331881(0x98e)](_0x20bca5),_0x4e2477=_0x7e9fd0['x']+_0x22de40[_0x331881(0xa63)]((_0x7e9fd0[_0x331881(0x61e)]-_0x1f47c0[_0x331881(0x706)])/0x2),_0x59f2c4=_0x7e9fd0['y']+(_0x7e9fd0[_0x331881(0x6ce)]-_0x539ffa[_0x331881(0xa92)])/0x2;this[_0x331881(0xa60)](_0x511e5b,_0x4e2477,_0x59f2c4);}else{if(!this[_0x331881(0x2b0)]()&&this!==BattleManager[_0x331881(0x932)]){if(this['battler']())this[_0x331881(0x3ee)]()['refreshMotion']();}this[_0x331881(0xb69)]();return;}}if(this[_0x331881(0x648)]===_0x331881(0x47e))return;if(this[_0x331881(0x648)]===_0x331881(0x382)&&!BattleManager[_0x331881(0x745)]())return;if(this['_motionType']===_0x331881(0x707)&&!BattleManager[_0x331881(0x745)]())return;this[_0x331881(0xae4)]();if(this[_0x331881(0x3ee)]()&&BattleManager[_0x331881(0x745)]()){if(_0x331881(0x9f2)===_0x331881(0x56f)){const _0x40eae7=this[_0x331881(0x436)];this[_0x331881(0x436)]=![];if(_0x10f9d9['isActiveTpb']()&&this[_0x331881(0x745)]()){const _0x5406f9=this[_0x331881(0x3ee)]();if(_0x5406f9&&_0x40eae7)_0x5406f9[_0x331881(0x2f5)]();return;}const _0x26a376=this[_0x331881(0x3ee)]();if(_0x26a376)_0x26a376['stepBack']();this[_0x331881(0x7f0)](![]),this[_0x331881(0x578)]();}else{this[_0x331881(0x3ee)]()[_0x331881(0x221)](),this[_0x331881(0xb69)]();return;}}},Game_Enemy[_0x5d4113(0x44d)]['isDuringNonLoopingMotion']=function(){const _0x5ac056=_0x5d4113;if(!this['hasSvBattler']())return![];const _0x5e621b=this[_0x5ac056(0x3ee)]();if(!_0x5e621b)return![];const _0x49cc30=_0x5e621b[_0x5ac056(0x1cf)];if(!_0x49cc30)return![];const _0x2c8102=_0x49cc30[_0x5ac056(0x32d)];return _0x2c8102&&!_0x2c8102[_0x5ac056(0x76c)];},Game_Battler['prototype'][_0x5d4113(0xb39)]=function(){const _0x1f86c0=_0x5d4113;return this[_0x1f86c0(0x778)];},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x7f0)]=function(_0x7642af){const _0x2396e6=_0x5d4113;if(!$gameSystem['isSideView']())return;this[_0x2396e6(0x778)]=_0x7642af;const _0x5f2411=this['battler']();if(_0x5f2411)_0x5f2411[_0x2396e6(0x1a1)]();},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0xa42)]=function(_0x302f1e,_0x2e0e90,_0x276002){const _0x581e2b=_0x5d4113;if(!$gameSystem[_0x581e2b(0x9f8)]())return;const _0x4a7461=this[_0x581e2b(0x3ee)]();if(!_0x4a7461)return;if(_0x302f1e===_0x4a7461[_0x581e2b(0x8bf)])return;let _0x5164df=![];if(this[_0x581e2b(0xa65)]()){if('gpaLH'===_0x581e2b(0x7d2)){const _0x13cd91=this[_0x581e2b(0x3ee)]();if(_0x13cd91&&_0x417018)_0x13cd91[_0x581e2b(0x2f5)]();return;}else{if(_0x302f1e>_0x4a7461['_baseX'])_0x5164df=!![];if(_0x302f1e<_0x4a7461[_0x581e2b(0x8bf)])_0x5164df=![];}}else{if(this[_0x581e2b(0xb88)]()){if(_0x581e2b(0x381)!==_0x581e2b(0x381))this['startMotion'](_0x581e2b(0x707));else{if(_0x302f1e>_0x4a7461['_baseX'])_0x5164df=![];if(_0x302f1e<_0x4a7461[_0x581e2b(0x8bf)])_0x5164df=!![];}}};this[_0x581e2b(0x7f0)](_0x276002?!_0x5164df:_0x5164df),_0x4a7461[_0x581e2b(0x1a1)]();},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x680)]=function(_0x106f90,_0x55adbb,_0x33998e,_0x77abda,_0x498c3e){const _0x57b54a=_0x5d4113;if(!$gameSystem[_0x57b54a(0x9f8)]())return;const _0x6930c5=this['battler']();if(!_0x6930c5)return;if(_0x77abda)this[_0x57b54a(0xa42)](_0x106f90+_0x6930c5['_baseX'],_0x55adbb+_0x6930c5[_0x57b54a(0x559)],![]);_0x106f90+=_0x6930c5[_0x57b54a(0x8bf)]-_0x6930c5[_0x57b54a(0x64f)],_0x55adbb+=_0x6930c5[_0x57b54a(0x559)]-_0x6930c5[_0x57b54a(0x52f)],_0x6930c5['startMove'](_0x106f90,_0x55adbb,_0x33998e);if(Imported[_0x57b54a(0x567)])_0x6930c5[_0x57b54a(0x724)](_0x498c3e||_0x57b54a(0x1ab));},Game_Battler[_0x5d4113(0x44d)]['moveBattlerToPoint']=function(_0x365bbe,_0xd15b0e,_0x279cc1,_0x5d4f3a,_0x221f4e,_0xaaa1b2){const _0x379073=_0x5d4113;if(!$gameSystem[_0x379073(0x9f8)]())return;const _0x4dec1d=this[_0x379073(0x3ee)]();if(!_0x4dec1d)return;if(_0x365bbe===Infinity||_0xd15b0e===Infinity)return;if(isNaN(_0x365bbe)||isNaN(_0xd15b0e))return;_0xaaa1b2=_0xaaa1b2||0x0;if(_0xaaa1b2>0x0){if(_0x4dec1d['_baseX']>_0x365bbe)_0x365bbe+=_0x4dec1d['width']/0x2+_0xaaa1b2;if(_0x4dec1d[_0x379073(0x8bf)]<_0x365bbe)_0x365bbe-=_0x4dec1d[_0x379073(0x61e)]/0x2+_0xaaa1b2;}if(_0x5d4f3a)this[_0x379073(0xa42)](_0x365bbe,_0xd15b0e,![]);_0x365bbe-=_0x4dec1d[_0x379073(0x64f)],_0xd15b0e-=_0x4dec1d[_0x379073(0x52f)],_0x4dec1d[_0x379073(0x873)](_0x365bbe,_0xd15b0e,_0x279cc1);if(Imported[_0x379073(0x567)])_0x4dec1d[_0x379073(0x724)](_0x221f4e||_0x379073(0x1ab));},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0xa3b)]=function(_0xa05ad4,_0x42d140,_0x1b3f8f,_0x47a380,_0xec5d63){const _0x2ff2b4=_0x5d4113;if(!$gameSystem[_0x2ff2b4(0x9f8)]())return;const _0x2828b8=this[_0x2ff2b4(0x3ee)]();if(!_0x2828b8)return;if(_0x47a380)this['setBattlerFacePoint'](_0xa05ad4+_0x2828b8[_0x2ff2b4(0x8bf)],_0x42d140+_0x2828b8[_0x2ff2b4(0x559)],![]);_0xa05ad4+=_0x2828b8[_0x2ff2b4(0x64f)],_0x42d140+=_0x2828b8[_0x2ff2b4(0x52f)],_0x2828b8['startHomeMove'](_0xa05ad4,_0x42d140,_0x1b3f8f,_0xec5d63),this[_0x2ff2b4(0x2ff)]=_0xa05ad4,this[_0x2ff2b4(0x52c)]=_0x42d140;},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x44c)]=function(_0x466985,_0x477fdc,_0x35144e,_0x2244fb,_0x8ef7a0,_0x488799){const _0xaf4420=_0x5d4113;if(!$gameSystem['isSideView']())return;const _0x3ce775=this['battler']();if(!_0x3ce775)return;_0x488799=_0x488799||0x0;if(_0x488799>0x0){if(_0x3ce775[_0xaf4420(0x8bf)]>_0x466985)_0x466985+=_0x3ce775[_0xaf4420(0x61e)]/0x2+_0x488799;if(_0x3ce775[_0xaf4420(0x8bf)]<_0x466985)_0x466985-=_0x3ce775[_0xaf4420(0x61e)]/0x2+_0x488799;}if(_0x2244fb)this[_0xaf4420(0xa42)](_0x466985,_0x477fdc,![]);_0x3ce775['startHomeMove'](_0x466985,_0x477fdc,_0x35144e,_0x8ef7a0),this[_0xaf4420(0x2ff)]=_0x466985,this[_0xaf4420(0x52c)]=_0x477fdc;},Game_Battler[_0x5d4113(0x44d)]['floatBattler']=function(_0x44f781,_0x1abf8d,_0x7f59c8){const _0x2dc339=_0x5d4113;if(!$gameSystem[_0x2dc339(0x9f8)]())return;const _0x20405a=this[_0x2dc339(0x3ee)]();if(!_0x20405a)return;_0x20405a[_0x2dc339(0x838)](_0x44f781,_0x1abf8d,_0x7f59c8);},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x3e8)]=function(_0x3d5b5a,_0x983f04){const _0x3e47b0=_0x5d4113;if(!$gameSystem[_0x3e47b0(0x9f8)]())return;const _0x3268ef=this[_0x3e47b0(0x3ee)]();if(!_0x3268ef)return;_0x3268ef['startJump'](_0x3d5b5a,_0x983f04);},Game_Battler[_0x5d4113(0x44d)]['spinBattler']=function(_0x119523,_0x1ff63f,_0xd0a527,_0x1ca127){const _0x5ee2b3=_0x5d4113;if(!$gameSystem[_0x5ee2b3(0x9f8)]())return;const _0x3fe97b=this[_0x5ee2b3(0x3ee)]();if(!_0x3fe97b)return;_0x3fe97b[_0x5ee2b3(0x5a3)](_0x119523,_0x1ff63f,_0xd0a527,_0x1ca127);},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x66d)]=function(_0x56f6fb,_0xaf08c7,_0x250c20,_0x3390fb){const _0x32825c=_0x5d4113;if(!$gameSystem[_0x32825c(0x9f8)]())return;const _0x4661bb=this['battler']();if(!_0x4661bb)return;this[_0x32825c(0xa65)]()&&(_0x56f6fb*=-0x1,_0xaf08c7*=-0x1),_0x4661bb[_0x32825c(0x83c)](_0x56f6fb,_0xaf08c7,_0x250c20,_0x3390fb);},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x5f4)]=function(_0x49c4c7,_0x47c439,_0x3e00e4,_0x4189c3){const _0x25a986=_0x5d4113;if(!$gameSystem[_0x25a986(0x9f8)]())return;const _0x13dac2=this[_0x25a986(0x3ee)]();if(!_0x13dac2)return;_0x13dac2[_0x25a986(0x761)](_0x49c4c7,_0x47c439,_0x3e00e4,_0x4189c3);},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x830)]=function(_0xaba40,_0x148113,_0x80eb7){const _0xe729cf=_0x5d4113;if(!$gameSystem['isSideView']())return;const _0x2d7cb2=this['battler']();if(!_0x2d7cb2)return;_0x2d7cb2[_0xe729cf(0xab0)](_0xaba40,_0x148113,_0x80eb7);},Game_Battler[_0x5d4113(0x44d)]['clearFreezeMotion']=function(){const _0x5f340e=_0x5d4113,_0x174c1e=!!this[_0x5f340e(0x9e2)];this['_freezeMotionData']=undefined;if(_0x174c1e){if(_0x5f340e(0x41d)===_0x5f340e(0x303)){const _0x351b4c=_0x446dfe[_0x5f340e(0x13e)](this[_0x5f340e(0xb7a)]),_0x2b10cf=_0x53067b['DamageStyles'][_0x351b4c];if(!_0x2b10cf)return this[_0x5f340e(0x62e)]();return _0x2b10cf[_0x5f340e(0x8f3)][_0x5f340e(0x701)](this);}else this[_0x5f340e(0x578)](),this[_0x5f340e(0xae7)]();}},Game_Battler[_0x5d4113(0x44d)]['clearFreezeMotionForWeapons']=function(){const _0x3c3892=_0x5d4113;if(!SceneManager[_0x3c3892(0x2ab)]())return;const _0x2a2653=this[_0x3c3892(0x3ee)]();if(!_0x2a2653)return;let _0x422b2c=this['isActor']()?_0x2a2653[_0x3c3892(0xc6c)]:_0x2a2653[_0x3c3892(0x1cf)][_0x3c3892(0xc6c)];_0x422b2c&&_0x422b2c[_0x3c3892(0xbd4)](0x0);},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0xad7)]=function(_0xce05f4,_0x315895,_0x354cc1){const _0x26fc8c=_0x5d4113;if(this[_0x26fc8c(0xb88)]()&&!this[_0x26fc8c(0x73e)]())return;let _0x41fc3a=0x0,_0x2388eb=0x0;_0xce05f4[_0x26fc8c(0xb51)](/ATTACK[ ](\d+)/i)&&(_0x26fc8c(0x6f9)===_0x26fc8c(0x48a)?(_0x31a508('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'['format'](_0x11ba6c,_0x332547)),_0x3dec74[_0x26fc8c(0x3e4)]()):(_0x2388eb=Number(RegExp['$1']),_0x2388eb--));if(this[_0x26fc8c(0xa65)]()){const _0x71f01e=this[_0x26fc8c(0xa77)]();_0x41fc3a=_0x71f01e[_0x2388eb]?_0x71f01e[_0x2388eb][_0x26fc8c(0xaec)]:0x0;}else this[_0x26fc8c(0xb88)]()&&(_0x26fc8c(0x325)==='ToGwu'?(_0x26e91d+=_0x4b0ae6['isActor']()?-_0x563ca0:_0xde3ae8,_0x2fdc9d+=_0x194e32[_0x26fc8c(0xa65)]()?-_0x38137c:_0x429ad1):_0x41fc3a=this[_0x26fc8c(0x514)]()[_0x26fc8c(0xaec)]||0x0);const _0x28509b=$dataSystem[_0x26fc8c(0xc27)][_0x41fc3a];if(_0xce05f4[_0x26fc8c(0xb51)](/attack/i)){if(_0x26fc8c(0x259)!=='fANIT')_0xce05f4=[_0x26fc8c(0xb62),_0x26fc8c(0xb45),'missile'][_0x28509b[_0x26fc8c(0x917)]]||_0x26fc8c(0xb45);else{const _0x24740e=_0x538354[_0x26fc8c(0x710)]['Settings']['BattleLayout'],_0x38f1cc=_0x538df6[_0x26fc8c(0x44d)][_0x26fc8c(0xbe9)](),_0x1c50b0=_0x37bad9[_0x26fc8c(0xbb8)]-(_0x24740e[_0x26fc8c(0x666)]||0xc0),_0x8e0a2e=this[_0x26fc8c(0x8da)]()+_0x38f1cc,_0x597286=this[_0x26fc8c(0x78e)]()?0x0:_0x1cc320[_0x26fc8c(0xbb8)]-_0x1c50b0,_0x4f7a10=_0x388f93[_0x26fc8c(0x75f)]-_0x8e0a2e+_0x38f1cc;return new _0x476986(_0x597286,_0x4f7a10,_0x1c50b0,_0x8e0a2e);}}this['_freezeMotionData']={'motionType':_0xce05f4,'weaponImageId':_0x315895?_0x28509b[_0x26fc8c(0x7de)]:0x0,'pattern':_0x354cc1};},Game_Battler['prototype'][_0x5d4113(0x974)]=function(_0x33377d){const _0x1be17f=_0x5d4113;if(!_0x33377d)return![];return _0x33377d['friendsUnit']()===this[_0x1be17f(0x7a6)]();},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x3c8)]=function(_0x1fa602){const _0x8ebf08=_0x5d4113;if(!_0x1fa602)return![];return _0x1fa602[_0x8ebf08(0x759)]()===this[_0x8ebf08(0x7a6)]();},Game_Battler['prototype'][_0x5d4113(0x38d)]=function(){return![];},Game_Actor[_0x5d4113(0x44d)][_0x5d4113(0x38d)]=function(){const _0x1c2789=_0x5d4113;return this[_0x1c2789(0xa94)]()[_0x1c2789(0xb51)](/\$/i);},Game_Enemy['prototype']['hasStaticSvBattler']=function(){const _0x164ed0=_0x5d4113;return this['hasSvBattler']()&&this[_0x164ed0(0xa97)]()[_0x164ed0(0xb51)](/\$/i);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x6d2)]=Game_Actor[_0x5d4113(0x44d)]['setup'],Game_Actor[_0x5d4113(0x44d)][_0x5d4113(0xbd4)]=function(_0xe66531){const _0x344f01=_0x5d4113;VisuMZ[_0x344f01(0x710)]['Game_Actor_setup'][_0x344f01(0x701)](this,_0xe66531),this[_0x344f01(0x6e6)]();},Game_Actor[_0x5d4113(0x44d)]['initBattlePortrait']=function(){const _0x2a6950=_0x5d4113;this[_0x2a6950(0x62a)]='',this['actor']()&&this[_0x2a6950(0x80b)]()[_0x2a6950(0x80a)][_0x2a6950(0xb51)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x2a6950(0x62a)]=String(RegExp['$1']));},Game_Actor['prototype'][_0x5d4113(0x8d3)]=function(){const _0x28a772=_0x5d4113;if(this['getBattlePortrait']()!=='')return this['getBattlePortrait']();else{if(Imported[_0x28a772(0x4fe)]&&this[_0x28a772(0x150)]()!==''){if(_0x28a772(0x963)!==_0x28a772(0x963))_0x5845cf=_0x3632be[_0x28a772(0x545)](_0x1a9c92['ConvertActionSequenceTarget'](_0x37df16));else return this['getMenuImage']();}}return'';},Game_Actor[_0x5d4113(0x44d)][_0x5d4113(0x7a7)]=function(){const _0x383dbe=_0x5d4113;if(this[_0x383dbe(0x62a)]===undefined)this[_0x383dbe(0x6e6)]();return this[_0x383dbe(0x62a)];},Game_Actor[_0x5d4113(0x44d)][_0x5d4113(0xa71)]=function(_0x51b417){const _0x3fb4b2=_0x5d4113;if(this['_battlePortrait']===undefined)this['initBattlePortrait']();this[_0x3fb4b2(0x62a)]=_0x51b417;if(SceneManager[_0x3fb4b2(0x2ab)]()&&$gameParty[_0x3fb4b2(0xc0c)]()[_0x3fb4b2(0x4b0)](this)){if(_0x3fb4b2(0x3c2)===_0x3fb4b2(0x95f)){if(!_0x2f500e[_0x3fb4b2(0x2ab)]())return;if(!_0x1ea0b8[_0x3fb4b2(0xc30)])return;_0x18f78f[_0x3fb4b2(0xb3d)](_0x3b61b2,_0x82086b);const _0xef7453=_0x17130e['getLastPluginCommandInterpreter'](),_0x214a2f=_0x28bd4d[_0x3fb4b2(0x231)];if(!_0xef7453)return;_0x39ea58[_0x3fb4b2(0x753)](_0x2d8db9['SkewX'],_0x5cc50a[_0x3fb4b2(0x174)],_0x1517af[_0x3fb4b2(0x88b)],_0x58c292[_0x3fb4b2(0xc70)]);if(_0x214a2f)_0xef7453['setWaitMode']('battleSkew');}else{const _0x5d6889=SceneManager[_0x3fb4b2(0x5a4)][_0x3fb4b2(0x480)];_0x5d6889&&_0x5d6889[_0x3fb4b2(0x2f7)](this);}}},Game_Actor[_0x5d4113(0x44d)]['isSpriteVisible']=function(){return!![];},Game_Actor[_0x5d4113(0x44d)]['isAutoBattle']=function(){const _0x3e5808=_0x5d4113;if(!this['isConfused']()&&BattleManager[_0x3e5808(0xab3)])return!![];return Game_Battler['prototype'][_0x3e5808(0x45c)]['call'](this);},VisuMZ['BattleCore'][_0x5d4113(0x500)]=Game_Actor[_0x5d4113(0x44d)][_0x5d4113(0xae5)],Game_Actor[_0x5d4113(0x44d)][_0x5d4113(0xae5)]=function(){const _0x535cdf=_0x5d4113;if(BattleManager[_0x535cdf(0xab3)]&&!ConfigManager[_0x535cdf(0x53e)])return this[_0x535cdf(0x34e)]();else{if(_0x535cdf(0x19d)!==_0x535cdf(0x19d)){if(!_0x5b6f85[_0x535cdf(0x9f8)]())return;const _0x4e9b11=this[_0x535cdf(0x3ee)]();if(!_0x4e9b11)return;this[_0x535cdf(0xa65)]()&&(_0x258a33*=-0x1,_0x38da09*=-0x1),_0x4e9b11['startSkew'](_0x2d5bfc,_0x453709,_0x3ef623,_0x1c1d70);}else{return VisuMZ[_0x535cdf(0x710)][_0x535cdf(0x500)][_0x535cdf(0x701)](this);;}}},Game_Actor[_0x5d4113(0x44d)]['makeActionListAutoAttack']=function(){const _0x307a78=_0x5d4113,_0x4e1ad7=[],_0x254769=new Game_Action(this);return _0x254769[_0x307a78(0x290)](),_0x4e1ad7[_0x307a78(0x2ce)](_0x254769),_0x4e1ad7;},Game_Actor[_0x5d4113(0x44d)][_0x5d4113(0x6e4)]=function(){const _0x38acc5=_0x5d4113;if(this[_0x38acc5(0xac9)]()[_0x38acc5(0x80a)][_0x38acc5(0xb51)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i))return String(RegExp['$1'])['split'](/[\r\n]+/);else{if(_0x38acc5(0x316)!=='KehPB')return VisuMZ[_0x38acc5(0x710)]['Settings']['ActorCmd'][_0x38acc5(0x802)];else _0x841229=_0x5e14a9[_0x38acc5(0x475)]((_0x415e39,_0x6f5c3,_0x38198d)=>_0x38198d[_0x38acc5(0x6ef)](_0x415e39)===_0x6f5c3),_0x151c97[_0x38acc5(0x2ab)]()&&_0x596d2c[_0x38acc5(0x800)]()&&(_0x1a93e2=!_0x15a384),_0xccb179['BattleCore'][_0x38acc5(0xb8d)][_0x38acc5(0x701)](this,_0xcaa428,_0x129f63,_0x47dbc6),_0x2b1349['isSceneBattle']()&&_0x4e3740['_spriteset']['processAnimationRequests']();}},Game_Actor[_0x5d4113(0x44d)][_0x5d4113(0x773)]=function(){const _0x3470ce=_0x5d4113;if(this[_0x3470ce(0x437)][_0x3470ce(0xc68)]!==undefined)return this['_cache'][_0x3470ce(0xc68)];return this['actor']()[_0x3470ce(0x80a)][_0x3470ce(0xb51)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?_0x3470ce(0x1bd)!==_0x3470ce(0x1bd)?(this[_0x3470ce(0x143)][_0x3470ce(0xbd0)](),this['_itemWindow'][_0x3470ce(0xbd0)]()):(this[_0x3470ce(0x437)][_0x3470ce(0xc68)]=eval(RegExp['$1']),this[_0x3470ce(0x437)][_0x3470ce(0x517)]=eval(RegExp['$2'])):this[_0x3470ce(0x437)][_0x3470ce(0xc68)]=Game_Battler[_0x3470ce(0x44d)][_0x3470ce(0x773)][_0x3470ce(0x701)](this),this[_0x3470ce(0x437)][_0x3470ce(0xc68)];},Game_Actor[_0x5d4113(0x44d)][_0x5d4113(0x1ba)]=function(){const _0xcbb029=_0x5d4113;if(this[_0xcbb029(0x437)][_0xcbb029(0x517)]!==undefined)return this[_0xcbb029(0x437)][_0xcbb029(0x517)];if(this[_0xcbb029(0x80b)]()['note']['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if(_0xcbb029(0x729)!==_0xcbb029(0x451))this[_0xcbb029(0x437)]['svAnchorX']=eval(RegExp['$1']),this[_0xcbb029(0x437)]['svAnchorY']=eval(RegExp['$2']);else{if(!_0x1f4a44[_0xcbb029(0x166)]())return![];if(!_0x201001[_0xcbb029(0xa8b)]())return![];if(!_0x44c0d4[_0xcbb029(0x836)]())return![];return _0x2f4c37[_0xcbb029(0x710)]['Settings'][_0xcbb029(0x998)][_0xcbb029(0x3e2)];}}else{if(_0xcbb029(0x73b)===_0xcbb029(0x47a)){if(_0x42f5a8[_0xcbb029(0x710)][_0xcbb029(0x326)][_0xcbb029(0x96d)][_0xcbb029(0xa49)]??!![])return![];return _0x2f99a9[_0xcbb029(0x2ab)]()&&this[_0xcbb029(0x561)];}else this[_0xcbb029(0x437)]['svAnchorY']=Game_Battler[_0xcbb029(0x44d)][_0xcbb029(0x1ba)][_0xcbb029(0x701)](this);}return this[_0xcbb029(0x437)][_0xcbb029(0x517)];},Game_Actor[_0x5d4113(0x44d)][_0x5d4113(0xbb1)]=function(){const _0x5846c1=_0x5d4113;if(this[_0x5846c1(0x437)]['svShadow']!==undefined)return this[_0x5846c1(0x437)]['svShadow'];if(this[_0x5846c1(0x80b)]()[_0x5846c1(0x80a)][_0x5846c1(0xb51)](/<SIDEVIEW SHOW SHADOW>/i))_0x5846c1(0x4f3)!=='jKFhu'?this[_0x5846c1(0x511)]=!![]:this['_cache']['svShadow']=!![];else{if(this[_0x5846c1(0x80b)]()[_0x5846c1(0x80a)]['match'](/<SIDEVIEW HIDE SHADOW>/i)){if(_0x5846c1(0x9f4)===_0x5846c1(0x829))return this[_0x5846c1(0x860)](_0x3e3196);else this['_cache'][_0x5846c1(0x3d5)]=![];}else this['_cache'][_0x5846c1(0x3d5)]=Game_Battler[_0x5846c1(0x44d)][_0x5846c1(0xbb1)][_0x5846c1(0x701)](this);}return this['_cache']['svShadow'];},Game_Actor[_0x5d4113(0x44d)][_0x5d4113(0x9be)]=function(){const _0x3e00e2=_0x5d4113;return VisuMZ['BattleCore'][_0x3e00e2(0x326)]['Actor'][_0x3e00e2(0xaa6)];},Game_Actor[_0x5d4113(0x44d)][_0x5d4113(0x1e6)]=function(){const _0x279ee3=_0x5d4113,_0x4e2a38=this[_0x279ee3(0xa77)](),_0x10062b=_0x4e2a38[0x0]?_0x4e2a38[0x0]['wtypeId']:0x0,_0xf6d7ea=$dataSystem[_0x279ee3(0xc27)][_0x10062b];_0xf6d7ea&&this[_0x279ee3(0x528)](_0xf6d7ea['weaponImageId']);},Game_Actor[_0x5d4113(0x44d)]['performAction']=function(_0x10848d){const _0x4a857f=_0x5d4113;Game_Battler['prototype'][_0x4a857f(0xc78)]['call'](this,_0x10848d),this[_0x4a857f(0x4c7)](_0x10848d);},Game_Actor['prototype'][_0x5d4113(0x621)]=function(){const _0x36c8bb=_0x5d4113,_0x16a57f=this['weapons'](),_0x354edb=_0x16a57f[0x0]?_0x16a57f[0x0][_0x36c8bb(0xaec)]:0x0;return $dataSystem[_0x36c8bb(0xc27)][_0x354edb];},Game_Actor['prototype'][_0x5d4113(0x402)]=function(_0x43f44b){const _0x1368c5=_0x5d4113;_0x43f44b=_0x43f44b||0x1,_0x43f44b--;const _0x4e306c=this['weapons']();return _0x4e306c[_0x43f44b]?_0x4e306c[_0x43f44b][_0x1368c5(0xbed)]:0x0;},Game_Actor[_0x5d4113(0x44d)][_0x5d4113(0x58e)]=function(_0x5104e9){const _0x5f4be6=_0x5d4113;_0x5104e9=_0x5104e9||0x1,_0x5104e9--;const _0x356c18=this[_0x5f4be6(0xa77)](),_0x212656=_0x356c18[_0x5104e9]?_0x356c18[_0x5104e9]['wtypeId']:0x0;return $dataSystem[_0x5f4be6(0xc27)][_0x212656];},Game_Actor[_0x5d4113(0x44d)]['performAttackSlot']=function(_0x49a1c6){const _0x4f381b=_0x5d4113;_0x49a1c6=_0x49a1c6||0x1,_0x49a1c6--;const _0x3f75a6=this[_0x4f381b(0xa77)](),_0x1f21fd=_0x3f75a6[_0x49a1c6]?_0x3f75a6[_0x49a1c6]['wtypeId']:0x0,_0x30ff72=$dataSystem['attackMotions'][_0x1f21fd];if(_0x30ff72){if('XAAAV'===_0x4f381b(0x2ea)){if(_0x30ff72[_0x4f381b(0x917)]===0x0){if(_0x4f381b(0xade)===_0x4f381b(0xade))this[_0x4f381b(0xb5c)](_0x4f381b(0xb62));else{const _0x47d754=_0x3ca544[_0x3cb1d5];if(_0x47d754)_0x5694db[_0x4f381b(0x2ce)](_0xb8df68[_0x4f381b(0xca0)](_0x47d754));}}else{if(_0x30ff72[_0x4f381b(0x917)]===0x1)this[_0x4f381b(0xb5c)](_0x4f381b(0xb45));else _0x30ff72[_0x4f381b(0x917)]===0x2&&(_0x4f381b(0x423)==='oNmch'?this[_0x4f381b(0xb5c)](_0x4f381b(0x8eb)):_0x2b4b18[_0x4f381b(0x932)][_0x4f381b(0x1c1)]());}this[_0x4f381b(0x528)](_0x30ff72['weaponImageId']);}else{if(!_0x4908db[_0x4f381b(0x6b7)](_0x882b2d))return![];}}},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x546)]=function(_0x1c717b){const _0x215043=_0x5d4113;this[_0x215043(0x4d2)]=_0x1c717b||0x0,this['_cache']={};},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x3f6)]=function(){const _0x11dd8c=_0x5d4113;this[_0x11dd8c(0x4d2)]=this[_0x11dd8c(0x4d2)]||0x0,this[_0x11dd8c(0x4d2)]++,this[_0x11dd8c(0x437)]={};},Game_Battler[_0x5d4113(0x44d)][_0x5d4113(0x89a)]=function(){const _0x565257=_0x5d4113;this[_0x565257(0x4d2)]=undefined,this[_0x565257(0x437)]={};},VisuMZ['BattleCore'][_0x5d4113(0x6f3)]=Game_Actor[_0x5d4113(0x44d)][_0x5d4113(0xb1b)],Game_Actor[_0x5d4113(0x44d)]['equips']=function(){const _0x499105=_0x5d4113;let _0x1e6c13=VisuMZ['BattleCore'][_0x499105(0x6f3)][_0x499105(0x701)](this);if(this['_tempEquipCheck'])return _0x1e6c13;if(this[_0x499105(0x4d2)]!==undefined){if(_0x499105(0xa1e)!==_0x499105(0x1c6)){this['_tempEquipCheck']=!![];const _0x22e4dd=this[_0x499105(0x792)]();for(let _0x241167=0x0;_0x241167<_0x22e4dd[_0x499105(0x7da)];_0x241167++){_0x499105(0xa4f)!==_0x499105(0xa4f)?_0x2cdb92['BattleSystemSTB']['version']<1.15&&(_0x35053e(_0x3d3f6a['format'](_0x499105(0x8f2))),_0x234232[_0x499105(0x3e4)]()):_0x22e4dd[_0x241167]===0x1&&this[_0x499105(0x4d2)]!==_0x241167&&(_0x499105(0xab5)!=='ZKieI'?(_0x24cd8e[_0x499105(0x710)][_0x499105(0x71b)][_0x499105(0x701)](this),this[_0x499105(0x70f)]()):_0x1e6c13[_0x241167]=null);}this['_tempEquipCheck']=undefined;}else{if(!this[_0x499105(0x2d9)]())return![];return _0x1db085['BattleCore'][_0x499105(0xb6a)][_0x499105(0x701)](this);}}return _0x1e6c13;},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x6bc)]=function(_0x2b4da5){const _0x14c227=_0x5d4113;return _0x2b4da5['isActor']()?_0x2b4da5[_0x14c227(0xa77)]()[_0x14c227(0x7da)]||0x1:_0x14c227(0x237)===_0x14c227(0xb1f)?!![]:0x1;},Window_BattleLog['prototype'][_0x5d4113(0x396)]=function(_0x5cbb81,_0x286014){const _0x28f6f3=_0x5d4113;_0x5cbb81&&_0x5cbb81[_0x28f6f3(0xa65)]()&&_0x5cbb81[_0x28f6f3(0x546)](_0x286014),this[_0x28f6f3(0xa6b)]();},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0xbf7)]=function(_0x30488f){const _0x8b61e2=_0x5d4113;_0x30488f&&_0x30488f[_0x8b61e2(0xa65)]()&&_0x30488f[_0x8b61e2(0x89a)](),this['callNextMethod']();},Game_Actor[_0x5d4113(0x44d)]['battleUIOffsetX']=function(){const _0x7c7148=_0x5d4113;let _0x21a383='battleUIOffsetX';if(this[_0x7c7148(0xca2)](_0x21a383))return this[_0x7c7148(0x437)][_0x21a383];return this['_cache'][_0x21a383]=this[_0x7c7148(0x27a)](this[_0x7c7148(0x80b)]()),this['_cache'][_0x21a383];},Game_Actor[_0x5d4113(0x44d)][_0x5d4113(0x938)]=function(){const _0x4e1728=_0x5d4113;let _0x207abb=_0x4e1728(0x938);if(this[_0x4e1728(0xca2)](_0x207abb))return this[_0x4e1728(0x437)][_0x207abb];return this[_0x4e1728(0x437)][_0x207abb]=this[_0x4e1728(0x35a)](this[_0x4e1728(0x80b)]()),this[_0x4e1728(0x437)][_0x207abb];},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x789)]=Game_Enemy[_0x5d4113(0x44d)][_0x5d4113(0xbd4)],Game_Enemy['prototype']['setup']=function(_0x406880,_0xe5208a,_0x5c6236){const _0x33f2ae=_0x5d4113;_0x406880=DataManager[_0x33f2ae(0x2cd)](_0x406880),VisuMZ[_0x33f2ae(0x710)][_0x33f2ae(0x789)][_0x33f2ae(0x701)](this,_0x406880,_0xe5208a,_0x5c6236),Imported[_0x33f2ae(0x22e)]&&this['initElementStatusCore'](),this['clearBattleCoreData'](),this['setupBattleCoreData'](),Imported[_0x33f2ae(0x22e)]&&this[_0x33f2ae(0x21d)]();},Game_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x57b)]=function(){const _0x111658=_0x5d4113,_0x1ab0f6=VisuMZ[_0x111658(0x710)][_0x111658(0x326)][_0x111658(0x194)];this[_0x111658(0x693)]=_0x1ab0f6['AttackAnimation'],this[_0x111658(0xb27)]={};},Game_Enemy['prototype'][_0x5d4113(0xbcb)]=function(){const _0x3f27c2=_0x5d4113,_0x2b930d=VisuMZ[_0x3f27c2(0x710)][_0x3f27c2(0x326)][_0x3f27c2(0x194)],_0x5773b2=this[_0x3f27c2(0x258)]()['note'];this['_svBattlerData']={'name':'','wtypeId':_0x2b930d[_0x3f27c2(0x4af)],'collapse':_0x2b930d[_0x3f27c2(0x340)],'motionIdle':_0x2b930d['MotionIdle'],'width':_0x2b930d['Width']||0x40,'height':_0x2b930d['Height']||0x40,'anchorX':_0x2b930d[_0x3f27c2(0xc47)]||0x0,'anchorY':_0x2b930d[_0x3f27c2(0xb28)]||0x0,'shadow':_0x2b930d[_0x3f27c2(0xaeb)]};_0x5773b2['match'](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x3f27c2(0x693)]=Number(RegExp['$1']));const _0x1a2c2b=this[_0x3f27c2(0xb27)];if(_0x5773b2[_0x3f27c2(0xb51)](/<SIDEVIEW BATTLER: (.*)>/i))_0x3f27c2(0x241)===_0x3f27c2(0xa34)?(_0x4f238d[_0x3f27c2(0x710)]['Game_Action_applyGlobal'][_0x3f27c2(0x701)](this),this[_0x3f27c2(0xbbd)](),this['resetResultSwitches']()):_0x1a2c2b['name']=String(RegExp['$1']);else{if(_0x5773b2[_0x3f27c2(0xb51)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){if(_0x3f27c2(0x8c2)==='wrmtS'){const _0x3e5951=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x3f27c2(0x828)]('');_0x1a2c2b['name']=DataManager['processRandomizedData'](_0x3e5951);}else _0x21f522+=_0x12edfa[_0x3f27c2(0x194)][_0x3f27c2(0x5cb)]||0x0,_0x42b63c+=_0x5c4da9['Enemy'][_0x3f27c2(0x191)]||0x0;}}_0x5773b2[_0x3f27c2(0xb51)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x1a2c2b[_0x3f27c2(0x3f0)]=eval(RegExp['$1']),_0x1a2c2b[_0x3f27c2(0x2d8)]=eval(RegExp['$2']));if(_0x5773b2[_0x3f27c2(0xb51)](/<SIDEVIEW COLLAPSE>/i))_0x1a2c2b[_0x3f27c2(0x8cf)]=!![];else{if(_0x5773b2['match'](/<SIDEVIEW NO COLLAPSE>/i)){if(_0x3f27c2(0x79f)===_0x3f27c2(0xa35)){const _0x596e6c=_0x305e9f[_0x3f27c2(0x6ef)](_0x209128[_0x3f27c2(0x6d1)]()['trim']());_0x596e6c>=0x0&&_0x596e6c<=0x7&&_0x235800[_0x3f27c2(0xabc)](_0x596e6c,_0x1c2c40);}else _0x1a2c2b[_0x3f27c2(0x8cf)]=![];}}if(_0x5773b2[_0x3f27c2(0xb51)](/<SIDEVIEW SHOW SHADOW>/i)){if(_0x3f27c2(0x29c)!==_0x3f27c2(0x29c)){const _0x578b8e=new _0xc13ab0(0x0,0x0,_0x413da3[_0x3f27c2(0x61e)],_0x41caa4[_0x3f27c2(0x6ce)]);this[_0x3f27c2(0x6b0)]=new _0x42829f(_0x578b8e),this[_0x3f27c2(0x6b0)][_0x3f27c2(0x380)]=0x0,this[_0x3f27c2(0x9fd)](this[_0x3f27c2(0x6b0)]),this[_0x3f27c2(0xc2f)]();}else _0x1a2c2b[_0x3f27c2(0x549)]=!![];}else _0x5773b2[_0x3f27c2(0xb51)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x1a2c2b[_0x3f27c2(0x549)]=![]);if(_0x5773b2['match'](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x1a2c2b[_0x3f27c2(0xc67)]=String(RegExp['$1'])[_0x3f27c2(0x172)]()[_0x3f27c2(0xacb)]();else{if(_0x5773b2[_0x3f27c2(0xb51)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){if(_0x3f27c2(0x1d1)===_0x3f27c2(0x1d1)){const _0x25a0a5=String(RegExp['$1'])[_0x3f27c2(0x3d8)](/[\r\n]+/)['remove']('');_0x1a2c2b[_0x3f27c2(0xc67)]=DataManager[_0x3f27c2(0x1dd)](_0x25a0a5);}else return _0x535fda['BattleCore'][_0x3f27c2(0x326)][_0x3f27c2(0x96d)][_0x3f27c2(0xa17)]['call'](this,_0x50db98,_0x448e0d);}}_0x5773b2[_0x3f27c2(0xb51)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x3f27c2(0x29f)===_0x3f27c2(0x29f)?(_0x1a2c2b[_0x3f27c2(0x61e)]=Number(RegExp['$1']),_0x1a2c2b['height']=Number(RegExp['$2'])):(_0x598e12+=_0xf8ef54,_0x5bf9eb+=_0x145126['isActor']()?-_0x5ec2ae:_0x2be03d));if(_0x5773b2[_0x3f27c2(0xb51)](/<SIDEVIEW WEAPON: (.*)>/i))'QUooE'===_0x3f27c2(0xa45)?(_0x38c6f3+=_0x10a290,_0x5d0ad5+=_0x4440ad):_0x1a2c2b['wtypeId']=DataManager[_0x3f27c2(0x80c)](RegExp['$1']);else{if(_0x5773b2[_0x3f27c2(0xb51)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){if(_0x3f27c2(0x8cb)!==_0x3f27c2(0x7a2)){const _0x1dfa2d=String(RegExp['$1'])[_0x3f27c2(0x3d8)](/[\r\n]+/)[_0x3f27c2(0x828)](''),_0x7ebde6=DataManager['processRandomizedData'](_0x1dfa2d);_0x1a2c2b['wtypeId']=DataManager[_0x3f27c2(0x80c)](_0x7ebde6);}else return![];}}if(Imported[_0x3f27c2(0x22e)]){if(_0x3f27c2(0x4f6)!==_0x3f27c2(0x4f6))this[_0x3f27c2(0x33b)]();else{const _0x43fd77=this[_0x3f27c2(0x69d)]();for(const _0x46caba of _0x43fd77){const _0x43f6d9=this[_0x3f27c2(0xa2c)](_0x46caba)[_0x3f27c2(0x26b)]['toUpperCase']()[_0x3f27c2(0xacb)](),_0x35b3af=_0x46caba[_0x3f27c2(0x6d1)]()[_0x3f27c2(0xacb)]();if(_0x5773b2['match'](VisuMZ[_0x3f27c2(0x750)]['RegExp'][_0x3f27c2(0x63f)['format'](_0x35b3af,_0x43f6d9)]))_0x1a2c2b[_0x3f27c2(0x2c0)]=String(RegExp['$1']);else{if(_0x5773b2[_0x3f27c2(0xb51)](VisuMZ['ElementStatusCore']['RegExp'][_0x3f27c2(0x2c3)[_0x3f27c2(0x85d)](_0x35b3af,_0x43f6d9)])){if('SSTsP'!==_0x3f27c2(0x822)){const _0x1c588f=String(RegExp['$1'])[_0x3f27c2(0x3d8)](/[\r\n]+/)['remove']('');_0x1a2c2b[_0x3f27c2(0x2c0)]=DataManager[_0x3f27c2(0x1dd)](_0x1c588f);}else return _0x40d64e['setLastPluginCommandInterpreter'](this),_0x257a2a['BattleCore'][_0x3f27c2(0x14b)][_0x3f27c2(0x701)](this,_0x4ce22e);}}if(_0x5773b2['match'](VisuMZ['ElementStatusCore'][_0x3f27c2(0x283)][_0x3f27c2(0xc1d)['format'](_0x35b3af,_0x43f6d9)]))_0x1a2c2b['wtypeId']=DataManager[_0x3f27c2(0x80c)](RegExp['$1']);else{if(_0x5773b2['match'](VisuMZ[_0x3f27c2(0x750)][_0x3f27c2(0x283)]['SvWeaponMass-%1-%2'['format'](_0x35b3af,_0x43f6d9)])){const _0x7f9096=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x3f27c2(0x828)](''),_0x931baa=DataManager[_0x3f27c2(0x1dd)](_0x7f9096);_0x1a2c2b[_0x3f27c2(0xaec)]=DataManager[_0x3f27c2(0x80c)](_0x931baa);}}if(_0x5773b2[_0x3f27c2(0xb51)](VisuMZ[_0x3f27c2(0x750)][_0x3f27c2(0x283)]['SvMotionIdleSolo-%1-%2'[_0x3f27c2(0x85d)](_0x35b3af,_0x43f6d9)])){if(_0x3f27c2(0x66b)!=='qwmZV'){if(_0x449fa0)_0x21071a[_0x3f27c2(0x932)][_0x3f27c2(0x8fe)](![]);const _0x18f321=_0xf61bc4[0x0];_0x1192a3[_0x3f27c2(0x1e9)](_0x18f321,_0x164164);}else _0x1a2c2b[_0x3f27c2(0xc67)]=String(RegExp['$1'])[_0x3f27c2(0x172)]()[_0x3f27c2(0xacb)]();}else{if(_0x5773b2[_0x3f27c2(0xb51)](VisuMZ[_0x3f27c2(0x750)][_0x3f27c2(0x283)][_0x3f27c2(0x8dd)[_0x3f27c2(0x85d)](_0x35b3af,_0x43f6d9)])){const _0x4ce7aa=String(RegExp['$1'])[_0x3f27c2(0x3d8)](/[\r\n]+/)[_0x3f27c2(0x828)]('');_0x1a2c2b['motionIdle']=DataManager[_0x3f27c2(0x1dd)](_0x4ce7aa);}}}}}},Game_Enemy[_0x5d4113(0x44d)][_0x5d4113(0xa8d)]=function(){const _0x3c86dd=_0x5d4113;return this[_0x3c86dd(0x693)]||0x0;},Game_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x182)]=function(){const _0xb4d1d1=_0x5d4113;return this[_0xb4d1d1(0xa8d)]();},Game_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x402)]=function(_0x482731){const _0x492d76=_0x5d4113;return this[_0x492d76(0xa8d)]();},Game_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x65d)]=function(){const _0x102ca7=_0x5d4113;if(this[_0x102ca7(0x258)]()[_0x102ca7(0x80a)][_0x102ca7(0xb51)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x102ca7(0x44d)]['canBattlerMove']['call'](this);},Game_Enemy['prototype']['isBattlerGrounded']=function(){const _0x286b82=_0x5d4113;if(this[_0x286b82(0x258)]()[_0x286b82(0x80a)]['match'](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x5d4113(0x44d)][_0x5d4113(0xc8a)]=function(){const _0x4799be=_0x5d4113,_0x358a74=[];for(const _0x3c1c77 of this['enemy']()[_0x4799be(0x18f)]){if(_0x4799be(0x2ae)==='kcEIq'){const _0xef8b5b=$dataSkills[_0x3c1c77[_0x4799be(0xc8b)]];if(_0xef8b5b&&!_0x358a74[_0x4799be(0x4b0)](_0xef8b5b))_0x358a74[_0x4799be(0x2ce)](_0xef8b5b);}else{if(!_0x35e641)return![];if(!_0x4be5bf[_0x4799be(0x160)])return![];if(!_0x3f1801[_0x4799be(0x498)][0x0])return![];if(_0x2e73d9[_0x4799be(0x498)][0x0][_0x4799be(0xa65)]&&!_0x526c5a[_0x4799be(0x498)][0x0]['isActor']())return![];if(_0x1b6943[_0x4799be(0x9f8)]())return![];if(!this[_0x4799be(0x516)]())return![];if(_0x138683[_0x4799be(0x8ab)]===_0x1403bd){if(_0x34f3f8[_0x4799be(0x160)][_0x4799be(0x8f0)]!==0x0)return![];}else{if(_0x40e9ad['constructor']===_0x6c21b5){if(_0x1564e4[_0x4799be(0x160)][_0x4799be(0xa13)]===0x3)return![];}}return!![];const _0x3c258a=_0x1f9278['prototype']['battleLayoutStyle']();return['xp',_0x4799be(0x453)][_0x4799be(0x37c)](_0x3c258a);}}return _0x358a74;},Game_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x94e)]=function(){const _0x1b8700=_0x5d4113;let _0x41a050=_0x1b8700(0x94e);if(this['checkCacheKey'](_0x41a050))return this['_cache'][_0x41a050];return this['_cache'][_0x41a050]=this['createBattleUIOffsetX'](this[_0x1b8700(0x258)]()),this[_0x1b8700(0x437)][_0x41a050];},Game_Enemy['prototype'][_0x5d4113(0x938)]=function(){const _0x883afc=_0x5d4113;let _0x33a445='battleUIOffsetY';if(this[_0x883afc(0xca2)](_0x33a445))return this[_0x883afc(0x437)][_0x33a445];return this[_0x883afc(0x437)][_0x33a445]=this[_0x883afc(0x35a)](this[_0x883afc(0x258)]()),this[_0x883afc(0x437)][_0x33a445];},Game_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x514)]=function(){const _0x4540c7=_0x5d4113;if(this[_0x4540c7(0xb27)]!==undefined)return this['_svBattlerData'];return this['setupBattleCoreData'](),this['_svBattlerData'];},Game_Enemy[_0x5d4113(0x44d)]['hasSvBattler']=function(){const _0x5914f8=_0x5d4113;return this['svBattlerData']()[_0x5914f8(0x2c0)]!=='';},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xb74)]=Game_Enemy[_0x5d4113(0x44d)]['battlerName'],Game_Enemy[_0x5d4113(0x44d)]['battlerName']=function(){const _0x60fef2=_0x5d4113;if(this[_0x60fef2(0x73e)]())return'';return VisuMZ['BattleCore']['Game_Enemy_battlerName'][_0x60fef2(0x701)](this);},Game_Enemy[_0x5d4113(0x44d)][_0x5d4113(0xa97)]=function(){const _0x35906=_0x5d4113;return this[_0x35906(0x514)]()['name'];},Game_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x9be)]=function(){const _0x54c80a=_0x5d4113;if(this[_0x54c80a(0x73e)]())return VisuMZ[_0x54c80a(0x710)][_0x54c80a(0x326)][_0x54c80a(0xc03)][_0x54c80a(0xaa6)];else{if('vEpem'!==_0x54c80a(0x64d)){if(!_0xe04dd5)return;_0x15aa0d[_0x54c80a(0x6ee)]?_0x2a3237[_0x54c80a(0x44d)][_0x54c80a(0x5f5)][_0x54c80a(0x701)](this,_0xfa818c,_0x63b81e,_0x3613b3,_0x52b5f0,_0x398f67):_0x4e4281['prototype']['drawSkillCost']['call'](this,_0x62edef,_0x4515cb,_0x265a11,_0x1248eb);}else return VisuMZ[_0x54c80a(0x710)]['Settings'][_0x54c80a(0x194)][_0x54c80a(0xaa6)];}},Game_Enemy[_0x5d4113(0x44d)][_0x5d4113(0xc78)]=function(_0x2353b4){const _0x1f644a=_0x5d4113;Game_Battler[_0x1f644a(0x44d)][_0x1f644a(0xc78)][_0x1f644a(0x701)](this,_0x2353b4);if(this[_0x1f644a(0x73e)]())this[_0x1f644a(0x4c7)](_0x2353b4);},Game_Enemy[_0x5d4113(0x44d)][_0x5d4113(0xafd)]=function(){const _0x1b9805=_0x5d4113,_0x174c09=this[_0x1b9805(0x514)]()[_0x1b9805(0xaec)]||0x0,_0x13c8ed=$dataSystem[_0x1b9805(0xc27)][_0x174c09];if(_0x13c8ed){if('HXavJ'!==_0x1b9805(0xc3f)){if(_0x13c8ed[_0x1b9805(0x917)]===0x0)this['requestMotion']('thrust');else{if(_0x13c8ed['type']===0x1)this['requestMotion'](_0x1b9805(0xb45));else _0x13c8ed[_0x1b9805(0x917)]===0x2&&this[_0x1b9805(0xb5c)](_0x1b9805(0x8eb));}}else return _0x2aa279=_0x1b5f06[_0x1b9805(0x6d1)]()[_0x1b9805(0xacb)](),this[_0x1b9805(0xc75)]()===_0x54e054;}},Game_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x1e6)]=function(){const _0x12c6e1=_0x5d4113,_0x25bf68=this['svBattlerData']()[_0x12c6e1(0xaec)]||0x0,_0x482e09=$dataSystem[_0x12c6e1(0xc27)][_0x25bf68];if(_0x482e09){if(_0x12c6e1(0x543)!=='nVWiR')this[_0x12c6e1(0x528)](_0x482e09[_0x12c6e1(0x7de)]);else return this[_0x12c6e1(0x341)];}},Game_Enemy['prototype'][_0x5d4113(0x621)]=function(){const _0x552f1d=_0x5d4113,_0x591af2=this[_0x552f1d(0x514)]()['wtypeId']||0x0;return $dataSystem[_0x552f1d(0xc27)][_0x591af2];},Game_Enemy[_0x5d4113(0x44d)]['getAttackMotionSlot']=function(_0x302f70){const _0x3bd47b=_0x5d4113;return this[_0x3bd47b(0x621)]();},Game_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x353)]=function(){const _0x282ba4=_0x5d4113;Game_Battler[_0x282ba4(0x44d)][_0x282ba4(0x353)][_0x282ba4(0x701)](this),this[_0x282ba4(0xb20)]()&&this[_0x282ba4(0x73e)]()&&this[_0x282ba4(0xb5c)]('damage'),SoundManager[_0x282ba4(0x7bb)]();},Game_Enemy[_0x5d4113(0x44d)]['performEvasion']=function(){const _0x31589e=_0x5d4113;Game_Battler[_0x31589e(0x44d)][_0x31589e(0x2d3)][_0x31589e(0x701)](this),this[_0x31589e(0xb5c)](_0x31589e(0x8a6));},Game_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x49e)]=function(){const _0x3e0d01=_0x5d4113;Game_Battler[_0x3e0d01(0x44d)][_0x3e0d01(0x49e)][_0x3e0d01(0x701)](this),this[_0x3e0d01(0xb5c)]('evade');},Game_Enemy['prototype'][_0x5d4113(0x5fc)]=function(){const _0x1d7cce=_0x5d4113;Game_Battler[_0x1d7cce(0x44d)][_0x1d7cce(0x5fc)][_0x1d7cce(0x701)](this),this[_0x1d7cce(0xafd)]();},Game_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x889)]=function(){const _0x2cd06b=_0x5d4113;if(this[_0x2cd06b(0x73e)]()){if(this[_0x2cd06b(0xb8b)]()>=0x1)return!![];return this[_0x2cd06b(0x514)]()[_0x2cd06b(0x8cf)];}else{if('hhTYY'===_0x2cd06b(0xb93))return!![];else _0x97258[_0x2cd06b(0xa37)](_0x45e42a),[_0x2cd06b(0xb45),_0x2cd06b(0xb62),_0x2cd06b(0x8eb)]['includes'](_0x5a2668)&&this[_0x2cd06b(0x1e6)]();}},Game_Enemy[_0x5d4113(0x44d)]['svBattlerAnchorX']=function(){const _0x3ad458=_0x5d4113;return this[_0x3ad458(0x514)]()[_0x3ad458(0x3f0)];},Game_Enemy['prototype']['svBattlerAnchorY']=function(){const _0x46099b=_0x5d4113;return this[_0x46099b(0x514)]()[_0x46099b(0x2d8)];},Game_Enemy['prototype'][_0x5d4113(0xbb1)]=function(){const _0x2056bf=_0x5d4113;return this[_0x2056bf(0x514)]()[_0x2056bf(0x549)];},VisuMZ[_0x5d4113(0x710)]['Game_Enemy_transform']=Game_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x827)],Game_Enemy[_0x5d4113(0x44d)]['transform']=function(_0x2755ac){const _0x3f9157=_0x5d4113;VisuMZ[_0x3f9157(0x710)][_0x3f9157(0x55f)]['call'](this,_0x2755ac),this[_0x3f9157(0x57b)](),this['setupBattleCoreData']();const _0x51ac4a=this[_0x3f9157(0x3ee)]();_0x51ac4a&&(_0x51ac4a[_0x3f9157(0x8b7)]=undefined,_0x51ac4a[_0x3f9157(0x957)](this));},Game_Unit[_0x5d4113(0x44d)][_0x5d4113(0x890)]=function(_0x4f4e5e){const _0x508e88=_0x5d4113;for(const _0x2cd0ab of this['members']()){if(_0x508e88(0x9f5)==='WMLbz')(_0x470be2[_0x508e88(0x4df)]||_0x685a25[_0x508e88(0xc08)])&&_0xaa135e['snapForBackground']();else{if(_0x2cd0ab)_0x2cd0ab[_0x508e88(0x890)](_0x4f4e5e);}}},Game_Unit[_0x5d4113(0x44d)]['trueRandomTarget']=function(){const _0x26bf3b=_0x5d4113,_0x34d146=this[_0x26bf3b(0x331)]();return _0x34d146[Math[_0x26bf3b(0x96f)](_0x34d146[_0x26bf3b(0x7da)])];},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x53d)]=Game_Party[_0x5d4113(0x44d)][_0x5d4113(0x572)],Game_Party[_0x5d4113(0x44d)]['addActor']=function(_0x3239ac){const _0x117241=_0x5d4113;VisuMZ[_0x117241(0x710)]['Game_Party_addActor'][_0x117241(0x701)](this,_0x3239ac),BattleManager[_0x117241(0x5ce)]();},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x5b9)]=Game_Party['prototype'][_0x5d4113(0x79c)],Game_Party['prototype'][_0x5d4113(0x79c)]=function(_0x2e808f){const _0x39867f=_0x5d4113;VisuMZ[_0x39867f(0x710)]['Game_Party_removeActor'][_0x39867f(0x701)](this,_0x2e808f),BattleManager['refreshStatusWindow']();},VisuMZ[_0x5d4113(0x710)]['Game_Troop_setup']=Game_Troop['prototype'][_0x5d4113(0xbd4)],Game_Troop[_0x5d4113(0x44d)][_0x5d4113(0xbd4)]=function(_0x9f3191){const _0x4ae347=_0x5d4113;$gameTemp[_0x4ae347(0x20b)](),$gameTemp[_0x4ae347(0xa9e)](_0x9f3191),VisuMZ[_0x4ae347(0x710)][_0x4ae347(0x2cf)]['call'](this,_0x9f3191),this[_0x4ae347(0x6a8)]();},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x8b1)]=Game_Troop[_0x5d4113(0x44d)][_0x5d4113(0x708)],Game_Troop['prototype'][_0x5d4113(0x708)]=function(){const _0x4a8427=_0x5d4113;let _0x5d8c01=VisuMZ[_0x4a8427(0x710)]['Game_Troop_expTotal'][_0x4a8427(0x701)](this);return this[_0x4a8427(0x3ad)]&&(_0x5d8c01*=this[_0x4a8427(0x3ad)]()),Math[_0x4a8427(0x6aa)](_0x5d8c01);},Game_Troop['prototype'][_0x5d4113(0x3ad)]=function(){return 0x1;},Game_Troop[_0x5d4113(0x44d)][_0x5d4113(0x6a8)]=function(){const _0x8a7958=_0x5d4113,_0x1a1536=this[_0x8a7958(0x25a)]()[_0x8a7958(0x2c0)]||'';if(_0x1a1536['match'](/<(?:EXTEND|ADD):[ ](.*?)>/i)){if(_0x8a7958(0x2c9)==='YJRXU')_0x46feb8[_0x8a7958(0x710)][_0x8a7958(0x304)][_0x8a7958(0x701)](this),this[_0x8a7958(0xc52)]();else{const _0x1b42af=RegExp['$1'][_0x8a7958(0x3d8)](',')[_0x8a7958(0x390)](_0x546552=>Number(_0x546552));this[_0x8a7958(0x1df)](),this['processExtendTroopMembers'](_0x1b42af);}}},Game_Troop[_0x5d4113(0x44d)][_0x5d4113(0x1df)]=function(){const _0x5d7fb5=_0x5d4113;let _0x16c310=_0x5d7fb5(0xbbb)+'\x0a';_0x16c310+=_0x5d7fb5(0x16e);if(Imported['VisuMZ_2_BattleSystemBTB']){if(_0x5d7fb5(0x43a)===_0x5d7fb5(0x54b)){if(!_0x249d63['BattleCore']['JS'][_0x3cebee][_0x5d7fb5(0x701)](this,this[_0x5d7fb5(0x493)],_0xad9f45))return![];}else VisuMZ[_0x5d7fb5(0x658)][_0x5d7fb5(0xa2b)]<1.11&&(_0x5d7fb5(0x177)===_0x5d7fb5(0x350)?this[_0x5d7fb5(0x511)]=!![]:(alert(_0x16c310['format'](_0x5d7fb5(0x92b))),SceneManager[_0x5d7fb5(0x3e4)]()));}Imported[_0x5d7fb5(0x7f4)]&&(VisuMZ[_0x5d7fb5(0x2b3)][_0x5d7fb5(0xa2b)]<1.19&&(_0x5d7fb5(0x5ab)!=='BKtVt'?(_0x3bc172['BattleCore'][_0x5d7fb5(0x318)]['call'](this),this[_0x5d7fb5(0xa66)]=[]):(alert(_0x16c310[_0x5d7fb5(0x85d)](_0x5d7fb5(0x719))),SceneManager[_0x5d7fb5(0x3e4)]()))),Imported[_0x5d7fb5(0x55d)]&&(VisuMZ['BattleSystemSTB'][_0x5d7fb5(0xa2b)]<1.15&&(alert(_0x16c310[_0x5d7fb5(0x85d)]('STB')),SceneManager[_0x5d7fb5(0x3e4)]()));},Game_Troop[_0x5d4113(0x44d)][_0x5d4113(0x377)]=function(_0x51fabf){const _0x2306ac=_0x5d4113;this[_0x2306ac(0x5b7)]={};for(const _0x3cf4ad of this[_0x2306ac(0x738)]()){if(!_0x3cf4ad)continue;_0x3cf4ad[_0x2306ac(0x286)]('');}for(const _0xb816c8 of _0x51fabf){if(_0x2306ac(0x483)===_0x2306ac(0x483)){const _0x4466dc=$dataTroops[_0xb816c8];if(_0x4466dc)this[_0x2306ac(0xca3)](_0x4466dc);}else return _0x30a335[_0x2306ac(0x710)]['Scene_Battle_itemWindowRect'][_0x2306ac(0x701)](this);}this[_0x2306ac(0x843)]();},Game_Troop[_0x5d4113(0x44d)][_0x5d4113(0xca3)]=function(_0x59ea4e){const _0x2d50f6=_0x5d4113;for(const _0xf5ba4f of _0x59ea4e[_0x2d50f6(0x738)]){if($dataEnemies[_0xf5ba4f['enemyId']]){const _0x371bb0=_0xf5ba4f[_0x2d50f6(0xb41)],_0x3d5293=_0xf5ba4f['x'],_0x350868=_0xf5ba4f['y'],_0x2d4cff=new Game_Enemy(_0x371bb0,_0x3d5293,_0x350868);_0xf5ba4f[_0x2d50f6(0x6f1)]&&_0x2d4cff['hide'](),this[_0x2d50f6(0x9ed)][_0x2d50f6(0x2ce)](_0x2d4cff);}}},VisuMZ[_0x5d4113(0x710)]['Game_Map_setupBattleback']=Game_Map[_0x5d4113(0x44d)]['setupBattleback'],Game_Map[_0x5d4113(0x44d)]['setupBattleback']=function(){const _0x1bcbc5=_0x5d4113;VisuMZ[_0x1bcbc5(0x710)][_0x1bcbc5(0x9f9)]['call'](this),this[_0x1bcbc5(0x2d7)]();},Game_Map[_0x5d4113(0x44d)][_0x5d4113(0x2d7)]=function(){const _0x419fd8=_0x5d4113;this[_0x419fd8(0x2c7)]={},this[_0x419fd8(0x902)]={};if(!$dataMap)return;const _0x20ebe9=$dataMap[_0x419fd8(0x80a)];if(!_0x20ebe9)return;const _0x1a6753=_0x20ebe9['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x1a6753)for(const _0x5a637c of _0x1a6753){if('wNbEW'===_0x419fd8(0x77b))_0x38f0ae+=_0x4740d9,_0x5d1bf7+=_0x228024[_0x419fd8(0xa65)]()?-_0x3ae5b2:_0x55aae7;else{_0x5a637c[_0x419fd8(0xb51)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x43dc8b=Number(RegExp['$1']),_0x17f99b=Number(RegExp['$2']),_0x4e57b3=_0x17f99b===0x1?this[_0x419fd8(0x2c7)]:this['_regionBattleback2'],_0x162f3f=String(RegExp['$3']);_0x4e57b3[_0x43dc8b]=_0x162f3f;}}},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x450)]=Game_Map[_0x5d4113(0x44d)][_0x5d4113(0x4df)],Game_Map[_0x5d4113(0x44d)]['battleback1Name']=function(){const _0x31c2d1=_0x5d4113;if(!BattleManager[_0x31c2d1(0xa21)]()){if(_0x31c2d1(0x8fc)===_0x31c2d1(0x8fc)){const _0x127de2=$gamePlayer[_0x31c2d1(0x4ca)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x31c2d1(0x2c7)]&&this['_regionBattleback1'][_0x127de2])return'PYPVt'!==_0x31c2d1(0x42f)?this['_regionBattleback1'][_0x127de2]:_0x28948f[_0x31c2d1(0x710)][_0x31c2d1(0x326)][_0x31c2d1(0xb91)][_0x31c2d1(0x386)];}else{if(!_0xfc01ec[_0x31c2d1(0x2e2)])return;if(this[_0x31c2d1(0x8ab)]===_0x435a2f)return;const _0x42e80b=_0x590554['BattleCore']['Settings'][_0x31c2d1(0xa8e)],_0x2af009=new _0x13b317();_0x2af009['anchor']['x']=_0x42e80b['AnchorX'],_0x2af009[_0x31c2d1(0x636)]['y']=_0x42e80b[_0x31c2d1(0xb28)],_0x2af009['scale']['x']=_0x2af009['scale']['y']=_0x42e80b['Scale'],this[_0x31c2d1(0x4c0)]=_0x2af009,this[_0x31c2d1(0x9fd)](this[_0x31c2d1(0x4c0)]),_0x38b806['ANTI_TINT_UI']&&_0x416358[_0x31c2d1(0x756)](this['_hpGaugeSprite']);}}return VisuMZ['BattleCore'][_0x31c2d1(0x450)]['call'](this);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x71f)]=Game_Map['prototype']['battleback2Name'],Game_Map[_0x5d4113(0x44d)][_0x5d4113(0xc08)]=function(){const _0x3607c8=_0x5d4113;if(!BattleManager[_0x3607c8(0xa21)]()){const _0x2fc72a=$gamePlayer[_0x3607c8(0x4ca)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x3607c8(0x902)][_0x2fc72a])return this[_0x3607c8(0x902)][_0x2fc72a];}return VisuMZ[_0x3607c8(0x710)]['Game_Map_battleback2Name'][_0x3607c8(0x701)](this);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x5ad)]=Game_Map[_0x5d4113(0x44d)]['encounterList'],Game_Map[_0x5d4113(0x44d)][_0x5d4113(0x5a7)]=function(){const _0x4ff764=_0x5d4113;let _0x366c73=JsonEx['makeDeepCopy'](VisuMZ[_0x4ff764(0x710)][_0x4ff764(0x5ad)][_0x4ff764(0x701)](this));return VisuMZ['BattleCore'][_0x4ff764(0xac0)](_0x366c73);},VisuMZ['BattleCore'][_0x5d4113(0xac0)]=function(_0x45e3dc){const _0x5a030=_0x5d4113;var _0x943cd,_0x371217,_0x560cc1;for(_0x560cc1=_0x45e3dc['length']-0x1;_0x560cc1>0x0;_0x560cc1--){if(_0x5a030(0x27e)==='YPUbC')_0x943cd=Math[_0x5a030(0xa63)](Math[_0x5a030(0x22c)]()*(_0x560cc1+0x1)),_0x371217=_0x45e3dc[_0x560cc1],_0x45e3dc[_0x560cc1]=_0x45e3dc[_0x943cd],_0x45e3dc[_0x943cd]=_0x371217;else{const _0x44cabb=this[_0x5a030(0x98e)](_0x33810e),_0x16ef2f=this['textSizeEx'](_0x311ce7)['width'];return _0x16ef2f<=_0x44cabb[_0x5a030(0x61e)]?_0x5a030(0xa47):_0x5a030(0x989);}}return _0x45e3dc;},VisuMZ[_0x5d4113(0x710)]['Game_Interpreter_PluginCommand']=Game_Interpreter[_0x5d4113(0x44d)][_0x5d4113(0x3bb)],Game_Interpreter[_0x5d4113(0x44d)][_0x5d4113(0x3bb)]=function(_0x1a7d57){const _0x1e6e17=_0x5d4113;return $gameTemp[_0x1e6e17(0x97a)](this),VisuMZ[_0x1e6e17(0x710)]['Game_Interpreter_PluginCommand'][_0x1e6e17(0x701)](this,_0x1a7d57);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x223)]=Game_Interpreter[_0x5d4113(0x44d)][_0x5d4113(0x9d3)],Game_Interpreter[_0x5d4113(0x44d)][_0x5d4113(0x9d3)]=function(){const _0x450aa3=_0x5d4113;if(SceneManager[_0x450aa3(0x2ab)]())switch(this['_waitMode']){case'battleAngle':if(Imported[_0x450aa3(0xc30)]){if($gameScreen[_0x450aa3(0x63b)]()['angleDuration']>0x0)return!![];this[_0x450aa3(0xbdc)]='';}break;case'battleAnimation':if(BattleManager[_0x450aa3(0xa9a)][_0x450aa3(0x94b)]())return!![];this['_waitMode']='';break;case _0x450aa3(0x41b):if(Imported[_0x450aa3(0xc30)]){if('owwHI'===_0x450aa3(0xb5b)){if($gameScreen['battleCameraData']()[_0x450aa3(0x456)]>0x0)return!![];if($gameScreen[_0x450aa3(0x63b)]()[_0x450aa3(0xa31)]>0x0)return!![];this[_0x450aa3(0xbdc)]='';}else{if(!this[_0x450aa3(0x1b8)])return;this['_lineHeight']=this[_0x450aa3(0x42a)]||_0x3c98bc[_0x450aa3(0x44d)][_0x450aa3(0x950)](),this['x']=_0x477448[_0x450aa3(0xb50)](this[_0x450aa3(0x1b8)][_0x450aa3(0x8bf)]),this['y']=_0xd71729[_0x450aa3(0xb50)](this[_0x450aa3(0x1b8)]['_baseY']-this['_lineHeight']*0.5);const _0x3a4cfe=_0x5f509e['BattleCore'][_0x450aa3(0x326)][_0x450aa3(0x194)];this['x']+=_0x290202['round'](_0x3a4cfe[_0x450aa3(0xa48)]||0x0),this['y']+=_0x129727['round'](_0x3a4cfe[_0x450aa3(0x6cf)]||0x0);}}break;case _0x450aa3(0x99d):if(BattleManager[_0x450aa3(0xa9a)][_0x450aa3(0x6c2)]())return!![];this[_0x450aa3(0xbdc)]='';break;case _0x450aa3(0x858):if(BattleManager['_spriteset']['isAnyoneFloating']())return!![];this[_0x450aa3(0xbdc)]='';break;case _0x450aa3(0x36a):if(BattleManager[_0x450aa3(0xa9a)][_0x450aa3(0x394)]())return!![];this[_0x450aa3(0xbdc)]='';break;case'battlelog':if(BattleManager[_0x450aa3(0x7c2)][_0x450aa3(0x835)]())return!![];this[_0x450aa3(0xbdc)]='';break;case _0x450aa3(0x3c9):if(BattleManager['_spriteset'][_0x450aa3(0x7db)]())return!![];this[_0x450aa3(0xbdc)]='';break;case'battleOpacity':if(BattleManager[_0x450aa3(0xa9a)][_0x450aa3(0x610)]())return!![];this['_waitMode']='';break;case _0x450aa3(0x4c3):if(BattleManager[_0x450aa3(0xa9a)][_0x450aa3(0x92a)]())return!![];this[_0x450aa3(0xbdc)]='';break;case _0x450aa3(0x368):if(BattleManager[_0x450aa3(0xa9a)][_0x450aa3(0x17b)]())return!![];this[_0x450aa3(0xbdc)]='';break;case'battleProjectiles':if(Imported[_0x450aa3(0x7d0)]){if(BattleManager[_0x450aa3(0xa9a)][_0x450aa3(0x83f)]())return!![];this[_0x450aa3(0xbdc)]='';}break;case'battleSkew':if(Imported[_0x450aa3(0xc30)]){if($gameScreen[_0x450aa3(0x63b)]()[_0x450aa3(0x244)]>0x0)return!![];this['_waitMode']='';}break;case _0x450aa3(0x3fd):if(BattleManager[_0x450aa3(0xa9a)][_0x450aa3(0x574)]())return!![];this[_0x450aa3(0xbdc)]='';break;case _0x450aa3(0x425):if(Imported[_0x450aa3(0xc30)]){if($gameScreen['battleCameraData']()[_0x450aa3(0xb08)]>0x0)return!![];this[_0x450aa3(0xbdc)]='';}break;case _0x450aa3(0x1fb):if(Imported[_0x450aa3(0x38e)]){if('LYHES'==='fJgiq')this[_0x450aa3(0xb5c)](_0x450aa3(0x54a));else{if(BattleManager[_0x450aa3(0xa9a)]['isAnyoneInjectAniPrepping']){if(_0x450aa3(0x1be)===_0x450aa3(0x3e6))return this[_0x450aa3(0x4a3)]()?this[_0x450aa3(0x2de)]()&&this[_0x450aa3(0x2de)]()[_0x450aa3(0x441)]()&&this[_0x450aa3(0x2de)]()['isMagical']():this[_0x450aa3(0x2de)]()&&this[_0x450aa3(0x2de)]()[_0x450aa3(0x441)]()&&this[_0x450aa3(0x2de)]()[_0x450aa3(0x204)]();else{if(BattleManager[_0x450aa3(0xa9a)][_0x450aa3(0xac8)]())return!![];this[_0x450aa3(0xbdc)]=_0x450aa3(0x3a7);}}else this[_0x450aa3(0xbdc)]='';break;}}break;case _0x450aa3(0x3a7):if(Imported[_0x450aa3(0x38e)]){if(BattleManager['_spriteset'][_0x450aa3(0x929)]())return!![];this[_0x450aa3(0xbdc)]='';}break;}return VisuMZ['BattleCore'][_0x450aa3(0x223)]['call'](this);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xbb6)]=Game_Interpreter[_0x5d4113(0x44d)][_0x5d4113(0x62c)],Game_Interpreter[_0x5d4113(0x44d)][_0x5d4113(0x62c)]=function(_0x577816){const _0x54a3bb=_0x5d4113;if(!$gameParty[_0x54a3bb(0x531)]()){if(_0x54a3bb(0x4ec)==='HTEsF')return this['command301_PreBattleEvent'](_0x577816);else{const _0x54aeaa=new _0x3bb4be();return _0x2679e7[_0x12c422]=_0x54aeaa,this[_0x54a3bb(0x57e)](_0x54aeaa),this[_0x54a3bb(0x57e)](this[_0x54a3bb(0x492)]),_0x54aeaa;}}else return VisuMZ[_0x54a3bb(0x710)][_0x54a3bb(0xbb6)][_0x54a3bb(0x701)](this,_0x577816);},Game_Interpreter[_0x5d4113(0x44d)][_0x5d4113(0x88e)]=function(_0x52f462){const _0x23a143=_0x5d4113;return VisuMZ[_0x23a143(0x710)]['Game_Interpreter_command301'][_0x23a143(0x701)](this,_0x52f462),BattleManager['setEventCallback'](_0x14bba1=>{const _0x150b71=_0x23a143;this[_0x150b71(0x212)][this[_0x150b71(0x320)]]=_0x14bba1;}),!![];},VisuMZ['BattleCore'][_0x5d4113(0x88d)]=function(_0x200b60){const _0x20979b=_0x5d4113,_0x1352b9=$dataCommonEvents[_0x200b60];if(!_0x1352b9)return![];if(_0x1352b9[_0x20979b(0x95c)][_0x20979b(0x7da)]<=0x1)return![];return!![];},Game_Interpreter['prototype'][_0x5d4113(0x894)]=function(_0x55c2b7){const _0x1810b8=_0x5d4113,_0x19d224=VisuMZ['BattleCore'][_0x1810b8(0x326)]['Mechanics'],_0x110f8c=_0x19d224[_0x1810b8(0x29b)],_0x46c42f=$dataCommonEvents[_0x110f8c];if(_0x46c42f&&VisuMZ[_0x1810b8(0x710)]['CheckMapBattleEventValid'](_0x110f8c)){const _0x4fd58d=this['isOnCurrentMap']()?this[_0x1810b8(0x7a0)]:0x0,_0x1302ed=_0x46c42f['list'];this['setupChild'](_0x1302ed,_0x4fd58d),this[_0x1810b8(0x723)]=JsonEx[_0x1810b8(0xca0)](this[_0x1810b8(0x723)]);const _0x4f7a49={'code':0xbc3,'indent':this[_0x1810b8(0x320)],'parameters':JsonEx[_0x1810b8(0xca0)](_0x55c2b7)};return this['_list'][_0x1810b8(0x5ee)](this['_index']+0x1,0x0,_0x4f7a49),!![];}else{if(_0x1810b8(0x2a0)!==_0x1810b8(0x2a0)){if(!_0x5d2116[_0x1810b8(0x2ab)]())return;_0x5d27ed[_0x1810b8(0xb3d)](_0x1f2e30,_0x312363);const _0x2d7d49=_0x548b17[_0x1810b8(0x7c2)],_0x453988=_0x29e6f9[_0x1810b8(0xaa4)]&&_0x45fab9[_0x1810b8(0x2bd)];_0x2d7d49[_0x1810b8(0x93e)](_0x144526[_0x1810b8(0x35c)]),_0x453988&&_0x2e434e[_0x1810b8(0x2bd)]&&_0x410a83[_0x1810b8(0x853)](_0x2750f3[_0x1810b8(0x35c)]||'',_0x227496[_0x1810b8(0x2e6)]||0x0);}else return VisuMZ[_0x1810b8(0x710)][_0x1810b8(0xbb6)][_0x1810b8(0x701)](this,_0x55c2b7);}},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x304)]=BattleManager[_0x5d4113(0xa70)],BattleManager[_0x5d4113(0xa70)]=function(){const _0x247cc7=_0x5d4113;VisuMZ['BattleCore'][_0x247cc7(0x304)][_0x247cc7(0x701)](this),this['onEncounterBattleCore']();},BattleManager[_0x5d4113(0xc52)]=function(){const _0x41c231=_0x5d4113,_0x3ddf7e=VisuMZ[_0x41c231(0x710)][_0x41c231(0x326)][_0x41c231(0x6c3)],_0x401d01=_0x3ddf7e[_0x41c231(0x29b)];_0x401d01&&VisuMZ[_0x41c231(0x710)]['CheckMapBattleEventValid'](_0x401d01)&&(this['_battleCoreBattleStartEvent']=!![],$gameTemp[_0x41c231(0x813)](_0x3ddf7e['BattleStartEvent']),$gameMap[_0x41c231(0xb58)](),$gameMap[_0x41c231(0x7cf)][_0x41c231(0x4be)]=!![]),_0x3ddf7e[_0x41c231(0x2a3)]>0x0&&('CQadM'==='CQadM'?this[_0x41c231(0x13d)]=!![]:_0x525c95[_0x41c231(0xaec)]=_0x4bf9a0[_0x41c231(0x80c)](_0x2eb82d['$1']));},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x89e)]=Scene_Map[_0x5d4113(0x44d)][_0x5d4113(0x692)],Scene_Map[_0x5d4113(0x44d)][_0x5d4113(0x692)]=function(){const _0x4e16bc=_0x5d4113;if(BattleManager[_0x4e16bc(0xada)])return;VisuMZ[_0x4e16bc(0x710)][_0x4e16bc(0x89e)]['call'](this);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x61c)]=Scene_Map[_0x5d4113(0x44d)][_0x5d4113(0xc10)],Scene_Map[_0x5d4113(0x44d)]['launchBattle']=function(){const _0x341573=_0x5d4113;BattleManager[_0x341573(0xada)]?this[_0x341573(0x970)]():VisuMZ['BattleCore']['Scene_Map_launchBattle'][_0x341573(0x701)](this);},Scene_Map[_0x5d4113(0x44d)][_0x5d4113(0x970)]=function(){const _0x2c0844=_0x5d4113;this[_0x2c0844(0x565)]=!![];},VisuMZ[_0x5d4113(0x710)]['SceneManager_isSceneChanging']=SceneManager['isSceneChanging'],SceneManager[_0x5d4113(0xb98)]=function(){const _0x1a40d7=_0x5d4113;if(BattleManager[_0x1a40d7(0xada)])return![];return VisuMZ['BattleCore'][_0x1a40d7(0xc7b)][_0x1a40d7(0x701)](this);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x6fe)]=Game_Interpreter[_0x5d4113(0x44d)][_0x5d4113(0x16b)],Game_Interpreter[_0x5d4113(0x44d)][_0x5d4113(0x16b)]=function(){const _0x3ced33=_0x5d4113;VisuMZ[_0x3ced33(0x710)]['Game_Interpreter_terminate'][_0x3ced33(0x701)](this),this[_0x3ced33(0x4be)]&&(this[_0x3ced33(0x4be)]=undefined,SceneManager[_0x3ced33(0x5a4)]['battleCoreResumeLaunchBattle']());},Scene_Map[_0x5d4113(0x44d)]['battleCoreResumeLaunchBattle']=function(){const _0x3b67ef=_0x5d4113;BattleManager[_0x3b67ef(0xada)]=undefined,BattleManager[_0x3b67ef(0xc53)]=!![],this[_0x3b67ef(0x903)]();},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x190)]=Scene_Map['prototype'][_0x5d4113(0x7e2)],Scene_Map[_0x5d4113(0x44d)][_0x5d4113(0x7e2)]=function(){const _0x1f44cb=_0x5d4113;VisuMZ['BattleCore']['Scene_Map_initializeAfter'][_0x1f44cb(0x701)](this),BattleManager['_battleCoreBattleResumeAfter']&&(this[_0x1f44cb(0x565)]=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x296)]=Scene_Map[_0x5d4113(0x44d)][_0x5d4113(0x7e2)],Scene_Map['prototype'][_0x5d4113(0x7e2)]=function(){const _0x4facef=_0x5d4113;VisuMZ[_0x4facef(0x710)][_0x4facef(0x296)]['call'](this),$gameTemp['clearForcedGameTroopSettingsBattleCore']();},VisuMZ[_0x5d4113(0x710)]['Scene_ItemBase_applyItem']=Scene_ItemBase['prototype'][_0x5d4113(0x389)],Scene_ItemBase[_0x5d4113(0x44d)][_0x5d4113(0x389)]=function(){const _0x254b18=_0x5d4113;VisuMZ[_0x254b18(0x710)]['Scene_ItemBase_applyItem'][_0x254b18(0x701)](this);if(this[_0x254b18(0x441)]()[_0x254b18(0x80a)][_0x254b18(0xb51)](/<BYPASS AUTO ACTION SEQUENCE>/i)){if('OKEtU'!==_0x254b18(0xa57))return;else{const _0x57b22a=_0x5f281b[_0x254b18(0x710)]['_commonEventKey'][_0x19a157],_0x42bdda={'code':0x2c,'dataId':_0x57b22a,'value1':0x1,'value2':0x0};_0x108a70[_0x254b18(0x21c)][_0x254b18(0x2ce)](_0x42bdda);}}this[_0x254b18(0x441)]()[_0x254b18(0x80a)][_0x254b18(0xb51)](/<CUSTOM ACTION SEQUENCE>/i)&&('eukqV'!==_0x254b18(0x1de)?this[_0x254b18(0x2ce)](_0x254b18(0xbf7),_0xa12016):$gameTemp[_0x254b18(0xb77)]=[]),DataManager[_0x254b18(0x322)](this[_0x254b18(0x441)]())&&(_0x254b18(0xc33)!=='aDqdc'?this['initialize'](...arguments):$gameTemp[_0x254b18(0xb77)]=[]);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x2a2)]=Scene_Options[_0x5d4113(0x44d)]['maxCommands'],Scene_Options[_0x5d4113(0x44d)][_0x5d4113(0x314)]=function(){const _0x514255=_0x5d4113;let _0x2cef45=VisuMZ[_0x514255(0x710)][_0x514255(0x2a2)][_0x514255(0x701)](this);const _0x189f3c=VisuMZ[_0x514255(0x710)][_0x514255(0x326)];if(_0x189f3c[_0x514255(0x9e5)][_0x514255(0x1ef)]&&_0x189f3c[_0x514255(0x9e5)][_0x514255(0xba1)])_0x2cef45+=0x2;if(_0x189f3c[_0x514255(0xa8e)][_0x514255(0x1ef)]&&_0x189f3c[_0x514255(0xa8e)][_0x514255(0xba1)])_0x2cef45+=0x1;return _0x2cef45;},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xc34)]=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x7e2)],Scene_Battle['prototype'][_0x5d4113(0x7e2)]=function(){const _0x3a8386=_0x5d4113;VisuMZ[_0x3a8386(0x710)][_0x3a8386(0xc34)]['call'](this),this[_0x3a8386(0x69f)]();},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xb1c)]=Scene_Battle['prototype']['start'],Scene_Battle[_0x5d4113(0x44d)]['start']=function(){const _0x963c36=_0x5d4113;SceneManager[_0x963c36(0x199)]()?(Scene_Message[_0x963c36(0x44d)][_0x963c36(0x31c)][_0x963c36(0x701)](this),this[_0x963c36(0xa9a)]&&this[_0x963c36(0xa9a)][_0x963c36(0x5fb)](),BattleManager['_tpbSceneChangeCacheActor']&&BattleManager['revertTpbCachedActor']()):(VisuMZ[_0x963c36(0x710)]['Scene_Battle_start']['call'](this),$gameTroop['onBattleStartOnceParallels']());},VisuMZ[_0x5d4113(0x710)]['Scene_Battle_stop']=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x903)],Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x903)]=function(){const _0x4e54d2=_0x5d4113;SceneManager[_0x4e54d2(0xc82)]()?Scene_Message['prototype']['stop'][_0x4e54d2(0x701)](this):_0x4e54d2(0x16c)===_0x4e54d2(0x16c)?VisuMZ[_0x4e54d2(0x710)][_0x4e54d2(0xc69)][_0x4e54d2(0x701)](this):_0x4c26b1[_0x4e54d2(0x432)]=new _0x498442(this[_0x4e54d2(0x61e)],this[_0x4e54d2(0x6ce)]);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x33d)]=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x16b)],Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x16b)]=function(){const _0x3299d8=_0x5d4113;SceneManager[_0x3299d8(0xc82)]()?Scene_Message['prototype'][_0x3299d8(0x16b)]['call'](this):VisuMZ[_0x3299d8(0x710)][_0x3299d8(0x33d)][_0x3299d8(0x701)](this),this[_0x3299d8(0x69f)]();},Scene_Battle[_0x5d4113(0x44d)]['isRightInputMode']=function(){const _0x5c51cc=_0x5d4113;if(ConfigManager['uiMenuStyle']&&ConfigManager[_0x5c51cc(0xb01)]!==undefined){if(_0x5c51cc(0xa81)!==_0x5c51cc(0xba9))return ConfigManager[_0x5c51cc(0xb01)];else{if(this[_0x5c51cc(0x80b)]()[_0x5c51cc(0x80a)][_0x5c51cc(0xb51)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return _0x2996c2(_0x5f0c8d['$1']);else{if(this['actor']()['note'][_0x5c51cc(0xb51)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x15574b(_0x15597f['$2']);}return 0x0;}}else{if(this[_0x5c51cc(0x30c)]()===_0x5c51cc(0xc3e))return![];else{if(_0x5c51cc(0x674)===_0x5c51cc(0x674)){return Scene_Message[_0x5c51cc(0x44d)][_0x5c51cc(0x78e)][_0x5c51cc(0x701)](this);;}else{const _0x2eafd8=this[_0x5c51cc(0x484)]['_freezeMotionData'];this['_motion']=_0x24eff0[_0x5c51cc(0x5cd)][_0x2eafd8[_0x5c51cc(0x146)]],this[_0x5c51cc(0x86d)]=_0x2eafd8[_0x5c51cc(0x41e)];const _0x2573d7=this['_weaponSprite'];_0x2573d7[_0x5c51cc(0x2f0)](_0x2eafd8[_0x5c51cc(0x7de)],_0x2eafd8[_0x5c51cc(0x41e)]),this[_0x5c51cc(0x43c)]();}}}},VisuMZ[_0x5d4113(0x710)]['Scene_Battle_createAllWindows']=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0xb76)],Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0xb76)]=function(){const _0x5382c4=_0x5d4113;this[_0x5382c4(0x947)](),VisuMZ[_0x5382c4(0x710)][_0x5382c4(0x9af)][_0x5382c4(0x701)](this),this['createAutoBattleWindow']();},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xbcd)]=Scene_Battle['prototype'][_0x5d4113(0xc92)],Scene_Battle[_0x5d4113(0x44d)]['createCancelButton']=function(){const _0x4d1460=_0x5d4113;VisuMZ[_0x4d1460(0x710)][_0x4d1460(0xbcd)]['call'](this);if(this[_0x4d1460(0x30c)]()===_0x4d1460(0xc3e)){if(_0x4d1460(0xc2e)===_0x4d1460(0x71c)){_0x16a68d=_0x350b56[_0x4d1460(0x710)]['JS'][_0x4a8949]['call'](this,this[_0x4d1460(0x652)](),_0xa85309,_0x2f7d57,_0x46ff52);if(_0xba69ac)_0x223e8f=_0x4a2fb3;}else this[_0x4d1460(0xc4f)]();}},Scene_Battle[_0x5d4113(0x44d)]['setVisibleUI']=function(_0x16a96b){const _0x163867=_0x5d4113;if(_0x16a96b){if(_0x163867(0xa01)!=='NlKtZ')this[_0x163867(0xb16)]['x']=(Graphics[_0x163867(0x61e)]-Graphics[_0x163867(0xbb8)])/0x2,this[_0x163867(0xb16)]['y']=(Graphics[_0x163867(0x6ce)]-Graphics[_0x163867(0x75f)])/0x2;else{if(!this[_0x163867(0x9e9)])return;for(const _0x291ac7 of this[_0x163867(0x9e9)]){_0x291ac7&&_0x291ac7[_0x163867(0x5fb)]();}}}else this[_0x163867(0xb16)]['x']=Graphics[_0x163867(0x61e)]*0xa,this[_0x163867(0xb16)]['y']=Graphics['height']*0xa;},VisuMZ['BattleCore'][_0x5d4113(0xb83)]=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x3c3)],Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x3c3)]=function(){const _0x28d46b=_0x5d4113,_0x1c9ec1=BattleManager['actor']();VisuMZ[_0x28d46b(0x710)][_0x28d46b(0xb83)][_0x28d46b(0x701)](this);if(_0x1c9ec1){if(_0x28d46b(0x869)!==_0x28d46b(0x699)){if(_0x1c9ec1===BattleManager['actor']())return;if(_0x1c9ec1===BattleManager[_0x28d46b(0x932)])return;if(_0x1c9ec1[_0x28d46b(0x3ee)]())_0x1c9ec1[_0x28d46b(0x3ee)]()[_0x28d46b(0x254)]();}else{const _0x5684f4=this[_0x28d46b(0xa65)]()?this['actor']():this[_0x28d46b(0x258)]();if(_0x5684f4){const _0x103e5a=_0x5684f4['note'];if(_0x103e5a[_0x28d46b(0xb51)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x583b0f(_0x1a9d7c['$1'])*0.01;else{if(_0x103e5a[_0x28d46b(0xb51)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return _0x1e9613(_0x41bd3f['$1'])||0x0;}}return 0x1;}}},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xb30)]=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0xa7c)],Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0xa7c)]=function(){const _0x471697=_0x5d4113,_0x50d89b=BattleManager['actor']();if(_0x50d89b&&_0x50d89b[_0x471697(0x3ee)])_0x50d89b[_0x471697(0x3ee)]()[_0x471697(0x254)]();VisuMZ[_0x471697(0x710)][_0x471697(0xb30)][_0x471697(0x701)](this);},VisuMZ['BattleCore']['Scene_Battle_logWindowRect']=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x49f)],Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x49f)]=function(){const _0x28e8db=_0x5d4113;if(VisuMZ['BattleCore'][_0x28e8db(0x326)][_0x28e8db(0xb91)][_0x28e8db(0x39f)])return VisuMZ[_0x28e8db(0x710)][_0x28e8db(0x326)]['BattleLog'][_0x28e8db(0x39f)][_0x28e8db(0x701)](this);return VisuMZ[_0x28e8db(0x710)][_0x28e8db(0x180)][_0x28e8db(0x701)](this);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x434)]=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x412)],Scene_Battle[_0x5d4113(0x44d)]['createPartyCommandWindow']=function(){const _0x2789f9=_0x5d4113;VisuMZ['BattleCore'][_0x2789f9(0x434)]['call'](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x6dd)]=function(){const _0x15bd5a=_0x5d4113,_0x169163=this[_0x15bd5a(0x644)];_0x169163[_0x15bd5a(0x2b1)](_0x15bd5a(0x8b3),this[_0x15bd5a(0x6b8)][_0x15bd5a(0xa11)](this)),_0x169163['setHandler'](_0x15bd5a(0x1fa),this[_0x15bd5a(0x22b)][_0x15bd5a(0xa11)](this));const _0x28e898=this['battleLayoutStyle']();switch(_0x28e898){case'xp':case _0x15bd5a(0x453):return this[_0x15bd5a(0x644)][_0x15bd5a(0x30b)](0x1);break;}},Scene_Battle['prototype'][_0x5d4113(0x6b8)]=function(){const _0x520d4f=_0x5d4113;BattleManager[_0x520d4f(0xab3)]=!![],$gameParty[_0x520d4f(0x848)](),this[_0x520d4f(0x3c3)]();if(BattleManager[_0x520d4f(0x5fd)]()){if(_0x520d4f(0x6d6)!==_0x520d4f(0x6d6)){const _0x534b6c=_0x6358eb[_0x520d4f(0x61e)],_0x38fe83=_0x48e9e3[_0x520d4f(0xb50)]((_0xdc75d8['boxWidth']-_0x534b6c)/0x2),_0x140148=this[_0x520d4f(0xb1e)](),_0x547fc0=(_0x54b5fd[_0x520d4f(0x6ce)]-_0x5999bb[_0x520d4f(0x75f)])/-0x2;return new _0x3f7625(_0x38fe83,_0x547fc0,_0x534b6c,_0x140148);}else BattleManager['_inputting']=![];}},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x22b)]=function(){const _0x385462=_0x5d4113;this[_0x385462(0x173)]()?(this['_callSceneOptions']=!![],this[_0x385462(0x7c2)]['push'](_0x385462(0x93e),VisuMZ['BattleCore'][_0x385462(0x326)][_0x385462(0x9c4)][_0x385462(0x550)])):this['callOptions']();},Scene_Battle['prototype'][_0x5d4113(0x173)]=function(){const _0x3575a7=_0x5d4113;return BattleManager[_0x3575a7(0x629)]();},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x849)]=function(){const _0x511fff=_0x5d4113;this[_0x511fff(0x931)]=![],this[_0x511fff(0xa9a)][_0x511fff(0x5fb)](),this[_0x511fff(0xb16)][_0x511fff(0x39c)]=![];if(BattleManager[_0x511fff(0xa21)]()){if(_0x511fff(0xa82)===_0x511fff(0xa82)){if($dataSystem[_0x511fff(0x4df)]||$dataSystem[_0x511fff(0xc08)]){if(_0x511fff(0x444)!==_0x511fff(0x444)){this[_0x511fff(0x851)]=_0x306632;const _0x4ac0aa=this['name'](),_0x196e78=this[_0x511fff(0x7e9)](),_0x5bb6d6=_0x1220d8['prototype'][_0x511fff(0x950)]();this['setupFont'](),this['bitmap'][_0x511fff(0x192)](),this[_0x511fff(0x432)][_0x511fff(0x6a1)](_0x4ac0aa,0x0,0x0,_0x196e78,_0x5bb6d6,_0x511fff(0x4d5));}else SceneManager[_0x511fff(0x269)]();}}else return this[_0x511fff(0x4a3)]()?this[_0x511fff(0x2de)]()&&this[_0x511fff(0x2de)]()[_0x511fff(0x441)]()&&!this[_0x511fff(0x2de)]()[_0x511fff(0xa41)]():this[_0x511fff(0x2de)]()&&this[_0x511fff(0x2de)]()[_0x511fff(0x441)]()&&!this['currentAction']()[_0x511fff(0x204)]();}else($gameMap[_0x511fff(0x4df)]()||$gameMap[_0x511fff(0xc08)]())&&SceneManager[_0x511fff(0x269)]();SceneManager[_0x511fff(0x2ce)](Scene_Options),BattleManager[_0x511fff(0x5fd)]()&&(BattleManager['_tpbSceneChangeCacheActor']=BattleManager[_0x511fff(0x80b)]());},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xc7f)]=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x579)],Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x579)]=function(){const _0x218759=_0x5d4113;VisuMZ[_0x218759(0x710)][_0x218759(0xc7f)][_0x218759(0x701)](this);if(this['_callSceneOptions']&&!BattleManager[_0x218759(0x932)])this['callOptions']();},VisuMZ[_0x5d4113(0x710)]['Scene_Battle_update']=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x5fb)],Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x5fb)]=function(){const _0x2c24e6=_0x5d4113;VisuMZ[_0x2c24e6(0x710)][_0x2c24e6(0x523)][_0x2c24e6(0x701)](this),this[_0x2c24e6(0x4dd)]();},Scene_Battle['prototype'][_0x5d4113(0x410)]=function(){const _0xc2a3b6=_0x5d4113,_0x2339db=this[_0xc2a3b6(0x167)]();this[_0xc2a3b6(0x31b)]=new Window_AutoBattleCancel(_0x2339db),this[_0xc2a3b6(0x31b)][_0xc2a3b6(0x712)](),this[_0xc2a3b6(0x9fd)](this[_0xc2a3b6(0x31b)]);},Scene_Battle['prototype'][_0x5d4113(0x167)]=function(){const _0x3e3d68=_0x5d4113;return VisuMZ[_0x3e3d68(0x710)][_0x3e3d68(0x326)][_0x3e3d68(0x9e5)][_0x3e3d68(0x8c1)]['call'](this);},Scene_Battle[_0x5d4113(0x44d)]['clearOnceParallelInterpreters']=function(){const _0x1e48dd=_0x5d4113;this[_0x1e48dd(0x9e9)]=[];},Scene_Battle['prototype'][_0x5d4113(0x4dd)]=function(){const _0xde45e=_0x5d4113;if(!this[_0xde45e(0x9e9)])return;for(const _0x1dabdf of this[_0xde45e(0x9e9)]){_0x1dabdf&&_0x1dabdf[_0xde45e(0x5fb)]();}},Scene_Battle['prototype'][_0x5d4113(0x272)]=function(_0xa6ce15){const _0x120aee=_0x5d4113,_0x384f92=$dataCommonEvents[_0xa6ce15];if(!_0x384f92)return;const _0x414684=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x414684),_0x414684[_0x120aee(0xc61)](_0xa6ce15);},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x8a2)]=function(_0x1cdb8e){const _0xc78a3c=_0x5d4113;this[_0xc78a3c(0x9e9)]=this['_onceParallelInterpreters']||[],this[_0xc78a3c(0x9e9)][_0xc78a3c(0x2ce)](_0x1cdb8e);},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x467)]=function(_0x2199c4){const _0x49c099=_0x5d4113;this[_0x49c099(0x9e9)]=this[_0x49c099(0x9e9)]||[],this[_0x49c099(0x9e9)][_0x49c099(0x828)](_0x2199c4);},Game_Troop[_0x5d4113(0x44d)]['onBattleStartOnceParallels']=function(){const _0x23ab53=_0x5d4113;for(const _0x110b4f of this[_0x23ab53(0x25a)]()[_0x23ab53(0xc54)]){if(!this[_0x23ab53(0xb99)](_0x110b4f))continue;SceneManager[_0x23ab53(0x5a4)][_0x23ab53(0x282)](_0x110b4f);}},Game_Troop[_0x5d4113(0x44d)][_0x5d4113(0xb99)]=function(_0x2907ba){const _0x3fb806=_0x5d4113;if(!_0x2907ba)return;for(const _0x5d8b2a of _0x2907ba[_0x3fb806(0x95c)]){if([0x6c,0x198][_0x3fb806(0x4b0)](_0x5d8b2a[_0x3fb806(0x7cd)])){const _0x307bc9=_0x5d8b2a[_0x3fb806(0x4d7)][0x0];if(_0x307bc9[_0x3fb806(0xb51)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x282)]=function(_0x10de53){const _0xff7e96=_0x5d4113;if(!_0x10de53)return;const _0x4851a1=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x4851a1),_0x4851a1[_0xff7e96(0x85f)](_0x10de53);};function Game_BattleOnceParallelInterpreter(){this['initialize'](...arguments);}Game_BattleOnceParallelInterpreter[_0x5d4113(0x44d)]=Object[_0x5d4113(0x5ac)](Game_Interpreter[_0x5d4113(0x44d)]),Game_BattleOnceParallelInterpreter['prototype'][_0x5d4113(0x8ab)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x5d4113(0x44d)][_0x5d4113(0xc61)]=function(_0x2b957d){const _0x1cbe29=_0x5d4113,_0x2cee12=$dataCommonEvents[_0x2b957d];_0x2cee12?_0x1cbe29(0xa3c)!=='xvCLr'?this[_0x1cbe29(0xbd4)](_0x2cee12[_0x1cbe29(0x95c)],0x0):this[_0x1cbe29(0x43d)][_0x1cbe29(0xbbf)]():this[_0x1cbe29(0x16b)]();},Game_BattleOnceParallelInterpreter[_0x5d4113(0x44d)][_0x5d4113(0x16b)]=function(){const _0x179847=_0x5d4113;if(!SceneManager['isSceneBattle']())return;SceneManager['_scene'][_0x179847(0x467)](this),Game_Interpreter[_0x179847(0x44d)]['terminate'][_0x179847(0x701)](this);},Game_BattleOnceParallelInterpreter['prototype'][_0x5d4113(0x85f)]=function(_0x1e2636){const _0x28105c=_0x5d4113;_0x1e2636?this['setup'](_0x1e2636[_0x28105c(0x95c)],0x0):this[_0x28105c(0x16b)]();},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x82b)]=function(){const _0x3515e5=_0x5d4113;return VisuMZ[_0x3515e5(0x710)]['Settings'][_0x3515e5(0x9c4)]['DisablePartyCmd'];},VisuMZ[_0x5d4113(0x710)]['Scene_Battle_startPartyCommandSelection']=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x37b)],Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x37b)]=function(){const _0x267e69=_0x5d4113;if(this['isPartyCommandWindowDisabled']()){if(_0x267e69(0x870)===_0x267e69(0x7a1)){const _0x33bde4=this[_0x267e69(0x148)][_0x267e69(0x596)]['y'];_0xe4f281-=(_0x33bde4-0x1)*this[_0x267e69(0x6ce)];}else this[_0x267e69(0xc2a)]();}else _0x267e69(0xb0f)===_0x267e69(0xb0f)?VisuMZ['BattleCore'][_0x267e69(0x6a3)]['call'](this):this[_0x267e69(0x45b)](_0xfe3c0b,_0x397179,_0x2035f2);},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0xc2a)]=function(){const _0x3349a6=_0x5d4113;if(BattleManager[_0x3349a6(0xb22)]())this[_0x3349a6(0x3c3)]();else BattleManager[_0x3349a6(0x5fd)]()&&VisuMZ[_0x3349a6(0x710)][_0x3349a6(0x6a3)][_0x3349a6(0x701)](this);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x352)]=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x4d1)],Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x4d1)]=function(){const _0x4a2eed=_0x5d4113;BattleManager[_0x4a2eed(0x5fd)]()?(this[_0x4a2eed(0xc89)](),this[_0x4a2eed(0x77a)]()):VisuMZ[_0x4a2eed(0x710)][_0x4a2eed(0x352)][_0x4a2eed(0x701)](this);},Scene_Battle['prototype'][_0x5d4113(0xc89)]=function(){const _0x38f861=_0x5d4113;if(!VisuMZ[_0x38f861(0x710)][_0x38f861(0x97b)])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x38f861(0xbb9)]())return;const _0x1cd308=$gameParty[_0x38f861(0x331)]()[_0x38f861(0x475)](_0x19685f=>_0x19685f['isTpbCharged']()&&_0x19685f[_0x38f861(0x607)]());BattleManager[_0x38f861(0x3ca)]=_0x1cd308[0x0]||null,BattleManager['_currentActor']&&(_0x38f861(0x36b)!==_0x38f861(0x854)?BattleManager['_currentActor']['setActionState'](_0x38f861(0x419)):(this[_0x38f861(0x760)]=this[_0x38f861(0xaaf)](this['_growX'],this[_0x38f861(0x37a)],_0x25e82b,_0x4591e9,_0x374368),this[_0x38f861(0xa9c)]=this['applyEasing'](this[_0x38f861(0xa9c)],this[_0x38f861(0xc14)],_0x57ca62,_0x376514,_0x3037cc)));},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x5df)]=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x263)],Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x263)]=function(){const _0x52491c=_0x5d4113;VisuMZ[_0x52491c(0x710)][_0x52491c(0x5df)][_0x52491c(0x701)](this),this[_0x52491c(0x8b0)]();},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x8b0)]=function(){const _0x2c3a54=_0x5d4113,_0x6d3cf7=this[_0x2c3a54(0x43d)];_0x6d3cf7[_0x2c3a54(0x2b1)](_0x2c3a54(0x382),this[_0x2c3a54(0x72f)]['bind'](this)),_0x6d3cf7['setHandler'](_0x2c3a54(0x8b3),this['actorCommandAutoBattle'][_0x2c3a54(0xa11)](this)),_0x6d3cf7[_0x2c3a54(0x2b1)](_0x2c3a54(0x510),this[_0x2c3a54(0xb9b)][_0x2c3a54(0xa11)](this)),BattleManager[_0x2c3a54(0x5fd)]()&&(this['isPartyCommandWindowDisabled']()?delete _0x6d3cf7[_0x2c3a54(0x446)][_0x2c3a54(0x4cd)]:'WdVfr'!==_0x2c3a54(0xb21)?_0x6d3cf7[_0x2c3a54(0x2b1)]('cancel',this['actorCommandCancelTPB'][_0x2c3a54(0xa11)](this)):_0x3ec283[_0x2c3a54(0x5bd)](0x0,0x0,_0x21619d['bitmap'][_0x2c3a54(0x61e)],this[_0x2c3a54(0x432)][_0x2c3a54(0x6ce)]));},Scene_Battle['prototype'][_0x5d4113(0x72f)]=function(){this['commandEscape']();},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0xb23)]=function(){const _0x43533d=_0x5d4113;BattleManager['actor']()[_0x43533d(0x67d)](),BattleManager[_0x43533d(0x7ca)](),BattleManager[_0x43533d(0x57f)](),this['changeInputWindow']();},Scene_Battle[_0x5d4113(0x44d)]['actorCommandSingleSkill']=function(){const _0x3601ac=_0x5d4113,_0x37736c=BattleManager[_0x3601ac(0xbaf)](),_0x2e3340=this[_0x3601ac(0x43d)][_0x3601ac(0x485)]();_0x37736c[_0x3601ac(0x7ad)](_0x2e3340),BattleManager[_0x3601ac(0x80b)]()[_0x3601ac(0x8c6)]($dataSkills[_0x2e3340]),this[_0x3601ac(0x831)]();},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x7e6)]=function(){const _0x9cdedc=_0x5d4113;if(this['tpbActorSwitchConditionsMet']()){if(_0x9cdedc(0x96b)!==_0x9cdedc(0x96b))return this[_0x9cdedc(0x69a)]();else this[_0x9cdedc(0xbf6)]();}else this['processActorCommandCancelTPB']();},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x97b)]=![],Scene_Battle[_0x5d4113(0x44d)]['tpbActorSwitchConditionsMet']=function(){const _0x23ce79=_0x5d4113;if(Imported[_0x23ce79(0x7f4)]&&BattleManager[_0x23ce79(0xbb9)]())return![];else{if(_0x23ce79(0x3ce)!==_0x23ce79(0xbdf)){if(!VisuMZ[_0x23ce79(0x710)]['TpbActiveChangeEnabled'])return![];const _0x19aebc=$gameParty[_0x23ce79(0x331)]()[_0x23ce79(0x475)](_0x39c572=>_0x39c572['isTpbCharged']()&&_0x39c572[_0x23ce79(0x607)]());return _0x19aebc[_0x23ce79(0x7da)]>0x0&&BattleManager[_0x23ce79(0x80b)]()!==_0x19aebc[_0x19aebc[_0x23ce79(0x7da)]-0x1];}else _0x53e3a7=_0x4a1aa0*this[_0x23ce79(0xb64)]['damageRate'],_0x530d94+=this[_0x23ce79(0xb64)][_0x23ce79(0x991)]*(_0x25abad>=0x0?0x1:-0x1),_0x55129f=this[_0x23ce79(0x267)](_0x23ce79(0x6f0),_0x30e5d6,_0x42854f,![]),_0x2bc33a=this[_0x23ce79(0x252)](_0x4e8b46),_0x501b2f=_0x30a46d[_0x23ce79(0xb50)](_0x5225cd),this[_0x23ce79(0x9d7)]=_0x3352ef,this[_0x23ce79(0x36c)]=this[_0x23ce79(0x36c)]||0x0,this[_0x23ce79(0x36c)]+=_0x3f1b92,_0x5354ff[_0x23ce79(0x710)]['Game_Action_executeDamage'][_0x23ce79(0x701)](this,_0x21bc8c,_0x27b297),this[_0x23ce79(0x267)](_0x23ce79(0x9bc),_0x234a7f,_0xa4940d,!![]);}},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0xbf6)]=function(){const _0x5f2dbc=_0x5d4113,_0x5abf95=BattleManager['actor'](),_0x603d14=_0x5abf95[_0x5f2dbc(0x3ee)]();if(_0x603d14)_0x603d14[_0x5f2dbc(0x254)]();const _0x5a1ab6=$gameParty[_0x5f2dbc(0x331)]()[_0x5f2dbc(0x475)](_0x2ceae9=>_0x2ceae9[_0x5f2dbc(0x60b)]()&&_0x2ceae9[_0x5f2dbc(0x607)]()),_0x2f5942=_0x5a1ab6['indexOf'](_0x5abf95),_0x390840=_0x5a1ab6[_0x2f5942+0x1];BattleManager[_0x5f2dbc(0x3ca)]=_0x390840||null;if(_0x390840)_0x390840[_0x5f2dbc(0x7ee)](_0x5f2dbc(0x419));_0x5abf95[_0x5f2dbc(0x7ee)](_0x5f2dbc(0x58b)),this['changeInputWindow']();},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x973)]=function(){const _0x3c6a46=_0x5d4113;this[_0x3c6a46(0x644)][_0x3c6a46(0xbd4)](),this['_actorCommandWindow']['close']();if(!VisuMZ['BattleCore'][_0x3c6a46(0x97b)])return;if(Imported[_0x3c6a46(0x7f4)]&&BattleManager[_0x3c6a46(0xbb9)]())return;if(BattleManager[_0x3c6a46(0x3ca)]){BattleManager[_0x3c6a46(0x3ca)][_0x3c6a46(0x7ee)](_0x3c6a46(0x58b));const _0x230cb3=BattleManager[_0x3c6a46(0x3ca)][_0x3c6a46(0x3ee)]();if(_0x230cb3)_0x230cb3[_0x3c6a46(0x254)]();}BattleManager[_0x3c6a46(0x3ca)]=null;},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xacf)]=Scene_Battle['prototype'][_0x5d4113(0x5ea)],Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x5ea)]=function(){const _0x1ffb8f=_0x5d4113;VisuMZ[_0x1ffb8f(0x710)][_0x1ffb8f(0xacf)][_0x1ffb8f(0x701)](this),this[_0x1ffb8f(0x19b)]();},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x19b)]=function(){const _0x45f77b=_0x5d4113;this[_0x45f77b(0x43d)][_0x45f77b(0x228)](this['_helpWindow']),this[_0x45f77b(0x644)][_0x45f77b(0x228)](this[_0x45f77b(0xc0a)]);},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x30c)]=function(){const _0x2a2398=_0x5d4113;if($gameTemp[_0x2a2398(0xa02)]!==undefined)return $gameTemp[_0x2a2398(0xa02)];if(this[_0x2a2398(0xa20)]){if(_0x2a2398(0xbee)===_0x2a2398(0xbee))return this[_0x2a2398(0xa20)];else this[_0x2a2398(0x78d)]=new _0x2e1505(),this[_0x2a2398(0x9fd)](this[_0x2a2398(0x78d)]);}return this[_0x2a2398(0xa20)]=VisuMZ['BattleCore']['Settings'][_0x2a2398(0x18b)]['Style'][_0x2a2398(0x172)]()['trim'](),this[_0x2a2398(0xa20)]==='sideview_ui'&&!Imported['VisuMZ_3_SideviewBattleUI']&&(_0x2a2398(0x7f9)===_0x2a2398(0x3cf)?this[_0x2a2398(0x9fc)]():this[_0x2a2398(0xa20)]='default'),this[_0x2a2398(0xa20)]===_0x2a2398(0x90f)&&!Imported['VisuMZ_3_FrontviewBattleUI']&&(this['_battleLayoutStyle']=_0x2a2398(0x39e)),this[_0x2a2398(0xa20)];},VisuMZ['BattleCore']['Scene_Battle_windowAreaHeight']=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x8da)],Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x8da)]=function(){const _0x820641=_0x5d4113,_0x141767=this[_0x820641(0x30c)]();switch(_0x141767){case _0x820641(0x95c):return this[_0x820641(0x6f5)](Math[_0x820641(0xbcc)](0x1,$gameParty['maxBattleMembers']()),!![]);break;default:return VisuMZ[_0x820641(0x710)][_0x820641(0x67f)][_0x820641(0x701)](this);break;}},VisuMZ[_0x5d4113(0x710)]['Scene_Battle_helpWindowRect']=Scene_Battle['prototype'][_0x5d4113(0xbf4)],Scene_Battle[_0x5d4113(0x44d)]['helpWindowRect']=function(){const _0x3964e4=_0x5d4113,_0x33f760=this[_0x3964e4(0x30c)]();switch(_0x33f760){case'border':return this['helpWindowRectBorderStyle']();break;case _0x3964e4(0x39e):case _0x3964e4(0x95c):case'xp':case _0x3964e4(0x453):default:return VisuMZ['BattleCore'][_0x3964e4(0x372)]['call'](this);break;}},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0xabd)]=function(){const _0x3d5f18=_0x5d4113,_0x237b44=this['battleLayoutStyle']();switch(_0x237b44){case'xp':case _0x3d5f18(0x453):return this[_0x3d5f18(0xa27)]();break;case _0x3d5f18(0xc3e):return this[_0x3d5f18(0xc2c)]();break;case _0x3d5f18(0x39e):case'list':default:return this[_0x3d5f18(0x4b2)]();break;}},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x7b7)]=Scene_Battle[_0x5d4113(0x44d)]['partyCommandWindowRect'],Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x4aa)]=function(){const _0x1df012=_0x5d4113,_0x4198e1=this[_0x1df012(0x30c)]();switch(_0x4198e1){case'xp':case _0x1df012(0x453):return this['partyCommandWindowRectXPStyle']();break;case _0x1df012(0xc3e):return this[_0x1df012(0x75d)]();case _0x1df012(0x39e):case'list':default:return this[_0x1df012(0x8a3)]();break;}},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x8a3)]=function(){const _0x43480c=_0x5d4113,_0x539e25=VisuMZ[_0x43480c(0x710)][_0x43480c(0x326)]['BattleLayout'],_0x51157b=_0x539e25[_0x43480c(0x666)]||0xc0,_0x2065ed=this[_0x43480c(0x8da)](),_0x2b26b6=this['isRightInputMode']()?Graphics[_0x43480c(0xbb8)]-_0x51157b:0x0,_0xf80535=Graphics[_0x43480c(0x75f)]-_0x2065ed;return new Rectangle(_0x2b26b6,_0xf80535,_0x51157b,_0x2065ed);},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x815)]=function(){const _0x218c24=_0x5d4113;return this[_0x218c24(0x4aa)]();},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x6ba)]=Scene_Battle['prototype'][_0x5d4113(0x872)],Scene_Battle['prototype'][_0x5d4113(0x872)]=function(){const _0x29d8dc=_0x5d4113,_0x36e17c=this[_0x29d8dc(0x30c)]();switch(_0x36e17c){case'xp':case _0x29d8dc(0x453):case _0x29d8dc(0xc3e):break;case'default':case _0x29d8dc(0x95c):default:VisuMZ['BattleCore'][_0x29d8dc(0x6ba)]['call'](this);break;}},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x3ef)]=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x861)],Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x861)]=function(){const _0xe8fbc6=_0x5d4113;VisuMZ['BattleCore']['Scene_Battle_startActorSelection'][_0xe8fbc6(0x701)](this),this['makeTargetSelectionMoreVisible']();},VisuMZ['BattleCore'][_0x5d4113(0x1b5)]=Scene_Battle[_0x5d4113(0x44d)]['startEnemySelection'],Scene_Battle[_0x5d4113(0x44d)]['startEnemySelection']=function(){const _0x36aee8=_0x5d4113;VisuMZ[_0x36aee8(0x710)][_0x36aee8(0x1b5)]['call'](this),this[_0x36aee8(0x684)]['autoSelect'](),this['makeTargetSelectionMoreVisible']();},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0xc15)]=function(){const _0x12b575=_0x5d4113,_0xfc713f=this[_0x12b575(0x30c)]();if(['xp','portrait','border'][_0x12b575(0x4b0)](_0xfc713f)){if(_0x12b575(0x9ef)!=='JsmcF')this['_actorCommandWindow'][_0x12b575(0xbd0)]();else{const _0x2787f4=[_0x12b575(0x4cb),'PostApplyAsUserJS',_0x12b575(0x354),_0x12b575(0x32f),_0x12b575(0x88a),_0x12b575(0x70a),_0x12b575(0x943),'PostDamageAsTargetJS',_0x12b575(0x219),_0x12b575(0x469),_0x12b575(0x4ea),'PostEndActionJS','PreStartBattleJS',_0x12b575(0x586),'PreEndBattleJS',_0x12b575(0xc32),_0x12b575(0xc5c),_0x12b575(0x3df),_0x12b575(0x9b3),'EscapeFailureJS',_0x12b575(0x7cb),_0x12b575(0x2cc),_0x12b575(0x7dd),'PostEndTurnJS',_0x12b575(0x5db),_0x12b575(0x3d4)];for(const _0x103b82 of _0x2787f4){_0x282710[_0x12b575(0x710)][_0x12b575(0x4ef)](_0x234292,_0x103b82);}}}(_0xfc713f===_0x12b575(0xc3e)||this[_0x12b575(0x7a5)]())&&(this[_0x12b575(0x143)][_0x12b575(0xbd0)](),this[_0x12b575(0x48e)][_0x12b575(0xbd0)]());},VisuMZ['BattleCore'][_0x5d4113(0x638)]=Scene_Battle[_0x5d4113(0x44d)]['onActorOk'],Scene_Battle[_0x5d4113(0x44d)]['onActorOk']=function(){const _0x54c79d=_0x5d4113;VisuMZ[_0x54c79d(0x710)][_0x54c79d(0x638)][_0x54c79d(0x701)](this),this[_0x54c79d(0x667)]();},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x91b)]=function(){const _0x55a316=_0x5d4113;return[_0x55a316(0x5eb),_0x55a316(0x707),_0x55a316(0x510)][_0x55a316(0x4b0)](this[_0x55a316(0x43d)][_0x55a316(0x355)]());},VisuMZ['BattleCore'][_0x5d4113(0xb4b)]=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x6e2)],Scene_Battle['prototype']['onActorCancel']=function(){const _0x5bd0b0=_0x5d4113;this[_0x5bd0b0(0x91b)]()?_0x5bd0b0(0x7ce)===_0x5bd0b0(0x7ce)?(this[_0x5bd0b0(0x480)][_0x5bd0b0(0xb89)](),this[_0x5bd0b0(0x9b6)][_0x5bd0b0(0x712)](),this[_0x5bd0b0(0x43d)][_0x5bd0b0(0x5d2)]()):_0x1f8b33[_0x5bd0b0(0xac1)](_0x5ec584(_0x28f74a['$1'])):VisuMZ['BattleCore']['Scene_Battle_onActorCancel']['call'](this),this[_0x5bd0b0(0xb42)]();},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xc6b)]=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x626)],Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x626)]=function(){const _0x4c0b22=_0x5d4113;VisuMZ[_0x4c0b22(0x710)][_0x4c0b22(0xc6b)][_0x4c0b22(0x701)](this),this[_0x4c0b22(0x667)]();},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x916)]=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x178)],Scene_Battle[_0x5d4113(0x44d)]['onEnemyCancel']=function(){const _0x5b1d47=_0x5d4113;this[_0x5b1d47(0x91b)]()?(this['_statusWindow'][_0x5b1d47(0xb89)](),this[_0x5b1d47(0x684)][_0x5b1d47(0x712)](),this[_0x5b1d47(0x43d)][_0x5b1d47(0x5d2)]()):VisuMZ[_0x5b1d47(0x710)][_0x5b1d47(0x916)][_0x5b1d47(0x701)](this),this['cancelTargetSelectionVisibility']();},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x667)]=function(){const _0x98b79a=_0x5d4113,_0x53365e=this[_0x98b79a(0x30c)]();(_0x53365e==='border'||this[_0x98b79a(0x7a5)]())&&(_0x98b79a(0x449)===_0x98b79a(0x921)?_0x38735b[_0x98b79a(0x987)]?this[_0x98b79a(0xa02)]=_0x98b79a(0x79a):this[_0x98b79a(0xa02)]=_0x98b79a(0x39e):(this[_0x98b79a(0x143)]['open'](),this[_0x98b79a(0x143)]['active']&&this[_0x98b79a(0x143)][_0x98b79a(0xb89)](),this[_0x98b79a(0x48e)][_0x98b79a(0xbbf)](),this[_0x98b79a(0x48e)]['active']&&this[_0x98b79a(0x48e)][_0x98b79a(0xb89)]()));},Scene_Battle[_0x5d4113(0x44d)]['cancelTargetSelectionVisibility']=function(){const _0x2da722=_0x5d4113,_0x5f2816=this[_0x2da722(0x30c)]();['xp',_0x2da722(0x453),'border'][_0x2da722(0x4b0)](_0x5f2816)&&this[_0x2da722(0x43d)][_0x2da722(0xbbf)](),this[_0x2da722(0x667)]();},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x4b2)]=function(){const _0x5c2659=_0x5d4113,_0x592ebf=VisuMZ['BattleCore'][_0x5c2659(0x326)]['BattleLayout'],_0x443866=Window_BattleStatus[_0x5c2659(0x44d)][_0x5c2659(0xbe9)](),_0x5330bf=Graphics[_0x5c2659(0xbb8)]-(_0x592ebf[_0x5c2659(0x666)]||0xc0),_0x4470a1=this[_0x5c2659(0x8da)]()+_0x443866,_0x3adff9=this[_0x5c2659(0x78e)]()?0x0:Graphics[_0x5c2659(0xbb8)]-_0x5330bf,_0xa63422=Graphics[_0x5c2659(0x75f)]-_0x4470a1+_0x443866;return new Rectangle(_0x3adff9,_0xa63422,_0x5330bf,_0x4470a1);},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0xa27)]=function(){const _0x4161a9=_0x5d4113,_0x14485c=Window_BattleStatus['prototype'][_0x4161a9(0xbe9)](),_0xfbb148=Graphics[_0x4161a9(0xbb8)],_0x4a094c=this[_0x4161a9(0x8da)]()+_0x14485c,_0x379faf=0x0,_0x1b5f56=Graphics[_0x4161a9(0x75f)]-_0x4a094c+_0x14485c;return new Rectangle(_0x379faf,_0x1b5f56,_0xfbb148,_0x4a094c);},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x5da)]=function(){const _0x330a43=_0x5d4113,_0x76b6ca=Graphics[_0x330a43(0xbb8)]/0x2,_0x116f7c=this[_0x330a43(0x6f5)](VisuMZ[_0x330a43(0x710)]['Settings'][_0x330a43(0x18b)]['XPActorCommandLines'],!![]),_0x4dae01=Math['round']((Graphics['boxWidth']-_0x76b6ca)/0x2),_0x6a0fb2=Graphics['boxHeight']-_0x116f7c-this[_0x330a43(0xa27)]()['height'];return new Rectangle(_0x4dae01,_0x6a0fb2,_0x76b6ca,_0x116f7c);},Scene_Battle['prototype'][_0x5d4113(0x1ea)]=function(){const _0xaf053f=_0x5d4113,_0x2db29f=Graphics['width'],_0x870ea7=Math[_0xaf053f(0xb50)]((Graphics[_0xaf053f(0xbb8)]-_0x2db29f)/0x2),_0xe22ebb=this['helpAreaHeight'](),_0x9ed09=(Graphics[_0xaf053f(0x6ce)]-Graphics['boxHeight'])/-0x2;return new Rectangle(_0x870ea7,_0x9ed09,_0x2db29f,_0xe22ebb);},Scene_Battle[_0x5d4113(0x44d)]['statusWindowRectBorderStyle']=function(){const _0x506c2b=_0x5d4113,_0x38acdd=Graphics['width'],_0x31b496=Math[_0x506c2b(0xb50)]((Graphics[_0x506c2b(0xbb8)]-_0x38acdd)/0x2),_0x5e3cc3=this[_0x506c2b(0x6f5)](0x4,!![]),_0x24f379=Graphics[_0x506c2b(0x75f)]-_0x5e3cc3+(Graphics['height']-Graphics[_0x506c2b(0x75f)])/0x2;return new Rectangle(_0x31b496,_0x24f379,_0x38acdd,_0x5e3cc3);},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x75d)]=function(){const _0x1ccf38=_0x5d4113,_0x1a27e5=Math[_0x1ccf38(0xa63)](Graphics[_0x1ccf38(0x61e)]/0x3),_0x9e774b=this['isRightInputMode']()?(Graphics['width']+Graphics['boxWidth'])/0x2-_0x1a27e5:(Graphics[_0x1ccf38(0x61e)]-Graphics[_0x1ccf38(0xbb8)])/-0x2,_0xd067bf=this[_0x1ccf38(0x1ea)](),_0x19755a=_0xd067bf['y']+_0xd067bf[_0x1ccf38(0x6ce)],_0x1fb622=this['statusWindowRectBorderStyle'](),_0x2c981a=_0x1fb622['y']-_0x19755a;return new Rectangle(_0x9e774b,_0x19755a,_0x1a27e5,_0x2c981a);},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x78a)]=function(){const _0x27a003=_0x5d4113,_0x407519=Math[_0x27a003(0x6aa)](Graphics[_0x27a003(0x61e)]/0x3),_0x29fea2=Math[_0x27a003(0xb50)]((Graphics[_0x27a003(0xbb8)]-_0x407519)/0x2),_0x83a01a=this[_0x27a003(0x75d)](),_0x4de4fd=_0x83a01a['y'],_0x5bb879=_0x83a01a[_0x27a003(0x6ce)];return new Rectangle(_0x29fea2,_0x4de4fd,_0x407519,_0x5bb879);},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0xc4f)]=function(){const _0x4937cd=_0x5d4113;this[_0x4937cd(0x215)]['y']=this[_0x4937cd(0xc0a)]['y']+this['_helpWindow'][_0x4937cd(0x6ce)],this[_0x4937cd(0x78e)]()?this[_0x4937cd(0x30c)]()===_0x4937cd(0xc3e)?this['_cancelButton']['x']=0x8:this[_0x4937cd(0x215)]['x']=-this[_0x4937cd(0x215)][_0x4937cd(0x61e)]-0x4:this[_0x4937cd(0x215)]['x']=Graphics[_0x4937cd(0x61e)]-(Graphics[_0x4937cd(0x61e)]-Graphics['boxWidth'])/0x2-this[_0x4937cd(0x215)][_0x4937cd(0x61e)]-0x4;},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x74e)]=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x7a3)],Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x7a3)]=function(){const _0x3525be=_0x5d4113;if(this['battleLayoutStyle']()===_0x3525be(0xc3e))return this[_0x3525be(0x78a)]();else return this[_0x3525be(0x7a5)]()?this['skillItemWindowRectMiddle']():VisuMZ[_0x3525be(0x710)][_0x3525be(0x74e)][_0x3525be(0x701)](this);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x8d8)]=Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x79b)],Scene_Battle['prototype'][_0x5d4113(0x79b)]=function(){const _0x1b5148=_0x5d4113;if(this[_0x1b5148(0x30c)]()===_0x1b5148(0xc3e))return this[_0x1b5148(0x78a)]();else{if(this[_0x1b5148(0x7a5)]()){if('yDbCO'!==_0x1b5148(0xafe))return this[_0x1b5148(0x265)]();else _0xc77035['BattleCore'][_0x1b5148(0x1d2)][_0x1b5148(0x701)](this,_0x1a18be),this[_0x1b5148(0xa6b)]();}else return VisuMZ[_0x1b5148(0x710)][_0x1b5148(0x8d8)]['call'](this);}},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x7a5)]=function(){const _0x1f770b=_0x5d4113;return VisuMZ[_0x1f770b(0x710)][_0x1f770b(0x326)][_0x1f770b(0x18b)][_0x1f770b(0xa07)];},Scene_Battle['prototype'][_0x5d4113(0x265)]=function(){const _0x262466=_0x5d4113,_0x53cdd2=Sprite_Button[_0x262466(0x44d)][_0x262466(0xab6)]()*0x2+0x4;let _0x2406df=Graphics[_0x262466(0xbb8)]-_0x53cdd2;Imported[_0x262466(0x567)]&&SceneManager[_0x262466(0x401)]()&&(_0x2406df+=_0x53cdd2);const _0x4571a3=this[_0x262466(0x347)](),_0x5377d5=Graphics[_0x262466(0x75f)]-_0x4571a3-this[_0x262466(0xabd)]()[_0x262466(0x6ce)]+Window_BattleStatus[_0x262466(0x44d)][_0x262466(0xbe9)](),_0x2235ef=0x0;return new Rectangle(_0x2235ef,_0x4571a3,_0x2406df,_0x5377d5);},Scene_Battle[_0x5d4113(0x44d)][_0x5d4113(0x947)]=function(){const _0x585048=_0x5d4113;if(!VisuMZ[_0x585048(0x710)]['Settings'][_0x585048(0x194)][_0x585048(0x69e)])return;this[_0x585048(0x289)]=new Sprite(),this[_0x585048(0x289)]['x']=this[_0x585048(0xb16)]['x'],this[_0x585048(0x289)]['y']=this[_0x585048(0xb16)]['y'];const _0x37747d=this['children'][_0x585048(0x6ef)](this['_windowLayer']);this[_0x585048(0xc48)](this[_0x585048(0x289)],_0x37747d);for(let _0x252c4a=0x0;_0x252c4a<0x8;_0x252c4a++){if(_0x585048(0xc0b)!==_0x585048(0x1f8)){const _0x675c3d=new Window_EnemyName(_0x252c4a);this[_0x585048(0x289)][_0x585048(0x9fd)](_0x675c3d);}else{let _0x433b47=0x0;return _0x433b47;}}},Sprite_Battler[_0x5d4113(0xa0a)]=VisuMZ['BattleCore']['Settings'][_0x5d4113(0xc03)][_0x5d4113(0xc76)],VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xb1a)]=Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x22f)],Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x22f)]=function(){const _0x560918=_0x5d4113;VisuMZ[_0x560918(0x710)][_0x560918(0xb1a)][_0x560918(0x701)](this),this[_0x560918(0x210)]();if(this[_0x560918(0x8ab)]===Sprite_Enemy)this[_0x560918(0x18a)]();this[_0x560918(0xb85)]();},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x210)]=function(){const _0x1ac835=_0x5d4113;this[_0x1ac835(0x8bf)]=0x0,this['_baseY']=0x0,this[_0x1ac835(0x30e)]=0x0,this[_0x1ac835(0xb87)]=0x0,this[_0x1ac835(0x362)]=0x0,this[_0x1ac835(0x833)]=0x0,this['_floatEasing']=_0x1ac835(0x1ab),this[_0x1ac835(0x2d2)]=0x0,this['_jumpMaxHeight']=0x0,this['_jumpDuration']=0x0,this[_0x1ac835(0xa84)]=0x0,this['_targetOpacity']=0xff,this['_opacityDuration']=0x0,this[_0x1ac835(0x703)]=0x0,this[_0x1ac835(0x442)]=_0x1ac835(0x1ab),this[_0x1ac835(0x19e)]=0x0,this[_0x1ac835(0x8c7)]=0x0,this['_angleDuration']=0x0,this[_0x1ac835(0x6ed)]=0x0,this[_0x1ac835(0x36f)]='Linear',this[_0x1ac835(0x5d1)]=!![],this[_0x1ac835(0x332)]=0x0,this[_0x1ac835(0x43e)]=0x0,this[_0x1ac835(0x590)]=0x0,this['_targetSkewY']=0x0,this['_skewDuration']=0x0,this[_0x1ac835(0x883)]=0x0,this['_skewEasing']=_0x1ac835(0x1ab),this['_growX']=0x1,this[_0x1ac835(0xa9c)]=0x1,this[_0x1ac835(0x37a)]=0x1,this[_0x1ac835(0xc14)]=0x1,this[_0x1ac835(0xa8f)]=0x0,this[_0x1ac835(0x28d)]=0x0,this['_growEasing']='Linear',this['_flipScaleX']=0x1,this[_0x1ac835(0x5f8)]=0x0,this[_0x1ac835(0x6f4)]=0x0,this['_homeDuration']=0x0,this[_0x1ac835(0x530)]=0x0,this[_0x1ac835(0xb19)]=_0x1ac835(0x1ab),this[_0x1ac835(0x72b)]=0x0,this['_shakeFlinchPower']=0x0;},Sprite_Battler['prototype'][_0x5d4113(0x18a)]=function(){const _0x453eb0=_0x5d4113;this[_0x453eb0(0xabb)]=new Sprite(),this[_0x453eb0(0xabb)][_0x453eb0(0x432)]=ImageManager['loadSystem'](_0x453eb0(0x672)),this[_0x453eb0(0xabb)][_0x453eb0(0x432)][_0x453eb0(0x87e)]=VisuMZ[_0x453eb0(0x710)][_0x453eb0(0x326)][_0x453eb0(0xc03)][_0x453eb0(0xaa6)],this['_shadowSprite'][_0x453eb0(0x636)]['x']=0.5,this[_0x453eb0(0xabb)][_0x453eb0(0x636)]['y']=0.5,this['_shadowSprite']['y']=-0x2,this['_shadowSprite'][_0x453eb0(0x39c)]=![],this[_0x453eb0(0x9fd)](this[_0x453eb0(0xabb)]);},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0xb85)]=function(){const _0x37a95f=_0x5d4113;this[_0x37a95f(0x148)]=new Sprite(),this[_0x37a95f(0x148)][_0x37a95f(0x636)]['x']=0.5,this[_0x37a95f(0x148)][_0x37a95f(0x636)]['y']=0.5,this[_0x37a95f(0x9fd)](this['_distortionSprite']);},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x779)]=function(){const _0x202f1a=_0x5d4113;if(!this[_0x202f1a(0x148)])return;if(this['_shadowSprite']){if(_0x202f1a(0x920)!=='iwlCg'){const _0xc6985=this[_0x202f1a(0x90c)](this['_distortionSprite']);this[_0x202f1a(0xc48)](this[_0x202f1a(0xabb)],_0xc6985),this[_0x202f1a(0x643)]();}else{if(_0x57bc31[_0x202f1a(0x4f1)]())_0x5d5dc9[_0x202f1a(0x809)](_0x207fc5);return _0x24f006[_0x202f1a(0x710)]['Game_Action_evalDamageFormula'][_0x202f1a(0x701)](this);}}this[_0x202f1a(0x1cf)]&&(_0x202f1a(0xa89)!==_0x202f1a(0xa89)?_0x1dd21e[_0x202f1a(0x710)]['JS'][_0x9062d7]['call'](this,this,this,_0x277d8b,0x0):this[_0x202f1a(0x148)][_0x202f1a(0x9fd)](this[_0x202f1a(0x1cf)]));this[_0x202f1a(0xc6c)]&&this[_0x202f1a(0x148)][_0x202f1a(0x9fd)](this['_weaponSprite']);this[_0x202f1a(0x6e9)]&&this[_0x202f1a(0x148)][_0x202f1a(0x9fd)](this[_0x202f1a(0x6e9)]);if(this['_injectAnimationSprite']){if(_0x202f1a(0x1b6)===_0x202f1a(0x1b6))this[_0x202f1a(0x148)][_0x202f1a(0x9fd)](this[_0x202f1a(0x5b3)]);else{_0x1f5e2e[_0x202f1a(0x710)][_0x202f1a(0x295)][_0x202f1a(0x701)](this,_0x360fd6,_0x541528);if(!_0x135b8f[_0x202f1a(0x264)]())return;for(const _0x59e78d of this[_0x202f1a(0x652)]()[_0x202f1a(0xa1b)]()){if(_0x59e78d===_0x3c7309[_0x202f1a(0x747)]()){let _0x30ef19=_0x33c3f6[_0x202f1a(0xbe3)];_0x30ef19*=_0x3944da[_0x202f1a(0x38c)](_0x59e78d),_0x30ef19*=this[_0x202f1a(0x652)]()[_0x202f1a(0xc77)](_0x59e78d),_0x30ef19*=this[_0x202f1a(0xbad)](_0x2af6ee),_0x2a3eb9['random']()<_0x30ef19&&(_0x107651[_0x202f1a(0x519)]=!![],this[_0x202f1a(0xb34)](_0x4d0059));}}}}this[_0x202f1a(0x1cd)]&&this[_0x202f1a(0x148)]['addChild'](this['_dragonbonesSpriteContainer']);},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x643)]=function(){const _0x4a9565=_0x5d4113;if(!this[_0x4a9565(0xabb)])return;if(this[_0x4a9565(0x484)]&&this[_0x4a9565(0x484)]['svBattlerShadowVisible']()){const _0x345415=this['_shadowSprite']['bitmap'];this[_0x4a9565(0xabb)]['setFrame'](0x0,0x0,_0x345415[_0x4a9565(0x61e)],_0x345415[_0x4a9565(0x6ce)]);}else this['_shadowSprite']['setFrame'](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x294)]=function(){const _0x386a00=_0x5d4113;return SceneManager[_0x386a00(0x2ab)]()?SceneManager['_scene']['_spriteset'][_0x386a00(0x78d)]:this[_0x386a00(0x341)];},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x749)]=function(_0x58ec3b,_0x1ddacd){const _0xf20bdd=_0x5d4113;if(!this[_0xf20bdd(0x484)][_0xf20bdd(0xb20)]())return;if(BattleManager[_0xf20bdd(0x6bf)]())return;const _0x36e331=VisuMZ[_0xf20bdd(0x710)][_0xf20bdd(0x326)]['Damage'],_0x377161=new Sprite_Damage();_0x377161[_0xf20bdd(0x9e0)]=_0x36e331[_0xf20bdd(0x524)],this[_0xf20bdd(0xa8c)](_0x377161),_0x377161['setupTextPopup'](_0x58ec3b,_0x1ddacd),this['addDamageSprite'](_0x377161);},Sprite_Battler['prototype'][_0x5d4113(0xb7e)]=function(_0x156575,_0x3c1c55,_0x2c1f4d){const _0xdda0ac=_0x5d4113;if(!this['_battler'][_0xdda0ac(0xb20)]())return;if(BattleManager[_0xdda0ac(0x6bf)]())return;const _0x3ff714=VisuMZ['BattleCore'][_0xdda0ac(0x326)][_0xdda0ac(0x96d)],_0x388852=new Sprite_Damage();_0x388852['_duration']=_0x3ff714[_0xdda0ac(0x524)],this[_0xdda0ac(0xa8c)](_0x388852),_0x388852[_0xdda0ac(0xb7e)](_0x156575,_0x3c1c55,_0x2c1f4d),this[_0xdda0ac(0xb9d)](_0x388852);},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x196)]=function(){const _0x2c7b21=_0x5d4113;if(!this[_0x2c7b21(0x484)][_0x2c7b21(0xa30)]())return;while(this[_0x2c7b21(0x484)][_0x2c7b21(0xa30)]()){this[_0x2c7b21(0x484)][_0x2c7b21(0xb20)]()&&this[_0x2c7b21(0x754)]();}this[_0x2c7b21(0x484)][_0x2c7b21(0x605)](),this[_0x2c7b21(0x484)][_0x2c7b21(0x588)]();},Sprite_Battler[_0x5d4113(0x44d)]['createDamageSprite']=function(){const _0x367cc0=_0x5d4113;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x3670b3=VisuMZ['BattleCore'][_0x367cc0(0x326)][_0x367cc0(0x96d)],_0x2d3b87=new Sprite_Damage();_0x2d3b87[_0x367cc0(0x9e0)]=_0x3670b3[_0x367cc0(0x524)],this[_0x367cc0(0xa8c)](_0x2d3b87),_0x2d3b87[_0x367cc0(0xbd4)](this[_0x367cc0(0x484)]),_0x2d3b87[_0x367cc0(0x584)](this['_battler']),this[_0x367cc0(0xb9d)](_0x2d3b87);},Sprite_Battler['prototype']['addDamageSprite']=function(_0x28712f){const _0x7edeba=_0x5d4113;this[_0x7edeba(0x669)][_0x7edeba(0x2ce)](_0x28712f);if(this[_0x7edeba(0x4e8)]()){const _0x2c01d6=SceneManager[_0x7edeba(0x5a4)][_0x7edeba(0x480)];if(_0x2c01d6)_0x2c01d6[_0x7edeba(0xb9d)](_0x28712f,this[_0x7edeba(0x484)]);}else{this[_0x7edeba(0x294)]()[_0x7edeba(0x9fd)](_0x28712f);if(SceneManager['isBattleFlipped']())_0x28712f[_0x7edeba(0x596)]['x']=-0x1;}},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x4e8)]=function(){const _0x5caf21=_0x5d4113;return!$gameSystem['isSideView']()&&this['_battler']&&this[_0x5caf21(0x484)]['isActor']();},Sprite_Battler['prototype'][_0x5d4113(0xa8c)]=function(_0x515450){const _0x82c7eb=_0x5d4113;this[_0x82c7eb(0x9b5)](_0x515450,!![]);const _0x1e7a13=VisuMZ['BattleCore'][_0x82c7eb(0x326)][_0x82c7eb(0x96d)],_0x235865=SceneManager[_0x82c7eb(0x800)]()?-0x1:0x1;if(_0x1e7a13[_0x82c7eb(0x491)]){if(_0x82c7eb(0xaf8)!=='EHHxA')for(const _0x56352d of this[_0x82c7eb(0x669)]){_0x56352d['x']+=_0x1e7a13[_0x82c7eb(0x513)]*_0x235865,_0x56352d['y']+=_0x1e7a13[_0x82c7eb(0x405)];}else return _0x3ce422[_0x82c7eb(0xa02)];}else{const _0x123eb4=this[_0x82c7eb(0x669)][this['_damages'][_0x82c7eb(0x7da)]-0x1];_0x123eb4&&(_0x82c7eb(0x982)===_0x82c7eb(0x1ae)?_0x45d9cd[_0x82c7eb(0x2ce)](_0x82c7eb(0x4c9),_0x4ed084,_0x3201de,!![]):(_0x515450['x']=_0x123eb4['x']+_0x1e7a13[_0x82c7eb(0x513)]*_0x235865,_0x515450['y']=_0x123eb4['y']+_0x1e7a13[_0x82c7eb(0x405)]));}},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x9b5)]=function(_0x14233c,_0x3466cd){const _0x57587d=_0x5d4113,_0x5d534d=SceneManager[_0x57587d(0x800)]()?-0x1:0x1;let _0x400896=this[_0x57587d(0x8bf)];_0x400896+=this['extraPositionX']();let _0xff0e8a=this[_0x57587d(0x559)];const _0x3d30c9=this[_0x57587d(0x148)][_0x57587d(0x596)]['y'];_0xff0e8a+=this[_0x57587d(0xa51)]();const _0x42811c=SceneManager[_0x57587d(0x5a4)]['_statusWindow'];if(_0x42811c&&this[_0x57587d(0x341)]===_0x42811c){if(_0x57587d(0x8c4)!==_0x57587d(0xaf3)){_0x400896+=_0x42811c['x']-this['damageOffsetX']();const _0x3fd7d9=_0x42811c[_0x57587d(0x950)]()*0x3/0x4;_0xff0e8a=_0x42811c['y']+_0x3fd7d9,_0xff0e8a=Math['min'](_0xff0e8a,_0x42811c['y']+this['y']-this[_0x57587d(0x6ce)]+_0x3fd7d9);}else{if(!_0x1922c6['isSceneBattle']())return;_0x58e03a[_0x57587d(0xb3d)](_0x1da1e5,_0x5e1246);const _0x557d61=_0x1be1a2['getLastPluginCommandInterpreter'](),_0x5d0977=_0x46361e['MotionFrameWait']*_0x2d9122[_0x57587d(0xa0a)];_0x557d61[_0x57587d(0x64b)](_0x5d0977);}}_0x14233c['x']=Math[_0x57587d(0xb50)](_0x400896+this[_0x57587d(0x9eb)]()*_0x5d534d),_0x14233c['y']=Math[_0x57587d(0xb50)](_0xff0e8a+this[_0x57587d(0x764)]());},VisuMZ['BattleCore'][_0x5d4113(0x842)]=Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x9eb)],Sprite_Battler[_0x5d4113(0x44d)]['damageOffsetX']=function(){const _0x36f1a3=_0x5d4113;let _0x30b494=VisuMZ[_0x36f1a3(0x710)][_0x36f1a3(0x842)]['call'](this),_0x131087=VisuMZ[_0x36f1a3(0x710)][_0x36f1a3(0x326)][_0x36f1a3(0x96d)]['PopupOffsetX']||0x0;return Math[_0x36f1a3(0xb50)](_0x30b494+_0x131087);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xc17)]=Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x764)],Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x764)]=function(){const _0x157fbb=_0x5d4113;let _0x595dec=VisuMZ[_0x157fbb(0x710)][_0x157fbb(0xc17)][_0x157fbb(0x701)](this);switch(VisuMZ[_0x157fbb(0x710)]['Settings'][_0x157fbb(0x96d)]['PopupPosition']){case'head':_0x595dec-=this['height']*this['scale']['y'];break;case _0x157fbb(0x4d5):_0x595dec-=this[_0x157fbb(0x6ce)]*this['scale']['y']*0.5;break;}let _0x14661a=VisuMZ['BattleCore'][_0x157fbb(0x326)][_0x157fbb(0x96d)][_0x157fbb(0xad5)]||0x0;return Math[_0x157fbb(0xb50)](_0x595dec+_0x14661a);},Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0x9eb)]=function(){const _0xf3ee33=_0x5d4113;return Sprite_Battler['prototype'][_0xf3ee33(0x9eb)][_0xf3ee33(0x701)](this);},Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0x764)]=function(){const _0x309eb9=_0x5d4113;return Sprite_Battler[_0x309eb9(0x44d)][_0x309eb9(0x764)][_0x309eb9(0x701)](this);},Sprite_Battler[_0x5d4113(0x44d)]['destroyDamageSprite']=function(_0xd1a0ed){const _0x4e3d32=_0x5d4113;this[_0x4e3d32(0x4e8)]()?SceneManager['_scene'][_0x4e3d32(0x480)][_0x4e3d32(0x45d)](_0xd1a0ed):(this['damageContainer']()[_0x4e3d32(0x5e1)](_0xd1a0ed),this[_0x4e3d32(0x669)][_0x4e3d32(0x828)](_0xd1a0ed),_0xd1a0ed[_0x4e3d32(0x459)]());},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x83b)]=Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0xb5f)],Sprite_Battler[_0x5d4113(0x44d)]['setHome']=function(_0xd31946,_0x3c7bfc){const _0x2aa396=_0x5d4113,_0x107871=VisuMZ[_0x2aa396(0x710)]['Settings'];if(this['constructor']===Sprite_Actor)'XpqqJ'==='XpqqJ'?(_0xd31946+=_0x107871[_0x2aa396(0xc03)][_0x2aa396(0x5cb)]||0x0,_0x3c7bfc+=_0x107871[_0x2aa396(0xc03)][_0x2aa396(0x191)]||0x0):this[_0x2aa396(0x22a)]=null;else this[_0x2aa396(0x8ab)]===Sprite_Enemy&&(_0xd31946+=_0x107871['Enemy'][_0x2aa396(0x5cb)]||0x0,_0x3c7bfc+=_0x107871[_0x2aa396(0x194)]['OffsetY']||0x0);if(this[_0x2aa396(0x484)]){if('iGsoX'===_0x2aa396(0x42c))_0xd31946=this[_0x2aa396(0x484)][_0x2aa396(0x2ff)]??_0xd31946,_0x3c7bfc=this[_0x2aa396(0x484)][_0x2aa396(0x52c)]??_0x3c7bfc;else return this[_0x2aa396(0x484)][_0x2aa396(0x77f)]();}VisuMZ['BattleCore']['Sprite_Battler_setHome'][_0x2aa396(0x701)](this,_0xd31946,_0x3c7bfc),this[_0x2aa396(0x5f8)]=this[_0x2aa396(0x64f)],this[_0x2aa396(0x6f4)]=this['_homeY'],this[_0x2aa396(0x887)]=0x0,this[_0x2aa396(0x530)]=0x0,this[_0x2aa396(0xb19)]=_0x2aa396(0x1ab);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x4ff)]=Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x5fb)],Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x5fb)]=function(){const _0x2419b8=_0x5d4113;VisuMZ[_0x2419b8(0x710)][_0x2419b8(0x4ff)]['call'](this),!this['_battler']&&this[_0x2419b8(0x4c0)]&&(_0x2419b8(0x615)!=='dMeqx'?_0x4e662a[_0x2419b8(0x710)]['ParseSkillNotetags'][_0x2419b8(0x701)](this,_0x533e21):this[_0x2419b8(0x4c0)]['visible']=![]);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x552)]=Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x8c9)],Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x8c9)]=function(){const _0x1ce320=_0x5d4113;this[_0x1ce320(0xa79)](),this['updateSkew'](),this[_0x1ce320(0x4a0)](),this['updateFlip'](),VisuMZ[_0x1ce320(0x710)][_0x1ce320(0x552)][_0x1ce320(0x701)](this),this[_0x1ce320(0x597)](),this[_0x1ce320(0x825)]();if(this[_0x1ce320(0x8ab)]===Sprite_Enemy)this[_0x1ce320(0x471)]();},VisuMZ['BattleCore'][_0x5d4113(0x755)]=Sprite_Battler['prototype'][_0x5d4113(0xa88)],Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0xa88)]=function(){const _0x524670=_0x5d4113;this[_0x524670(0x156)](),VisuMZ[_0x524670(0x710)][_0x524670(0x755)][_0x524670(0x701)](this),this[_0x524670(0x6e1)](),this[_0x524670(0xa7e)]();},Sprite_Battler[_0x5d4113(0x44d)]['startHomeMove']=function(_0x29d050,_0x340c3f,_0x3adf0c,_0x131866){const _0xa8d407=_0x5d4113;(this['_targetHomeX']!==_0x29d050||this[_0xa8d407(0x6f4)]!==_0x340c3f)&&(this[_0xa8d407(0x5f8)]=_0x29d050,this[_0xa8d407(0x6f4)]=_0x340c3f,this[_0xa8d407(0x887)]=_0x3adf0c,this['_homeWholeDuration']=_0x3adf0c,this[_0xa8d407(0xb19)]=_0x131866,_0x3adf0c<=0x0&&this['onHomeMoveEnd']());},Sprite_Battler['prototype'][_0x5d4113(0x156)]=function(){const _0x566a0c=_0x5d4113;if(this['_homeDuration']<=0x0)return;const _0x65871e=this['_homeDuration'],_0x812f30=this['_homeWholeDuration'],_0x5dee5a=this[_0x566a0c(0xb19)];if(Imported[_0x566a0c(0x567)])'COVNs'===_0x566a0c(0x6ca)?(this[_0x566a0c(0x64f)]=this[_0x566a0c(0xaaf)](this[_0x566a0c(0x64f)],this['_targetHomeX'],_0x65871e,_0x812f30,_0x5dee5a),this[_0x566a0c(0x52f)]=this[_0x566a0c(0xaaf)](this[_0x566a0c(0x52f)],this['_targetHomeY'],_0x65871e,_0x812f30,_0x5dee5a)):_0xef854f[_0x566a0c(0xc03)]['PrioritySortActors']=!![];else{if(_0x566a0c(0x40e)!==_0x566a0c(0x8d9))this[_0x566a0c(0x64f)]=(this['_homeX']*(_0x65871e-0x1)+this[_0x566a0c(0x5f8)])/_0x65871e,this[_0x566a0c(0x52f)]=(this['_homeY']*(_0x65871e-0x1)+this[_0x566a0c(0x6f4)])/_0x65871e;else{const _0x5d36d9=_0x3b133c(_0x17d35b['$1']),_0x317b6b=_0x4227fa[_0x566a0c(0x710)][_0x566a0c(0x978)](_0xb9e895,'Targets');_0x348cb6['BattleCore'][_0x566a0c(0x2f1)](_0x5d36d9,_0x317b6b);}}this['_homeDuration']--;if(this['_homeDuration']<=0x0)this[_0x566a0c(0x591)]();},Sprite_Battler[_0x5d4113(0x44d)]['onHomeMoveEnd']=function(){const _0x30ada0=_0x5d4113;this[_0x30ada0(0x64f)]=this[_0x30ada0(0x5f8)],this[_0x30ada0(0x52f)]=this['_targetHomeY'];},Sprite_Battler['prototype'][_0x5d4113(0x6e1)]=function(){const _0x1a864c=_0x5d4113;this[_0x1a864c(0x8bf)]=this['x'],this['_baseY']=this['y'],this['updateFloat'](),this[_0x1a864c(0x4e1)](),this['x']+=this[_0x1a864c(0xc45)](),this['y']+=this[_0x1a864c(0xa51)](),this['y']+=this[_0x1a864c(0x9c0)](),this['x']=Math['floor'](this['x']),this['y']=Math[_0x1a864c(0xa63)](this['y']);},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0xc45)]=function(){let _0x5b0769=0x0;return _0x5b0769;},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0xa51)]=function(){const _0x2455af=_0x5d4113;let _0x50184e=0x0;return this[_0x2455af(0x484)]&&!this['_battler'][_0x2455af(0xa80)]()&&(_0x50184e-=this[_0x2455af(0x30e)],_0x50184e-=this['_jumpHeight']),_0x50184e;},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x9c0)]=function(){const _0x3161a3=_0x5d4113;let _0x32359c=0x0;if(this[_0x3161a3(0x148)]&&this['constructor']!==Sprite_SvEnemy){if(_0x3161a3(0x40c)===_0x3161a3(0x40c)){const _0x5b566d=this[_0x3161a3(0x148)][_0x3161a3(0x596)]['y'];_0x32359c-=(_0x5b566d-0x1)*this[_0x3161a3(0x6ce)];}else _0x2574b4[_0x3161a3(0xa0c)]();}return _0x32359c;},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x1a1)]=function(){const _0x3aaa87=_0x5d4113,_0x5b9334=this[_0x3aaa87(0x484)]&&this[_0x3aaa87(0x484)]['isBattlerFlipped']();this[_0x3aaa87(0x60d)]=(_0x5b9334?-0x1:0x1)*Math[_0x3aaa87(0x164)](this[_0x3aaa87(0x596)]['x']);},Sprite_Battler['prototype']['startFloat']=function(_0x2a0c9c,_0x18e68b,_0x179d11){const _0x572643=_0x5d4113;if(!this[_0x572643(0x5c1)]())return;if(this[_0x572643(0xb87)]===_0x2a0c9c)return;this['_targetFloatHeight']=_0x2a0c9c,this[_0x572643(0x362)]=_0x18e68b,this[_0x572643(0x833)]=_0x18e68b,this[_0x572643(0x962)]=_0x179d11||_0x572643(0x1ab);if(_0x18e68b<=0x0)this['_floatHeight']=_0x2a0c9c;},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0xaa9)]=function(){const _0x29a398=_0x5d4113;if(this[_0x29a398(0x362)]<=0x0)return;const _0x47bd38=this[_0x29a398(0x362)],_0x395791=this[_0x29a398(0x833)],_0xb20f=this[_0x29a398(0x962)];if(Imported['VisuMZ_0_CoreEngine'])this[_0x29a398(0x30e)]=this[_0x29a398(0xaaf)](this[_0x29a398(0x30e)],this[_0x29a398(0xb87)],_0x47bd38,_0x395791,_0xb20f);else{if(_0x29a398(0x14d)===_0x29a398(0x14d))this[_0x29a398(0x30e)]=(this['_floatHeight']*(_0x47bd38-0x1)+this['_targetFloatHeight'])/_0x47bd38;else for(const _0x4a74a6 of _0x48f897){_0x4a74a6[_0x29a398(0xb51)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x557095=_0x49f4e5(_0x1f7f1d['$1']),_0x5e5004=_0x3ea7ad(_0x257d3d['$2']),_0xd821c1=_0x5e5004===0x1?this[_0x29a398(0x2c7)]:this[_0x29a398(0x902)],_0x7d821b=_0x12f899(_0x58faa6['$3']);_0xd821c1[_0x557095]=_0x7d821b;}}this[_0x29a398(0x362)]--;if(this[_0x29a398(0x362)]<=0x0)this[_0x29a398(0x608)]();},Sprite_Battler['prototype'][_0x5d4113(0x608)]=function(){const _0x33202f=_0x5d4113;this[_0x33202f(0x30e)]=this[_0x33202f(0xb87)];},Sprite_Battler[_0x5d4113(0x44d)]['isFloating']=function(){const _0x4c5121=_0x5d4113;return this[_0x4c5121(0x362)]>0x0;},Sprite_Battler[_0x5d4113(0x44d)]['startJump']=function(_0x5d38d5,_0xdfac68){const _0x31e961=_0x5d4113;if(!this['canMove']())return;if(_0xdfac68<=0x0)return;this[_0x31e961(0xa2f)]=_0x5d38d5,this['_jumpDuration']=_0xdfac68,this['_jumpWholeDuration']=_0xdfac68;},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x4e1)]=function(){const _0xac7410=_0x5d4113;if(this[_0xac7410(0x93f)]<=0x0)return;const _0x53a9df=this[_0xac7410(0xa84)]-this[_0xac7410(0x93f)],_0x25a230=this[_0xac7410(0xa84)]/0x2,_0x1df44b=this['_jumpMaxHeight'],_0x25a0a8=-_0x1df44b/Math[_0xac7410(0x26f)](_0x25a230,0x2);this[_0xac7410(0x2d2)]=_0x25a0a8*Math[_0xac7410(0x26f)](_0x53a9df-_0x25a230,0x2)+_0x1df44b,this[_0xac7410(0x93f)]--;if(this['_jumpDuration']<=0x0)return this['onJumpEnd']();},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x8fa)]=function(){this['_jumpHeight']=0x0;},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0xb43)]=function(){const _0x100e08=_0x5d4113;return this[_0x100e08(0x93f)]>0x0;},Sprite_Battler['prototype']['startOpacity']=function(_0x1433ce,_0x21578d,_0x45c733){const _0x3830d6=_0x5d4113;if(this[_0x3830d6(0x205)]===_0x1433ce)return;this[_0x3830d6(0x205)]=_0x1433ce,this['_opacityDuration']=_0x21578d,this[_0x3830d6(0x703)]=_0x21578d,this[_0x3830d6(0x442)]=_0x45c733||'Linear';if(_0x21578d<=0x0)this[_0x3830d6(0x380)]=_0x1433ce;},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0xa7e)]=function(){const _0x401a3b=_0x5d4113;if(this[_0x401a3b(0x8ab)]['name']===_0x401a3b(0x9e8))return;if(this[_0x401a3b(0x9a4)]<=0x0)return;const _0x41a5bb=this[_0x401a3b(0x9a4)],_0x23c4b0=this['_opacityWholeDuration'],_0x142ad2=this[_0x401a3b(0x442)];Imported[_0x401a3b(0x567)]?this[_0x401a3b(0x380)]=this[_0x401a3b(0xaaf)](this[_0x401a3b(0x380)],this['_targetOpacity'],_0x41a5bb,_0x23c4b0,_0x142ad2):_0x401a3b(0x5a1)!==_0x401a3b(0x691)?this[_0x401a3b(0x380)]=(this[_0x401a3b(0x380)]*(_0x41a5bb-0x1)+this[_0x401a3b(0x205)])/_0x41a5bb:this[_0x401a3b(0xb5c)](_0x401a3b(0x441));this[_0x401a3b(0x9a4)]--;if(this[_0x401a3b(0x9a4)]<=0x0)this[_0x401a3b(0xc6e)]();},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0xc6e)]=function(){this['opacity']=this['_targetOpacity'];},Sprite_Battler['prototype'][_0x5d4113(0x5de)]=function(){return this['_opacityDuration']>0x0;},Sprite_Battler[_0x5d4113(0x44d)]['updateShadow']=function(){const _0x13e337=_0x5d4113;this[_0x13e337(0xabb)]['visible']=this[_0x13e337(0x484)]['hasSvBattler'](),this[_0x13e337(0x7b5)]();},Sprite_Battler['prototype']['updateShadowPosition']=function(){const _0x44557b=_0x5d4113;if(!this[_0x44557b(0xabb)])return;this[_0x44557b(0xabb)]['y']=this[_0x44557b(0x559)]-this['y']-0x2;},Sprite_Battler[_0x5d4113(0x44d)]['updateShadowScale']=function(){const _0xb33985=_0x5d4113;if(!this[_0xb33985(0x484)])return;this[_0xb33985(0x15a)]=this['_battler'][_0xb33985(0x9cc)](),this['_shadowScaleY']=this[_0xb33985(0x484)][_0xb33985(0xaaa)]();},Game_BattlerBase[_0x5d4113(0x44d)][_0x5d4113(0x9cc)]=function(){const _0x53ff3d=_0x5d4113,_0x4364a0=this['isActor']()?this[_0x53ff3d(0x80b)]():this[_0x53ff3d(0x258)]();if(_0x4364a0){const _0x2f8663=_0x4364a0[_0x53ff3d(0x80a)];if(_0x2f8663[_0x53ff3d(0xb51)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x2f8663[_0x53ff3d(0xb51)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i)){if(_0x53ff3d(0x94d)===_0x53ff3d(0x292))this[_0x53ff3d(0x9ed)][_0x53ff3d(0x679)]();else return Number(RegExp['$1'])||0x0;}}}return 0x1;},Game_BattlerBase[_0x5d4113(0x44d)]['battlerShadowScaleY']=function(){const _0x49606b=_0x5d4113,_0x4e0fdd=this[_0x49606b(0xa65)]()?this[_0x49606b(0x80b)]():this['enemy']();if(_0x4e0fdd){if(_0x49606b(0xbaa)===_0x49606b(0x910))this[_0x49606b(0x33f)]=0x0;else{const _0x333518=_0x4e0fdd[_0x49606b(0x80a)];if(_0x333518[_0x49606b(0xb51)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x333518[_0x49606b(0xb51)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}}return 0x1;},Sprite_Battler[_0x5d4113(0x44d)]['updateScale']=function(){const _0x2c44ed=_0x5d4113;if(this[_0x2c44ed(0x8ab)]===Sprite_SvEnemy)return;this[_0x2c44ed(0x6d5)](),this['finalizeScale']();},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0xa59)]=function(){const _0xca7398=_0x5d4113,_0x35f1a8=this[_0xca7398(0x148)];_0x35f1a8&&(_0x35f1a8[_0xca7398(0x596)]['x']=this[_0xca7398(0x655)](),_0x35f1a8[_0xca7398(0x596)]['y']=this['mainSpriteScaleY']());},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x655)]=function(){let _0x2c0cc4=0x1;return _0x2c0cc4*=this['_flipScaleX'],_0x2c0cc4*=this['_growX'],_0x2c0cc4;},Sprite_Battler['prototype'][_0x5d4113(0x1f5)]=function(){const _0x557d8c=_0x5d4113;return 0x1*this[_0x557d8c(0xa9c)];},Sprite_Battler['prototype'][_0x5d4113(0x217)]=function(){return this['width']*this['mainSpriteScaleX']();},Sprite_Battler['prototype'][_0x5d4113(0x8a4)]=function(){const _0x44c141=_0x5d4113;return this[_0x44c141(0x6ce)]*this[_0x44c141(0x1f5)]();},Sprite_Battler[_0x5d4113(0x44d)]['startGrow']=function(_0xda3d10,_0x883f56,_0x3b52e6,_0x1f06d5){const _0x4a9fa5=_0x5d4113;if(!this[_0x4a9fa5(0x5c1)]())return;if(!this['_distortionSprite'])return;if(this[_0x4a9fa5(0x37a)]===_0xda3d10&&this[_0x4a9fa5(0xc14)]===_0x883f56)return;this[_0x4a9fa5(0x37a)]=_0xda3d10,this[_0x4a9fa5(0xc14)]=_0x883f56,this[_0x4a9fa5(0xa8f)]=_0x3b52e6,this['_growWholeDuration']=_0x3b52e6,this[_0x4a9fa5(0xaae)]=_0x1f06d5||_0x4a9fa5(0x1ab),_0x3b52e6<=0x0&&(this[_0x4a9fa5(0x760)]=this[_0x4a9fa5(0x37a)],this['_growY']=this[_0x4a9fa5(0xc14)]);},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x6d5)]=function(){const _0x528584=_0x5d4113;if(this[_0x528584(0xa8f)]<=0x0)return;if(!this[_0x528584(0x148)])return;const _0x586698=this[_0x528584(0xa8f)],_0x4eaab3=this['_growWholeDuration'],_0x4711f5=this[_0x528584(0xaae)];if(Imported['VisuMZ_0_CoreEngine']){if(_0x528584(0x7c9)!==_0x528584(0x8ff))this[_0x528584(0x760)]=this[_0x528584(0xaaf)](this[_0x528584(0x760)],this[_0x528584(0x37a)],_0x586698,_0x4eaab3,_0x4711f5),this[_0x528584(0xa9c)]=this['applyEasing'](this[_0x528584(0xa9c)],this[_0x528584(0xc14)],_0x586698,_0x4eaab3,_0x4711f5);else{if(this[_0x528584(0x437)]['svAnchorX']!==_0x35add3)return this['_cache'][_0x528584(0xc68)];return this[_0x528584(0x80b)]()['note']['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x528584(0x437)][_0x528584(0xc68)]=_0x21dbb6(_0xe8d275['$1']),this[_0x528584(0x437)][_0x528584(0x517)]=_0x4025c8(_0x18bb7f['$2'])):this[_0x528584(0x437)][_0x528584(0xc68)]=_0x11f63c['prototype'][_0x528584(0x773)]['call'](this),this['_cache']['svAnchorX'];}}else this[_0x528584(0x760)]=(this[_0x528584(0x760)]*(_0x586698-0x1)+this['_targetGrowX'])/_0x586698,this['_growY']=(this[_0x528584(0xa9c)]*(_0x586698-0x1)+this[_0x528584(0xc14)])/_0x586698;this[_0x528584(0xa8f)]--;if(this[_0x528584(0xa8f)]<=0x0)this[_0x528584(0xbc4)]();},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0xbc4)]=function(){const _0x53c577=_0x5d4113;this[_0x53c577(0x760)]=this['_targetGrowX'],this[_0x53c577(0xa9c)]=this[_0x53c577(0xc14)];},Sprite_Battler['prototype'][_0x5d4113(0x2c5)]=function(){return this['_growDuration']>0x0;},Sprite_Battler[_0x5d4113(0x44d)]['startSkew']=function(_0x840b3,_0x33bc42,_0x16b418,_0x36334e){const _0x2370aa=_0x5d4113;if(!this[_0x2370aa(0x5c1)]())return;if(!this[_0x2370aa(0x148)])return;if(this[_0x2370aa(0x590)]===_0x840b3&&this[_0x2370aa(0x5e9)]===_0x33bc42)return;this[_0x2370aa(0x590)]=_0x840b3,this[_0x2370aa(0x5e9)]=_0x33bc42,this['_skewDuration']=_0x16b418,this[_0x2370aa(0x883)]=_0x16b418,this[_0x2370aa(0xc73)]=_0x36334e||'Linear',_0x16b418<=0x0&&('XoAmC'!==_0x2370aa(0xbd9)?this[_0x2370aa(0x30e)]=(this[_0x2370aa(0x30e)]*(_0x3f5343-0x1)+this[_0x2370aa(0xb87)])/_0x33ae9e:(this[_0x2370aa(0x148)]['skew']['x']=this['_targetSkewX'],this[_0x2370aa(0x148)][_0x2370aa(0x33a)]['y']=this[_0x2370aa(0x5e9)]));},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x4b6)]=function(){const _0x748173=_0x5d4113;if(this[_0x748173(0x98c)]<=0x0)return;if(!this[_0x748173(0x148)])return;const _0xb479ba=this[_0x748173(0x98c)],_0x2fac7d=this[_0x748173(0x883)],_0x5370a7=this[_0x748173(0xc73)],_0x1b1ecb=this[_0x748173(0x148)];Imported[_0x748173(0x567)]?(_0x1b1ecb[_0x748173(0x33a)]['x']=this[_0x748173(0xaaf)](_0x1b1ecb['skew']['x'],this['_targetSkewX'],_0xb479ba,_0x2fac7d,_0x5370a7),_0x1b1ecb[_0x748173(0x33a)]['y']=this[_0x748173(0xaaf)](_0x1b1ecb[_0x748173(0x33a)]['y'],this[_0x748173(0x5e9)],_0xb479ba,_0x2fac7d,_0x5370a7)):(_0x1b1ecb[_0x748173(0x33a)]['x']=(_0x1b1ecb['skew']['x']*(_0xb479ba-0x1)+this['_targetSkewX'])/_0xb479ba,_0x1b1ecb[_0x748173(0x33a)]['y']=(_0x1b1ecb['skew']['y']*(_0xb479ba-0x1)+this['_targetSkewY'])/_0xb479ba);this[_0x748173(0x98c)]--;if(this['_skewDuration']<=0x0)this[_0x748173(0xc42)]();},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0xc42)]=function(){const _0x5b0a87=_0x5d4113;this[_0x5b0a87(0x148)][_0x5b0a87(0x33a)]['x']=this[_0x5b0a87(0x590)],this[_0x5b0a87(0x148)][_0x5b0a87(0x33a)]['y']=this[_0x5b0a87(0x5e9)];},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x1ee)]=function(){const _0x4d9bd8=_0x5d4113;return this[_0x4d9bd8(0x98c)]>0x0;},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x5a3)]=function(_0x20397c,_0x2a60c2,_0x530828,_0x1d093d){const _0x11d9ec=_0x5d4113;if(!this['canMove']())return;if(!this[_0x11d9ec(0x148)])return;if(this['_targetAngle']===_0x20397c)return;this[_0x11d9ec(0x8c7)]=_0x20397c,this[_0x11d9ec(0x839)]=_0x2a60c2,this[_0x11d9ec(0x6ed)]=_0x2a60c2,this[_0x11d9ec(0x36f)]=_0x530828||_0x11d9ec(0x1ab),this[_0x11d9ec(0x5d1)]=_0x1d093d;this[_0x11d9ec(0x5d1)]===undefined&&(_0x11d9ec(0xb71)===_0x11d9ec(0xb71)?this['_angleRevertOnFinish']=!![]:(this['setBattlerFlip'](![]),this['_forcedHomeX']=_0x1375ac,this[_0x11d9ec(0x52c)]=_0x357deb));if(_0x2a60c2<=0x0){if(_0x11d9ec(0xbd6)!==_0x11d9ec(0xbd6)){if(!_0xcd8681[_0x11d9ec(0x2ab)]())return;const _0x3683da=_0x498ade['_scene']['_statusWindow'];if(_0x3683da)_0x3683da[_0x11d9ec(0x255)]();}else this[_0x11d9ec(0x19e)]=_0x20397c,this['_angleRevertOnFinish']&&(this[_0x11d9ec(0x8c7)]=0x0,this[_0x11d9ec(0x19e)]=0x0);}},Sprite_Battler['prototype'][_0x5d4113(0x4a0)]=function(){const _0x187d59=_0x5d4113;this['updateAngleCalculations'](),this[_0x187d59(0x683)]();},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x414)]=function(){const _0x925fd4=_0x5d4113;if(this[_0x925fd4(0x839)]<=0x0)return;const _0x368ae2=this[_0x925fd4(0x839)],_0x185329=this['_angleWholeDuration'],_0x59be5e=this[_0x925fd4(0x36f)];Imported[_0x925fd4(0x567)]?'UUlBA'===_0x925fd4(0x728)?(this['_battlerName']=_0x23c2a0,this[_0x925fd4(0x6e9)][_0x925fd4(0x432)]=_0x45ca7c[_0x925fd4(0x495)](_0x40d3f3)):this[_0x925fd4(0x19e)]=this[_0x925fd4(0xaaf)](this[_0x925fd4(0x19e)],this['_targetAngle'],_0x368ae2,_0x185329,_0x59be5e):_0x925fd4(0x8f8)!=='cwGIk'?this[_0x925fd4(0x6d8)](_0x24796a[_0x925fd4(0x6d1)]()[_0x925fd4(0xacb)]()):this[_0x925fd4(0x19e)]=(this[_0x925fd4(0x19e)]*(_0x368ae2-0x1)+this['_targetAngle'])/_0x368ae2;this['_angleDuration']--;if(this[_0x925fd4(0x839)]<=0x0)this['onAngleEnd']();},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x69c)]=function(){const _0x452977=_0x5d4113;this[_0x452977(0x19e)]=this[_0x452977(0x8c7)],this[_0x452977(0x5d1)]&&(this[_0x452977(0x8c7)]=0x0,this[_0x452977(0x19e)]=0x0);},Sprite_Battler['prototype']['isSpinning']=function(){const _0x3d6d4f=_0x5d4113;return this[_0x3d6d4f(0x839)]>0x0;},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x683)]=function(){const _0x3b49e7=_0x5d4113;if(!this[_0x3b49e7(0x148)])return;const _0xc797f3=this[_0x3b49e7(0x19e)],_0x495f78=this[_0x3b49e7(0x596)]['x'],_0x4c239b=this['_battler'][_0x3b49e7(0xa65)]()?-0x1:0x1;this[_0x3b49e7(0x148)][_0x3b49e7(0x505)]=_0xc797f3*_0x495f78*_0x4c239b;const _0x2dc4c0=this[_0x3b49e7(0x148)][_0x3b49e7(0x596)]['y'];this[_0x3b49e7(0x148)]['y']=this[_0x3b49e7(0x6ce)]*-0.5*(0x2-_0x2dc4c0),this[_0x3b49e7(0x148)]['y']=Math[_0x3b49e7(0x6aa)](this['_distortionSprite']['y']);const _0x5da1e5=[this[_0x3b49e7(0x6e9)],this[_0x3b49e7(0x1cf)],this['_dragonbonesSpriteContainer']];for(const _0x522730 of _0x5da1e5){if(!_0x522730)continue;_0x522730['y']=this[_0x3b49e7(0x6ce)]*0.5;}if(this[_0x3b49e7(0xabb)]){if(_0x3b49e7(0x21e)!==_0x3b49e7(0x5f6))this['_shadowScaleX']=this['_shadowScaleX']??0x1,this[_0x3b49e7(0x46d)]=this[_0x3b49e7(0x46d)]??0x1,this[_0x3b49e7(0xabb)][_0x3b49e7(0x596)]['x']=this[_0x3b49e7(0x148)][_0x3b49e7(0x596)]['x']*this[_0x3b49e7(0x15a)],this[_0x3b49e7(0xabb)][_0x3b49e7(0x596)]['y']=this[_0x3b49e7(0x148)][_0x3b49e7(0x596)]['y']*this[_0x3b49e7(0x46d)];else return!![];}},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x3b5)]=Sprite_Actor['prototype'][_0x5d4113(0x5ef)],Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0x5ef)]=function(){const _0x1adb32=_0x5d4113;VisuMZ[_0x1adb32(0x710)][_0x1adb32(0x3b5)][_0x1adb32(0x701)](this),VisuMZ['BattleCore'][_0x1adb32(0x326)][_0x1adb32(0xa8e)][_0x1adb32(0x162)]&&(_0x1adb32(0x7c3)!==_0x1adb32(0x7c3)?_0x6a5786[_0x1adb32(0x932)][_0x1adb32(0x3f2)](_0x5acf33):this[_0x1adb32(0x8a7)]());},VisuMZ[_0x5d4113(0x710)]['Sprite_Enemy_createStateIconSprite']=Sprite_Enemy['prototype'][_0x5d4113(0x82d)],Sprite_Enemy['prototype']['createStateIconSprite']=function(){const _0x1eaf4a=_0x5d4113;if(VisuMZ[_0x1eaf4a(0x710)][_0x1eaf4a(0x326)][_0x1eaf4a(0xa8e)][_0x1eaf4a(0x2bb)]){if(_0x1eaf4a(0x9c1)!==_0x1eaf4a(0x2be))this[_0x1eaf4a(0x8a7)]();else{const _0x4eaa5b=this['getChildIndex'](this[_0x1eaf4a(0x148)]);this[_0x1eaf4a(0xc48)](this['_shadowSprite'],_0x4eaa5b),this[_0x1eaf4a(0x643)]();}}VisuMZ[_0x1eaf4a(0x710)][_0x1eaf4a(0x9a9)][_0x1eaf4a(0x701)](this);},Sprite_Battler['prototype'][_0x5d4113(0x8a7)]=function(){const _0x3573a5=_0x5d4113;if(!ConfigManager[_0x3573a5(0x2e2)])return;if(this[_0x3573a5(0x8ab)]===Sprite_SvEnemy)return;const _0x2c47da=VisuMZ['BattleCore'][_0x3573a5(0x326)]['HpGauge'],_0x4cd25f=new Sprite_HpGauge();_0x4cd25f[_0x3573a5(0x636)]['x']=_0x2c47da[_0x3573a5(0xc47)],_0x4cd25f[_0x3573a5(0x636)]['y']=_0x2c47da[_0x3573a5(0xb28)],_0x4cd25f[_0x3573a5(0x596)]['x']=_0x4cd25f['scale']['y']=_0x2c47da[_0x3573a5(0x2d4)],this[_0x3573a5(0x4c0)]=_0x4cd25f,this[_0x3573a5(0x9fd)](this['_hpGaugeSprite']);if(Spriteset_Battle[_0x3573a5(0x4d6)]){if('cTAMU'!==_0x3573a5(0x62d))BattleManager[_0x3573a5(0x756)](this[_0x3573a5(0x4c0)]);else return!![];}},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x771)]=Sprite_Battler['prototype'][_0x5d4113(0x957)],Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x957)]=function(_0x4c5b69){const _0x273a29=_0x5d4113,_0x418b6=this[_0x273a29(0x484)];VisuMZ[_0x273a29(0x710)]['Sprite_Battler_setBattler']['call'](this,_0x4c5b69),this[_0x273a29(0xbd3)](_0x4c5b69);if(_0x418b6!==_0x4c5b69)this[_0x273a29(0x790)]();},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0xbd3)]=function(_0x5936ef){const _0x4fcf67=_0x5d4113;if(!_0x5936ef)return;if(!this['_hpGaugeSprite'])return;if(_0x5936ef[_0x4fcf67(0xa65)]()){}else{if(_0x5936ef[_0x4fcf67(0xb88)]()){if(_0x4fcf67(0xbac)!==_0x4fcf67(0x9c7)){if(this['constructor']===Sprite_SvEnemy&&!_0x5936ef[_0x4fcf67(0x73e)]())return;}else _0x1ecd68[_0x4fcf67(0x8e0)](_0x28edb1);}}this[_0x4fcf67(0x4c0)][_0x4fcf67(0xbd4)](_0x5936ef,'hp');},Sprite_Battler[_0x5d4113(0x44d)]['hasStaticSvBattler']=function(){const _0x5f0196=_0x5d4113;return this[_0x5f0196(0x484)]&&this[_0x5f0196(0x484)][_0x5f0196(0x38d)]();},Sprite_Battler['prototype'][_0x5d4113(0x9fc)]=function(){const _0x26478c=_0x5d4113,_0x4e90ed=this[_0x26478c(0x6e9)][_0x26478c(0x432)];if(!_0x4e90ed)return;const _0x4af765=_0x4e90ed[_0x26478c(0x61e)];let _0x4f727f=_0x4e90ed[_0x26478c(0x6ce)];if(this[_0x26478c(0x484)][_0x26478c(0xa26)]()){if(_0x26478c(0x37f)===_0x26478c(0x37f)){if(this[_0x26478c(0xadf)])_0x4f727f=Math[_0x26478c(0xbcc)](0x0,this['_frame'][_0x26478c(0x6ce)]-0x4);}else{if(!_0x1accf6['isSceneBattle']())return;if(!_0x127c60[_0x26478c(0xc30)])return;_0x1eea98[_0x26478c(0xb3d)](_0x1a8bec,_0x1bd62d);const _0x41afab=_0x17655d[_0x26478c(0xc2b)](),_0x4e5a29=_0x29e9d3[_0x26478c(0xbcf)];if(!_0x41afab)return;_0x7ebbd1['setBattleAngle'](0x0,_0x4c8d0f[_0x26478c(0x88b)],_0x4366dd[_0x26478c(0xc70)]);if(_0x4e5a29)_0x41afab[_0x26478c(0x4cc)]('battleAngle');}}this[_0x26478c(0x6e9)][_0x26478c(0x5bd)](0x0,0x0,_0x4af765,_0x4f727f),this[_0x26478c(0x5bd)](0x0,0x0,_0x4af765,_0x4f727f);},Sprite_Battler['prototype'][_0x5d4113(0x597)]=function(){const _0x523844=_0x5d4113;if(!this['_battler'])return;if(!this[_0x523844(0x4c0)])return;const _0x33ed42=VisuMZ[_0x523844(0x710)][_0x523844(0x326)][_0x523844(0xa8e)],_0x4c9683=this[_0x523844(0x4c0)];_0x4c9683[_0x523844(0x39c)]=this[_0x523844(0x76f)]();const _0x4b9d74=_0x33ed42[_0x523844(0x5cb)],_0x54c9f0=_0x33ed42[_0x523844(0x191)];_0x4c9683['x']=_0x4b9d74,_0x4c9683['x']+=this[_0x523844(0x484)][_0x523844(0x94e)](),_0x4c9683['y']=-this[_0x523844(0x6ce)]+_0x54c9f0,_0x4c9683['y']+=this['_battler']['battleUIOffsetY'](),Spriteset_Battle[_0x523844(0x4d6)]&&SceneManager[_0x523844(0x5a4)][_0x523844(0xa9a)]&&(_0x4c9683['x']+=this['x'],_0x4c9683['y']+=this['y']);},Sprite_Battler[_0x5d4113(0x44d)]['isVisualHpGaugeDisplayed']=function(){const _0x316068=_0x5d4113;if(!this[_0x316068(0x484)])return![];if(this[_0x316068(0x484)]['isActor']())return!![];if(this['_battler'][_0x316068(0xc8d)]())return![];if(this['opacity']<=0x0)return![];const _0x385573=this[_0x316068(0x484)][_0x316068(0x258)]()[_0x316068(0x80a)];if(_0x385573[_0x316068(0xb51)](/<SHOW HP GAUGE>/i))return!![];if(_0x385573[_0x316068(0xb51)](/<HIDE HP GAUGE>/i))return![];const _0x403af2=VisuMZ[_0x316068(0x710)][_0x316068(0x326)][_0x316068(0xa8e)];if(_0x403af2[_0x316068(0x961)]){if(_0x403af2[_0x316068(0x2ec)]&&BattleManager[_0x316068(0xa21)]())return!![];if(this[_0x316068(0x484)][_0x316068(0x942)])return![];return this[_0x316068(0x484)][_0x316068(0x927)]();}return!![];},VisuMZ['BattleCore'][_0x5d4113(0x67c)]=Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x46c)],Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x46c)]=function(){const _0x442612=_0x5d4113;if(!this[_0x442612(0x484)])return![];if(this[_0x442612(0x887)]>0x0)return!![];return VisuMZ['BattleCore']['Sprite_Battler_isMoving'][_0x442612(0x701)](this);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x5a9)]=Sprite_Battler['prototype'][_0x5d4113(0x873)],Sprite_Battler[_0x5d4113(0x44d)]['startMove']=function(_0x34c2b5,_0xbc077d,_0x2907df){const _0x2f365b=_0x5d4113;this[_0x2f365b(0x5c1)]()&&VisuMZ['BattleCore'][_0x2f365b(0x5a9)]['call'](this,_0x34c2b5,_0xbc077d,_0x2907df);},Sprite_Battler['prototype'][_0x5d4113(0x5c1)]=function(){const _0x298664=_0x5d4113;if(this[_0x298664(0x484)]&&this[_0x298664(0x484)][_0x298664(0xa26)]())return![];if(this[_0x298664(0x484)]&&!this[_0x298664(0x484)]['canBattlerMove']())return![];return $gameSystem[_0x298664(0x9f8)]();},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x2f5)]=function(){},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x254)]=function(){const _0xc403f0=_0x5d4113;this[_0xc403f0(0x873)](0x0,0x0,0xc);},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x52b)]=function(){},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x8c8)]=function(){const _0x154316=_0x5d4113,_0x5277da=VisuMZ[_0x154316(0x710)]['Settings'][_0x154316(0xc03)],_0x477ae8=this['_battler']&&this[_0x154316(0x484)][_0x154316(0xa65)]()?0x1:-0x1,_0x5ad777=this['_baseX']-this[_0x154316(0x64f)]+_0x477ae8*_0x5277da[_0x154316(0x544)],_0x26f94a=this[_0x154316(0x559)]-this[_0x154316(0x52f)]+_0x477ae8*_0x5277da[_0x154316(0xb3e)],_0x3b09bc=_0x5277da['FlinchDuration'];this[_0x154316(0x873)](_0x5ad777,_0x26f94a,_0x3b09bc);},Sprite_Battler[_0x5d4113(0x44d)][_0x5d4113(0x646)]=function(_0x5b4573,_0x53985c){const _0x1c34fe=_0x5d4113,_0x39a1e4=VisuMZ[_0x1c34fe(0x710)][_0x1c34fe(0x326)][_0x1c34fe(0xc03)];this[_0x1c34fe(0x72b)]=Math[_0x1c34fe(0x6aa)]((_0x39a1e4[_0x1c34fe(0x6ec)]??0x18)*_0x53985c),this['_shakeFlinchPower']=Math[_0x1c34fe(0xbcc)](this[_0x1c34fe(0x33f)],_0x5b4573);},Sprite_Battler[_0x5d4113(0x44d)]['updateShakeFlinch']=function(){const _0x39cc10=_0x5d4113,_0xd5fed4=VisuMZ[_0x39cc10(0x710)][_0x39cc10(0x326)]['Actor'];if(!(_0xd5fed4[_0x39cc10(0xa6e)]??![]))return;if(this['_shakeFlinchDuration']>0x0){const _0x1b64de=this[_0x39cc10(0x72b)];this[_0x39cc10(0x33f)]=this[_0x39cc10(0x33f)]*(_0x1b64de-0x1)/_0x1b64de,this[_0x39cc10(0x72b)]--;if(this[_0x39cc10(0x72b)]<=0x0){if(_0x39cc10(0x676)==='gMrdP'){if(this[_0x39cc10(0x341)])this['parent']['startMove'](_0x415580,_0x514b85,_0x166cdd);}else this[_0x39cc10(0x33f)]=0x0;}}if(this['_shakeFlinchPower']>0x0){if(_0x39cc10(0x928)==='ZpGHe')this['_mainSprite']['x']=Math[_0x39cc10(0x96f)](this[_0x39cc10(0x33f)])*(Math[_0x39cc10(0x22c)]()<0.5?-0x1:0x1),this[_0x39cc10(0x559)]!==this['y']&&(_0x39cc10(0xc74)===_0x39cc10(0xc74)?(this[_0x39cc10(0x6e9)]['y']=this['height']*0.5,this[_0x39cc10(0x6e9)]['y']+=Math['randomInt'](this['_shakeFlinchPower'])*(Math[_0x39cc10(0x22c)]()<0.5?-0x1:0x1)):(this[_0x39cc10(0xc1c)](_0x39cc10(0xb32)),_0x241f5f[_0x39cc10(0xb52)](_0x24a94c,_0x246909),this[_0x39cc10(0xa6b)]()));else{let _0x1b234e=_0x39cc10(0x938);if(this[_0x39cc10(0xca2)](_0x1b234e))return this[_0x39cc10(0x437)][_0x1b234e];return this['_cache'][_0x1b234e]=this[_0x39cc10(0x35a)](this['actor']()),this[_0x39cc10(0x437)][_0x1b234e];}}else _0x39cc10(0x3cd)===_0x39cc10(0x2aa)?_0x3c199f+=_0x14e567(_0x3ee129['$1']):(this[_0x39cc10(0x6e9)]['x']=0x0,this[_0x39cc10(0x6e9)]['y']=this['height']*0.5);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x33c)]=Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0x22f)],Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0x22f)]=function(){const _0x1ed8e6=_0x5d4113;VisuMZ[_0x1ed8e6(0x710)][_0x1ed8e6(0x33c)][_0x1ed8e6(0x701)](this),this['attachSpritesToDistortionSprite']();},Sprite_Actor[_0x5d4113(0x44d)]['mainSprite']=function(){const _0x2c6eda=_0x5d4113;return this[_0x2c6eda(0x148)]||this[_0x2c6eda(0x6e9)]||this;},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x193)]=Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0x411)],Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0x411)]=function(){},Sprite_Actor[_0x5d4113(0x44d)]['moveToStartPositionBattleCore']=function(_0x3bb3c1){const _0x42eb07=_0x5d4113;if(SceneManager[_0x42eb07(0x199)]())return;if(!_0x3bb3c1)return;if(!_0x3bb3c1[_0x42eb07(0x5c1)]())return;VisuMZ[_0x42eb07(0x710)][_0x42eb07(0x193)][_0x42eb07(0x701)](this);},VisuMZ['BattleCore'][_0x5d4113(0x896)]=Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0x969)],Sprite_Actor[_0x5d4113(0x44d)]['setActorHome']=function(_0xeaa177){const _0x25d8e0=_0x5d4113;if(VisuMZ['BattleCore'][_0x25d8e0(0x326)]['Actor'][_0x25d8e0(0x34f)]){if('LNxVP'!==_0x25d8e0(0x899))VisuMZ['BattleCore'][_0x25d8e0(0x326)][_0x25d8e0(0xc03)][_0x25d8e0(0x34f)][_0x25d8e0(0x701)](this,_0xeaa177);else{const _0x368855=_0x29af14(_0x13d4f4['$1'])[_0x25d8e0(0x3d8)](/[\r\n]+/)['map'](_0x480868=>_0x549d49(_0x480868)[_0x25d8e0(0x6d1)]()[_0x25d8e0(0xacb)]());_0x5dee41=_0x3f9257[_0x25d8e0(0x545)](_0x368855);!_0x1b5805[_0x25d8e0(0x80a)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x765e7e[_0x25d8e0(0x80a)]+=_0x25d8e0(0x8a0));;}}else _0x25d8e0(0x5e0)!==_0x25d8e0(0x5e0)?this['isCustomActionSequence'](_0x8dd8df)?_0x417792[_0x25d8e0(0x268)]():this[_0x25d8e0(0x229)](_0x4020eb,_0x4c6016,_0x7d66aa):VisuMZ[_0x25d8e0(0x710)][_0x25d8e0(0x896)][_0x25d8e0(0x701)](this,_0xeaa177);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x912)]=Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0x957)],Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0x957)]=function(_0x841b60){const _0x310677=_0x5d4113;VisuMZ['BattleCore'][_0x310677(0x912)][_0x310677(0x701)](this,_0x841b60),this['setBattlerBattleCore'](_0x841b60);},Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0x370)]=function(_0x26d7d0){const _0x540587=_0x5d4113;if(!_0x26d7d0)return;if(!this[_0x540587(0x6e9)])return;this[_0x540587(0x6e9)][_0x540587(0x636)]['x']=this['_actor']['svBattlerAnchorX'](),this['_mainSprite'][_0x540587(0x636)]['y']=this[_0x540587(0x493)]['svBattlerAnchorY'](),this[_0x540587(0x643)]();},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x660)]=Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0x5fb)],Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0x5fb)]=function(){const _0x48a3ce=_0x5d4113;VisuMZ[_0x48a3ce(0x710)][_0x48a3ce(0x660)]['call'](this),this[_0x48a3ce(0x493)]&&(this[_0x48a3ce(0x246)](),this[_0x48a3ce(0xae2)]());},VisuMZ['BattleCore'][_0x5d4113(0x28c)]=Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0x1c0)],Sprite_Actor['prototype']['updateBitmap']=function(){const _0xe77665=_0x5d4113;VisuMZ[_0xe77665(0x710)]['Sprite_Actor_updateBitmap'][_0xe77665(0x701)](this),this[_0xe77665(0x6e9)]&&this[_0xe77665(0x6e9)]['bitmap']&&this[_0xe77665(0x484)]&&(this[_0xe77665(0x6e9)]['bitmap'][_0xe77665(0x87e)]!==this['_battler'][_0xe77665(0x9be)]()&&(this[_0xe77665(0x6e9)]['bitmap'][_0xe77665(0x87e)]=this[_0xe77665(0x484)][_0xe77665(0x9be)]()));},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x2f3)]=Sprite_Actor['prototype'][_0x5d4113(0x471)],Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0x471)]=function(){const _0xbd2832=_0x5d4113;VisuMZ['BattleCore'][_0xbd2832(0x2f3)][_0xbd2832(0x701)](this),this[_0xbd2832(0xa86)]();},Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0xa86)]=function(){const _0x27b8a=_0x5d4113;if(!this[_0x27b8a(0x6e9)])return;if(!this[_0x27b8a(0xabb)])return;this[_0x27b8a(0x643)](),this['updateShadowPosition']();},Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0x246)]=function(){const _0x1cec1f=_0x5d4113;this['_stateSprite'][_0x1cec1f(0x596)]['x']=0x1/(this[_0x1cec1f(0x596)]['x']||0.001),this[_0x1cec1f(0x507)][_0x1cec1f(0x596)]['y']=0x1/(this['scale']['y']||0.001);},Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0xae2)]=function(){const _0x22e9b1=_0x5d4113;if(!$gameSystem[_0x22e9b1(0x9f8)]()&&this[_0x22e9b1(0x8ab)]===Sprite_Actor){if(_0x22e9b1(0x90a)==='YzLbq'){const _0x2eaebf=Scene_Battle['prototype'][_0x22e9b1(0x30c)]();[_0x22e9b1(0x39e),_0x22e9b1(0x95c),_0x22e9b1(0x453),_0x22e9b1(0xc3e)][_0x22e9b1(0x4b0)](_0x2eaebf)&&(_0x22e9b1(0x581)==='mRaGd'?this[_0x22e9b1(0x380)]=0x0:(this[_0x22e9b1(0x914)]=!![],this[_0x22e9b1(0xab3)]=![],this[_0x22e9b1(0x890)](_0x22e9b1(0xb48)),_0x599c9e[_0x22e9b1(0x710)]['BattleManager_endBattle'][_0x22e9b1(0x701)](this,_0x167474),this['processBattleCoreJS'](_0x22e9b1(0xc32))));}else{_0x87db13[_0x22e9b1(0x710)][_0x22e9b1(0x55f)]['call'](this,_0x1d9b2b),this[_0x22e9b1(0x57b)](),this[_0x22e9b1(0xbcb)]();const _0x37388d=this['battler']();_0x37388d&&(_0x37388d[_0x22e9b1(0x8b7)]=_0x3f47f9,_0x37388d['setBattler'](this));}}},Sprite_Actor['prototype'][_0x5d4113(0x221)]=function(){const _0x484c0c=_0x5d4113,_0x51a9a1=this[_0x484c0c(0x493)];if(_0x51a9a1){const _0x46a48c=_0x51a9a1[_0x484c0c(0x3a2)]();if(_0x51a9a1[_0x484c0c(0x745)]()||_0x51a9a1['isActing']())'JjxWW'===_0x484c0c(0xb72)?this['startMotion'](_0x484c0c(0x417)):this[_0x484c0c(0x528)](_0x563ee3['weaponImageId']);else{if(_0x46a48c===0x3){if(_0x484c0c(0x20d)!==_0x484c0c(0x20d))return _0x36e73b[_0x484c0c(0x96e)][_0x484c0c(0x701)](this);else this['startMotion'](_0x484c0c(0xb59));}else{if(_0x46a48c===0x2)this['startMotion'](_0x484c0c(0x2f6));else{if(this[_0x484c0c(0x8de)])'auucA'!==_0x484c0c(0x281)?this[_0x484c0c(0x8ed)]('escape'):this[_0x484c0c(0xa20)]=_0x484c0c(0x39e);else{if(_0x51a9a1[_0x484c0c(0xb92)]())this[_0x484c0c(0x8ed)](_0x484c0c(0x64b));else{if(_0x51a9a1[_0x484c0c(0x70e)]())this[_0x484c0c(0x8ed)](_0x484c0c(0xa5f));else{if(_0x51a9a1[_0x484c0c(0xca1)]()||_0x51a9a1[_0x484c0c(0xb04)]())this['startMotion'](_0x484c0c(0x707));else{if(_0x46a48c===0x1)this[_0x484c0c(0x8ed)](_0x484c0c(0x21b));else{if(_0x51a9a1[_0x484c0c(0x8d6)]()){if(_0x484c0c(0x3ae)===_0x484c0c(0x3ae))this[_0x484c0c(0x8ed)](_0x484c0c(0x811));else return this[_0x484c0c(0x2c7)][_0x57926f];}else{if(_0x51a9a1[_0x484c0c(0x6ac)]())this['startMotion']('walk');else _0x51a9a1[_0x484c0c(0x2de)]()?this[_0x484c0c(0x8ed)](_0x484c0c(0x64b)):this[_0x484c0c(0x8ed)](_0x484c0c(0x417));}}}}}}}}}}},Sprite_Actor[_0x5d4113(0x44d)]['retreat']=function(){const _0x24c6c6=_0x5d4113,_0x2b80a3=0xa,_0x294a3b=0x12c*_0x2b80a3,_0x35e050=0x1e*_0x2b80a3;this[_0x24c6c6(0x873)](_0x294a3b,0x0,_0x35e050);},Sprite_Actor[_0x5d4113(0x44d)]['onMoveEnd']=function(){const _0x200ea8=_0x5d4113;Sprite_Battler[_0x200ea8(0x44d)]['onMoveEnd']['call'](this);},Sprite_Actor['prototype'][_0x5d4113(0x41a)]=function(){const _0x461e35=_0x5d4113;return Sprite_Battler[_0x461e35(0xa0a)];},Sprite_Weapon[_0x5d4113(0x44d)][_0x5d4113(0x7bf)]=function(){const _0x4e8304=_0x5d4113;return Sprite_Battler[_0x4e8304(0xa0a)];},Sprite_Actor['prototype'][_0x5d4113(0x796)]=function(){},Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0x408)]=function(){},Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0xc0d)]=function(){const _0x3f6ddd=_0x5d4113;if(this[_0x3f6ddd(0x32d)]&&++this['_motionCount']>=this[_0x3f6ddd(0x41a)]()){if(this[_0x3f6ddd(0x32d)]['loop'])this[_0x3f6ddd(0x86d)]=(this[_0x3f6ddd(0x86d)]+0x1)%0x4;else this[_0x3f6ddd(0x86d)]<0x2?this[_0x3f6ddd(0x86d)]++:this[_0x3f6ddd(0x221)]();this[_0x3f6ddd(0x2a6)]=0x0;}},Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0xa37)]=function(_0x2023eb){const _0x4c45bc=_0x5d4113;if(_0x2023eb===_0x4c45bc(0x47e))this[_0x4c45bc(0x20e)]=!![];if(this[_0x4c45bc(0x484)]&&this[_0x4c45bc(0x484)]['isDead']()){if(_0x4c45bc(0x908)===_0x4c45bc(0x908)){this['_motion']=Sprite_Actor[_0x4c45bc(0x5cd)][_0x4c45bc(0xb59)];return;}else _0x135e99[_0x1d5154]===0x1&&this[_0x4c45bc(0x4d2)]!==_0x32943c&&(_0x183cb8[_0x31dfc2]=null);}const _0x12de77=Sprite_Actor[_0x4c45bc(0x5cd)][_0x2023eb];this[_0x4c45bc(0x32d)]=_0x12de77,this[_0x4c45bc(0x2a6)]=0x0,this[_0x4c45bc(0x86d)]=0x0;},Sprite_Actor[_0x5d4113(0x44d)]['forceWeaponAnimation']=function(_0x42eeb1){const _0x12bbd7=_0x5d4113;if(this[_0x12bbd7(0x38d)]())return;this[_0x12bbd7(0x43c)](),this[_0x12bbd7(0xc6c)][_0x12bbd7(0xbd4)](_0x42eeb1),this[_0x12bbd7(0x493)][_0x12bbd7(0x345)]();},Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0x43c)]=function(){const _0x41e499=_0x5d4113;let _0x2b9b73=-0x10,_0x379816=this[_0x41e499(0x6ce)]*0.5;const _0x5e7994=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0xc12c1a=this['_battler'][_0x41e499(0x1f6)]()['map'](_0x261de0=>_0x261de0&&_0x261de0[_0x41e499(0x80a)][_0x41e499(0xb51)](_0x5e7994)?Number(RegExp['$1']):0x0),_0x2d49f6=this[_0x41e499(0x484)][_0x41e499(0x1f6)]()[_0x41e499(0x390)](_0x40eaa=>_0x40eaa&&_0x40eaa[_0x41e499(0x80a)][_0x41e499(0xb51)](_0x5e7994)?Number(RegExp['$2']):0x0);_0x2b9b73=_0xc12c1a[_0x41e499(0x27d)]((_0x4db6c4,_0xcbe577)=>_0x4db6c4+_0xcbe577,_0x2b9b73),_0x379816=_0x2d49f6[_0x41e499(0x27d)]((_0x75c27e,_0x51a7f6)=>_0x75c27e+_0x51a7f6,_0x379816),this[_0x41e499(0xc6c)]['x']=_0x2b9b73,this[_0x41e499(0xc6c)]['y']=_0x379816,this[_0x41e499(0xc6c)]['update']();},Sprite_Weapon[_0x5d4113(0x44d)]['setup']=function(_0x1a0001){const _0x34f87b=_0x5d4113;this[_0x34f87b(0x7d1)]=_0x1a0001,this[_0x34f87b(0x653)]=-0x1,this[_0x34f87b(0x86d)]=0x0,this[_0x34f87b(0x6b5)](),this['updateFrame']();},Sprite_Actor[_0x5d4113(0x44d)]['updateTargetPosition']=function(){},Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0x2f5)]=function(){const _0xaa5b42=_0x5d4113,_0x4f51b1=VisuMZ['BattleCore'][_0xaa5b42(0x326)]['ActionSequence'],_0x5cf9a5=_0x4f51b1[_0xaa5b42(0x1ad)],_0x3ff951=_0x4f51b1[_0xaa5b42(0x952)],_0x54122f=_0x4f51b1['StepDuration'];this[_0xaa5b42(0x873)](-_0x5cf9a5,-_0x3ff951,_0x54122f);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x66e)]=Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0xb6f)],Sprite_Actor[_0x5d4113(0x44d)]['updateFrame']=function(){const _0x2a5342=_0x5d4113;this[_0x2a5342(0x38d)]()?this[_0x2a5342(0x9fc)]():(this[_0x2a5342(0x6bd)](),VisuMZ['BattleCore']['Sprite_Actor_updateFrame'][_0x2a5342(0x701)](this));},Sprite_Actor[_0x5d4113(0x44d)][_0x5d4113(0x6bd)]=function(){const _0x191209=_0x5d4113;if(this[_0x191209(0x484)]&&this[_0x191209(0x484)][_0x191209(0x9e2)]){if(_0x191209(0x4b5)!==_0x191209(0x4b5)){const _0x4e6031=_0x458951['format'](_0x53347a['name'](),_0x2a163e['param'](_0x32830a));this['push']('popBaseLine'),this[_0x191209(0x2ce)](_0x191209(0xa1c)),this[_0x191209(0x2ce)](_0x191209(0x93e),_0x4e6031),this[_0x191209(0x2ce)]('wait');}else{const _0x12a08c=this[_0x191209(0x484)][_0x191209(0x9e2)];this[_0x191209(0x32d)]=Sprite_Actor[_0x191209(0x5cd)][_0x12a08c[_0x191209(0x146)]],this[_0x191209(0x86d)]=_0x12a08c[_0x191209(0x41e)];const _0x535530=this[_0x191209(0xc6c)];_0x535530[_0x191209(0x2f0)](_0x12a08c[_0x191209(0x7de)],_0x12a08c[_0x191209(0x41e)]),this[_0x191209(0x43c)]();}}},Sprite_Weapon[_0x5d4113(0x44d)][_0x5d4113(0x2f0)]=function(_0x4cc8bc,_0x58f120){const _0xc9c4f0=_0x5d4113;this[_0xc9c4f0(0x7d1)]=_0x4cc8bc,this[_0xc9c4f0(0x653)]=-Infinity,this['_pattern']=_0x58f120,this[_0xc9c4f0(0x6b5)](),this[_0xc9c4f0(0xb6f)]();},Sprite_Enemy['prototype'][_0x5d4113(0x22f)]=function(){const _0x22627f=_0x5d4113;Sprite_Battler['prototype']['initMembers']['call'](this),this[_0x22627f(0x94f)]=null,this[_0x22627f(0xb7d)]=![],this[_0x22627f(0x8b7)]='',this[_0x22627f(0x330)]=0x0,this[_0x22627f(0xbb7)]=null,this[_0x22627f(0x2a8)]=0x0,this[_0x22627f(0x479)]=0x0,this[_0x22627f(0x562)](),this['createStateIconSprite']();},VisuMZ[_0x5d4113(0x710)]['Sprite_Enemy_update']=Sprite_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x5fb)],Sprite_Enemy['prototype']['update']=function(){const _0x2ff433=_0x5d4113;VisuMZ[_0x2ff433(0x710)][_0x2ff433(0xaac)][_0x2ff433(0x701)](this),this[_0x2ff433(0x643)]();},Sprite_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x562)]=function(){const _0x5959cb=_0x5d4113;this[_0x5959cb(0x6e9)]=new Sprite(),this[_0x5959cb(0x6e9)][_0x5959cb(0x636)]['x']=0.5,this[_0x5959cb(0x6e9)][_0x5959cb(0x636)]['y']=0x1,this[_0x5959cb(0x9fd)](this[_0x5959cb(0x6e9)]),this[_0x5959cb(0x779)]();},Sprite_Enemy[_0x5d4113(0x44d)][_0x5d4113(0xa4b)]=function(){const _0x36e845=_0x5d4113;return this['_distortionSprite']||this[_0x36e845(0x6e9)]||this;},Sprite_Enemy['prototype'][_0x5d4113(0x6b5)]=function(_0x58cf37){const _0x11ed8e=_0x5d4113;this['bitmap']=new Bitmap(0x1,0x1);if(this[_0x11ed8e(0x73e)]()){const _0x1d2ff9=this[_0x11ed8e(0x94f)][_0x11ed8e(0x514)]();this[_0x11ed8e(0x432)]=new Bitmap(_0x1d2ff9[_0x11ed8e(0x61e)],_0x1d2ff9[_0x11ed8e(0x6ce)]),this[_0x11ed8e(0x6e9)]['bitmap']=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x11ed8e(0x9f8)]()){const _0x4e4910=ImageManager[_0x11ed8e(0x7e5)](_0x58cf37);_0x4e4910['addLoadListener'](this[_0x11ed8e(0x28e)][_0x11ed8e(0xa11)](this,_0x4e4910));}else{const _0x241547=ImageManager[_0x11ed8e(0x4ac)](_0x58cf37);_0x241547[_0x11ed8e(0x897)](this[_0x11ed8e(0x28e)][_0x11ed8e(0xa11)](this,_0x241547));}}},Sprite_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x28e)]=function(_0x4f3269){const _0x231b62=_0x5d4113;this['_mainSprite'][_0x231b62(0x432)]=_0x4f3269,this[_0x231b62(0x432)]=new Bitmap(_0x4f3269[_0x231b62(0x61e)],_0x4f3269[_0x231b62(0x6ce)]);},VisuMZ['BattleCore'][_0x5d4113(0x3a4)]=Sprite_Enemy[_0x5d4113(0x44d)]['setHue'],Sprite_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x8bd)]=function(_0x1c0efc){const _0x427e08=_0x5d4113;this['_mainSprite']&&this['_mainSprite'][_0x427e08(0x8bd)](_0x1c0efc);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x553)]=Sprite_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x24c)],Sprite_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x24c)]=function(){const _0x1b0cc0=_0x5d4113;this[_0x1b0cc0(0x889)]()?VisuMZ[_0x1b0cc0(0x710)]['Sprite_Enemy_initVisibility'][_0x1b0cc0(0x701)](this):(this[_0x1b0cc0(0xb7d)]=!this[_0x1b0cc0(0x94f)][_0x1b0cc0(0xc8d)](),!this[_0x1b0cc0(0xb7d)]&&(this[_0x1b0cc0(0x380)]=0x0));},VisuMZ['BattleCore'][_0x5d4113(0x3e5)]=Sprite_Enemy['prototype'][_0x5d4113(0xc13)],Sprite_Enemy[_0x5d4113(0x44d)][_0x5d4113(0xc13)]=function(){const _0x393bcc=_0x5d4113;if(this[_0x393bcc(0x889)]())VisuMZ[_0x393bcc(0x710)][_0x393bcc(0x3e5)][_0x393bcc(0x701)](this);},Sprite_Enemy['prototype'][_0x5d4113(0xb6f)]=function(){const _0x2a0c66=_0x5d4113;Sprite_Battler[_0x2a0c66(0x44d)][_0x2a0c66(0xb6f)]['call'](this);const _0x5b53e4=this[_0x2a0c66(0xa4b)]()||this;if(!_0x5b53e4)return;!_0x5b53e4[_0x2a0c66(0x432)]&&('tflbr'===_0x2a0c66(0x999)?_0x5b53e4[_0x2a0c66(0x432)]=new Bitmap(this[_0x2a0c66(0x61e)],this['height']):_0x367854[_0x2a0c66(0x2b1)](_0x2a0c66(0x4cd),this[_0x2a0c66(0x7e6)]['bind'](this)));if(this[_0x2a0c66(0xbb7)]==='bossCollapse'){if(_0x2a0c66(0xa33)===_0x2a0c66(0x7ed)){if(this['battler']())this[_0x2a0c66(0x3ee)]()[_0x2a0c66(0x221)]();}else this['_mainSprite'][_0x2a0c66(0x5bd)](0x0,0x0,this[_0x2a0c66(0x6e9)]['width'],this[_0x2a0c66(0x2a8)]);}else{if(_0x2a0c66(0x923)!=='SnMbM')_0x5b53e4[_0x2a0c66(0x5bd)](0x0,0x0,_0x5b53e4[_0x2a0c66(0x432)][_0x2a0c66(0x61e)],this[_0x2a0c66(0x432)][_0x2a0c66(0x6ce)]);else return this[_0x2a0c66(0x2de)]()&&this['currentAction']()['item']()&&!this[_0x2a0c66(0x2de)]()[_0x2a0c66(0x204)]();}},VisuMZ[_0x5d4113(0x710)]['Sprite_Enemy_updateBossCollapse']=Sprite_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x465)],Sprite_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x465)]=function(){const _0x5827b4=_0x5d4113;if(this['allowCollapse']())VisuMZ[_0x5827b4(0x710)]['Sprite_Enemy_updateBossCollapse']['call'](this);},Sprite_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x46c)]=function(){const _0x5da301=_0x5d4113;return Sprite_Battler[_0x5da301(0x44d)][_0x5da301(0x46c)]['call'](this);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x7c7)]=Sprite_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x246)],Sprite_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x246)]=function(){const _0x41df20=_0x5d4113;VisuMZ[_0x41df20(0x710)][_0x41df20(0x7c7)]['call'](this),this[_0x41df20(0x834)]();},Sprite_Enemy[_0x5d4113(0x44d)]['updateStateSpriteBattleCore']=function(){const _0x34b99c=_0x5d4113,_0x57e135=VisuMZ[_0x34b99c(0x710)][_0x34b99c(0x326)][_0x34b99c(0x194)];if(_0x57e135[_0x34b99c(0x1cc)]&&!_0x57e135[_0x34b99c(0x69e)]){this[_0x34b99c(0x342)]['opacity']=0x0;return;}this[_0x34b99c(0x342)]['x']=0x0,this[_0x34b99c(0x342)]['x']+=this['_battler'][_0x34b99c(0x94e)](),this[_0x34b99c(0x342)]['y']=-this[_0x34b99c(0x432)][_0x34b99c(0x6ce)]-this[_0x34b99c(0x342)][_0x34b99c(0x6ce)]-0x4,this[_0x34b99c(0x342)]['y']+=this['_battler'][_0x34b99c(0x938)](),this[_0x34b99c(0x342)]['scale']['x']=0x1/(this['scale']['x']||0.001),this[_0x34b99c(0x342)][_0x34b99c(0x596)]['y']=0x1/(this['scale']['y']||0.001);if(this[_0x34b99c(0x73e)]()){if(_0x34b99c(0x42d)==='RjgXx')return _0x346c6d[_0x34b99c(0x44d)][_0x34b99c(0x46c)][_0x34b99c(0x701)](this);else this[_0x34b99c(0x1cf)][_0x34b99c(0x507)][_0x34b99c(0x596)]['x']=-0x1/(this['scale']['x']||0.001),this[_0x34b99c(0x1cf)][_0x34b99c(0x507)][_0x34b99c(0x596)]['y']=0x1/(this[_0x34b99c(0x596)]['y']||0.001);}},VisuMZ[_0x5d4113(0x710)]['Sprite_Enemy_setBattler']=Sprite_Enemy['prototype']['setBattler'],Sprite_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x957)]=function(_0x5e3d84){const _0xf2d6fa=_0x5d4113;VisuMZ['BattleCore'][_0xf2d6fa(0xc07)]['call'](this,_0x5e3d84),this[_0xf2d6fa(0x235)](_0x5e3d84);},Sprite_Enemy['prototype'][_0x5d4113(0x235)]=function(_0x5b3663){const _0x920efe=_0x5d4113;if(!this[_0x920efe(0x1cf)]){if(_0x920efe(0xc7c)!==_0x920efe(0x7b8))this['_svBattlerSprite']=new Sprite_SvEnemy(_0x5b3663),this[_0x920efe(0x779)]();else{const _0x106e4b=this[_0x920efe(0x6b0)],_0x474d42=_0x3e215e[_0x920efe(0x1e2)](),_0x4612a1=_0x4e85ed['x']+_0x1eb469[_0x920efe(0xa63)](_0x1e35ac[_0x920efe(0x61e)]/0x2)+_0x474d42;_0x106e4b['x']=_0x106e4b[_0x920efe(0x61e)]/-0x2+_0x4612a1,_0x106e4b['y']=_0x65ccb7[_0x920efe(0xa63)](_0x16aaa7[_0x920efe(0x6ce)]/0x2);}}this['_svBattlerSprite']['setBattler'](_0x5b3663);},Sprite_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x73e)]=function(){const _0x27a87c=_0x5d4113;return this[_0x27a87c(0x94f)]&&this[_0x27a87c(0x94f)]['hasSvBattler']();},Sprite_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x889)]=function(){const _0x2def8a=_0x5d4113;if(this['hasSvBattler']()){if(_0x2def8a(0x1b0)==='ElbPx')return this[_0x2def8a(0x94f)][_0x2def8a(0x889)]();else{const _0x2c061a=this[_0x2def8a(0xb18)](_0x5a2871);if(_0x2c061a[_0x2def8a(0xb51)](/\\I\[(\d+)\]/i)){const _0x5d31e1=this[_0x2def8a(0x98e)](_0x2c9274),_0x4b0c6d=this[_0x2def8a(0x2a1)](_0x2c061a)[_0x2def8a(0x61e)];return _0x4b0c6d<=_0x5d31e1[_0x2def8a(0x61e)]?_0x2def8a(0xa47):_0x2def8a(0x989);}}}else{if(_0x2def8a(0x686)!==_0x2def8a(0x305))return!![];else{this[_0x2def8a(0x2ce)](_0x2def8a(0x3eb),_0x1e71ab);if(!_0x5d4760[_0x2def8a(0x710)][_0x2def8a(0x326)]['BattleLog'][_0x2def8a(0x9bf)])return;this[_0x2def8a(0x2ce)](_0x2def8a(0x93e),_0x33dfd0[_0x2def8a(0xbe0)][_0x2def8a(0x85d)](_0x3a1acc[_0x2def8a(0x2c0)]()));}}},Sprite_Enemy[_0x5d4113(0x44d)][_0x5d4113(0x221)]=function(){const _0xe3b6e6=_0x5d4113;this[_0xe3b6e6(0x73e)]()&&(_0xe3b6e6(0x298)===_0xe3b6e6(0x3aa)?_0x46fb4d[_0xe3b6e6(0x3cc)]():this[_0xe3b6e6(0x1cf)][_0xe3b6e6(0x221)]());},Sprite_Enemy[_0x5d4113(0x44d)][_0x5d4113(0xa37)]=function(_0x365c51){const _0x1775cc=_0x5d4113;if(this[_0x1775cc(0x73e)]())this[_0x1775cc(0x1cf)][_0x1775cc(0xa37)](_0x365c51);},Sprite_Enemy['prototype'][_0x5d4113(0x49a)]=function(_0x394786){const _0x2864b8=_0x5d4113;if(this[_0x2864b8(0x73e)]())this[_0x2864b8(0x1cf)]['forceWeaponAnimation'](_0x394786);},Sprite_Enemy[_0x5d4113(0x44d)]['stepForward']=function(){const _0x23c037=_0x5d4113,_0x5ad9be=VisuMZ['BattleCore'][_0x23c037(0x326)][_0x23c037(0x998)],_0x5cfabd=_0x5ad9be[_0x23c037(0x1ad)],_0x201808=_0x5ad9be[_0x23c037(0x952)],_0x1e29e1=_0x5ad9be[_0x23c037(0xc5a)];this[_0x23c037(0x873)](_0x5cfabd,_0x201808,_0x1e29e1);};function Sprite_SvEnemy(){const _0x119bec=_0x5d4113;this[_0x119bec(0x7e2)](...arguments);}Sprite_SvEnemy[_0x5d4113(0x44d)]=Object[_0x5d4113(0x5ac)](Sprite_Actor[_0x5d4113(0x44d)]),Sprite_SvEnemy[_0x5d4113(0x44d)][_0x5d4113(0x8ab)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x5d4113(0x44d)][_0x5d4113(0x7e2)]=function(_0x593dda){const _0xdb468=_0x5d4113;Sprite_Actor['prototype']['initialize'][_0xdb468(0x701)](this,_0x593dda),this[_0xdb468(0x596)]['x']=-0x1,this[_0xdb468(0x507)]['scale']['x']=-0x1;},Sprite_SvEnemy[_0x5d4113(0x44d)][_0x5d4113(0x18a)]=function(){},Sprite_SvEnemy[_0x5d4113(0x44d)]['moveToStartPosition']=function(){},Sprite_SvEnemy[_0x5d4113(0x44d)]['setActorHome']=function(_0x307091){},Sprite_SvEnemy[_0x5d4113(0x44d)]['updateShadow']=function(){},Sprite_SvEnemy[_0x5d4113(0x44d)][_0x5d4113(0x7b5)]=function(){},Sprite_SvEnemy[_0x5d4113(0x44d)][_0x5d4113(0x246)]=function(){const _0x49ce90=_0x5d4113;this[_0x49ce90(0x507)][_0x49ce90(0x39c)]=![];},Sprite_SvEnemy[_0x5d4113(0x44d)][_0x5d4113(0x1c0)]=function(){const _0x2fada6=_0x5d4113;Sprite_Battler[_0x2fada6(0x44d)][_0x2fada6(0x1c0)][_0x2fada6(0x701)](this);const _0x2aa74e=this[_0x2fada6(0x493)][_0x2fada6(0xa97)]();this[_0x2fada6(0x8b7)]!==_0x2aa74e&&(this[_0x2fada6(0x8b7)]=_0x2aa74e,this['_mainSprite']['bitmap']=ImageManager[_0x2fada6(0x495)](_0x2aa74e)),this[_0x2fada6(0x6e9)]&&this['_mainSprite'][_0x2fada6(0x432)]&&this['_battler']&&(this[_0x2fada6(0x6e9)][_0x2fada6(0x432)][_0x2fada6(0x87e)]!==this[_0x2fada6(0x484)][_0x2fada6(0x9be)]()&&(this[_0x2fada6(0x6e9)][_0x2fada6(0x432)][_0x2fada6(0x87e)]=this[_0x2fada6(0x484)][_0x2fada6(0x9be)]()));},Sprite_SvEnemy[_0x5d4113(0x44d)][_0x5d4113(0x52b)]=function(){},Sprite_SvEnemy[_0x5d4113(0x44d)][_0x5d4113(0x873)]=function(_0x4afcd9,_0x6403f6,_0x36f44d){const _0x5da29d=_0x5d4113;if(this['parent'])this[_0x5da29d(0x341)][_0x5da29d(0x873)](_0x4afcd9,_0x6403f6,_0x36f44d);},Sprite_SvEnemy[_0x5d4113(0x44d)]['refreshMotion']=function(){const _0x124c0a=_0x5d4113,_0x58df67=this['_actor'];if(_0x58df67){const _0x489b50=_0x58df67[_0x124c0a(0x3a2)]();if(_0x58df67[_0x124c0a(0x745)]()||_0x58df67[_0x124c0a(0x5c8)]()){if(_0x124c0a(0x6d4)===_0x124c0a(0x6d4))this['startMotion'](_0x124c0a(0x417));else return _0x331a68[_0x124c0a(0x710)][_0x124c0a(0x326)]['Actor'][_0x124c0a(0xad9)]||![];}else{if(_0x489b50===0x3)_0x124c0a(0x65f)!==_0x124c0a(0xbc6)?this[_0x124c0a(0x8ed)]('dead'):this[_0x124c0a(0x148)][_0x124c0a(0x9fd)](this['_svBattlerSprite']);else{if(_0x489b50===0x2){if(_0x124c0a(0x351)===_0x124c0a(0x299))return this[_0x124c0a(0x76b)][_0x124c0a(0x2af)]();else this[_0x124c0a(0x8ed)](_0x124c0a(0x2f6));}else{if(_0x58df67['isChanting']())this[_0x124c0a(0x8ed)](_0x124c0a(0xa5f));else{if(_0x58df67['isGuard']()||_0x58df67[_0x124c0a(0xb04)]())this[_0x124c0a(0x8ed)](_0x124c0a(0x707));else{if(_0x489b50===0x1){if(_0x124c0a(0x247)===_0x124c0a(0x247))this[_0x124c0a(0x8ed)](_0x124c0a(0x21b));else{const _0x56d7cd=_0x4bfc61[_0x124c0a(0xc1a)],_0x317faa=_0x124c0a(0x23b);this[_0x124c0a(0x774)](_0x56d7cd,_0x317faa);}}else{if(_0x58df67[_0x124c0a(0x8d6)]()){if('DZiaT'!=='jqqIS')this[_0x124c0a(0x8ed)](_0x124c0a(0x811));else{const _0x1139d2=this['_actor'][_0x124c0a(0x32a)]();for(const _0x509a1f of _0x1139d2){this[_0x124c0a(0x668)](_0x509a1f);}}}else{if(_0x58df67[_0x124c0a(0x6ac)]())this[_0x124c0a(0x8ed)](_0x124c0a(0x417));else{if(_0x124c0a(0x6db)===_0x124c0a(0x951)){_0x4aacaa+=_0x986c19['x']-this['damageOffsetX']();const _0x3ff2e6=_0x4ba84f[_0x124c0a(0x950)]()*0x3/0x4;_0x17d959=_0x174669['y']+_0x3ff2e6,_0x58b3e=_0x368f47['min'](_0x4a0dfc,_0x4f07c5['y']+this['y']-this[_0x124c0a(0x6ce)]+_0x3ff2e6);}else this['startMotion'](_0x58df67['svBattlerData']()[_0x124c0a(0xc67)]||'walk');}}}}}}}}}},Sprite_SvEnemy[_0x5d4113(0x44d)]['inHomePosition']=function(){const _0x299fc5=_0x5d4113;if(this[_0x299fc5(0x341)])return this['parent'][_0x299fc5(0x39b)]===0x0&&this[_0x299fc5(0x341)]['_offsetY']===0x0;else{if('ImrVp'==='bqqRc'){const _0x3fce05=_0x1cc420['prototype'][_0x299fc5(0xab6)]()*0x2+0x4;let _0x490e90=_0x2cef8f['boxWidth']-_0x3fce05;_0x4a1790['VisuMZ_0_CoreEngine']&&_0x44e346[_0x299fc5(0x401)]()&&(_0x490e90+=_0x3fce05);const _0xda62b1=this[_0x299fc5(0x347)](),_0xf050cb=_0x14021d[_0x299fc5(0x75f)]-_0xda62b1-this[_0x299fc5(0xabd)]()[_0x299fc5(0x6ce)]+_0x54bbc5[_0x299fc5(0x44d)]['extraHeight'](),_0x38d2eb=0x0;return new _0x4dbab5(_0x38d2eb,_0xda62b1,_0x490e90,_0xf050cb);}else return!![];}},Sprite_SvEnemy['prototype'][_0x5d4113(0x1a1)]=function(){},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x54d)]=Sprite_Animation[_0x5d4113(0x44d)][_0x5d4113(0x1d4)],Sprite_Animation['prototype'][_0x5d4113(0x1d4)]=function(_0x51f567){const _0x3cdb6c=_0x5d4113;return _0x51f567[_0x3cdb6c(0x148)]?this[_0x3cdb6c(0x860)](_0x51f567):VisuMZ[_0x3cdb6c(0x710)][_0x3cdb6c(0x54d)][_0x3cdb6c(0x701)](this,_0x51f567);},Sprite_Animation[_0x5d4113(0x44d)]['targetDistortionSpritePosition']=function(_0x4ca29e){const _0x1787f8=_0x5d4113;let _0x4bbc9d=_0x4ca29e['x'],_0x1a8c24=_0x4ca29e['y'],_0x298930=_0x4ca29e[_0x1787f8(0x6ce)],_0x97d645=_0x4ca29e['_distortionSprite'][_0x1787f8(0x596)]['y'];_0x4ca29e['x']=_0x4ca29e[_0x1787f8(0x8bf)]+_0x4ca29e[_0x1787f8(0xc45)](),_0x4ca29e['y']=_0x4ca29e[_0x1787f8(0x559)]+_0x4ca29e[_0x1787f8(0xa51)](),_0x4ca29e[_0x1787f8(0x6ce)]*=_0x97d645;let _0x3bd949=VisuMZ[_0x1787f8(0x710)]['Sprite_Animation_targetSpritePosition']['call'](this,_0x4ca29e);return _0x4ca29e['x']=_0x4bbc9d,_0x4ca29e['y']=_0x1a8c24,_0x4ca29e[_0x1787f8(0x6ce)]=_0x298930,_0x3bd949;},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xa52)]=Sprite_AnimationMV[_0x5d4113(0x44d)][_0x5d4113(0xa88)],Sprite_AnimationMV['prototype'][_0x5d4113(0xa88)]=function(){const _0x5a27ac=_0x5d4113;VisuMZ[_0x5a27ac(0x710)][_0x5a27ac(0xa52)][_0x5a27ac(0x701)](this);if(this[_0x5a27ac(0x160)]['position']===0x3){if(this['x']===0x0)this['x']=Math[_0x5a27ac(0xb50)](Graphics[_0x5a27ac(0x61e)]/0x2);if(this['y']===0x0)this['y']=Math['round'](Graphics['height']/0x2);}else{if(this[_0x5a27ac(0x968)])return;const _0x513752=(Imported['VisuMZ_0_CoreEngine']?VisuMZ[_0x5a27ac(0xaa5)][_0x5a27ac(0x326)]['UI']['BoxMargin']:0x4)*0x2,_0x3b4c2b=(Graphics[_0x5a27ac(0x61e)]-(Graphics[_0x5a27ac(0xbb8)]+_0x513752))/0x2;if(_0x3b4c2b!==0x0)this['x']+=_0x3b4c2b;}},Sprite_Damage[_0x5d4113(0x44d)][_0x5d4113(0x584)]=function(_0x25ad58){const _0x15945d=_0x5d4113,_0x196a64=_0x25ad58[_0x15945d(0x86e)]()||_0x25ad58[_0x15945d(0x47b)]();if(_0x196a64['missed']||_0x196a64[_0x15945d(0x6c9)]){if('TUJpL'!==_0x15945d(0xb1d)){const _0x5dc950=new _0x414c7b(0x0,0x0,_0x1fe0ee[_0x15945d(0x61e)],_0x1a5656['height']);this[_0x15945d(0x6b0)]=new _0x206a89(_0x5dc950),this[_0x15945d(0x6b0)][_0x15945d(0x380)]=0x0,this[_0x15945d(0x9fd)](this[_0x15945d(0x6b0)]),this[_0x15945d(0xc2f)]();}else this[_0x15945d(0x8a9)]=0x0,this['createMiss']();}else{if(_0x196a64[_0x15945d(0x375)]){if(_0x15945d(0xb66)===_0x15945d(0xb66))this[_0x15945d(0x8a9)]=_0x196a64[_0x15945d(0xa16)]>=0x0?0x0:0x1,this[_0x15945d(0x260)](_0x196a64[_0x15945d(0xa16)]);else return _0x5c71a9[_0x15945d(0x7a6)]()['aliveMembers']()['filter'](_0x26249e=>_0x26249e!==_0x51c2fe);}else _0x25ad58[_0x15945d(0x6ab)]()&&_0x196a64[_0x15945d(0x1c3)]!==0x0&&(this[_0x15945d(0x8a9)]=_0x196a64[_0x15945d(0x1c3)]>=0x0?0x2:0x3,this[_0x15945d(0x260)](_0x196a64[_0x15945d(0x1c3)]));}_0x196a64[_0x15945d(0xb97)]&&this['setupCriticalEffect']();},Sprite_Damage[_0x5d4113(0x44d)][_0x5d4113(0xbd4)]=function(_0x49c4bd){},Sprite_Damage[_0x5d4113(0x44d)][_0x5d4113(0x260)]=function(_0x201eea){const _0xc4bdf4=_0x5d4113;let _0x5ceac2=this[_0xc4bdf4(0x2d6)](_0x201eea);const _0x9b1da5=this['fontSize'](),_0x89caa=Math['floor'](_0x9b1da5*0.75);for(let _0x12afb7=0x0;_0x12afb7<_0x5ceac2['length'];_0x12afb7++){const _0x4f73b7=this['createChildSprite'](_0x89caa,_0x9b1da5);_0x4f73b7[_0xc4bdf4(0x432)][_0xc4bdf4(0x6a1)](_0x5ceac2[_0x12afb7],0x0,0x0,_0x89caa,_0x9b1da5,'center'),_0x4f73b7['x']=(_0x12afb7-(_0x5ceac2[_0xc4bdf4(0x7da)]-0x1)/0x2)*_0x89caa,_0x4f73b7['dy']=-_0x12afb7;}},Sprite_Damage['prototype'][_0x5d4113(0x2d6)]=function(_0x30bd12){const _0xbfc2f3=_0x5d4113;let _0x2e32c5=Math['abs'](_0x30bd12)['toString']();this[_0xbfc2f3(0x5b1)]()&&(_0x2e32c5=VisuMZ[_0xbfc2f3(0x75a)](_0x2e32c5));const _0x222387=VisuMZ[_0xbfc2f3(0x710)][_0xbfc2f3(0x326)]['Damage'];let _0xed7788='',_0x467577='';switch(this[_0xbfc2f3(0x8a9)]){case 0x0:_0xed7788=_0x222387[_0xbfc2f3(0x19c)]||_0xbfc2f3(0x6ea),_0x467577=TextManager['hp'];if(_0x30bd12===0x0)_0xed7788='%1';break;case 0x1:_0xed7788=_0x222387[_0xbfc2f3(0x360)]||'+%1',_0x467577=TextManager['hp'];break;case 0x2:_0xed7788=_0x222387[_0xbfc2f3(0x589)]||'-%1\x20MP',_0x467577=TextManager['mp'];break;case 0x3:_0xed7788=_0x222387[_0xbfc2f3(0x9cb)]||_0xbfc2f3(0xbce),_0x467577=TextManager['mp'];break;}return _0xed7788[_0xbfc2f3(0x85d)](_0x2e32c5,_0x467577)[_0xbfc2f3(0xacb)]();},Sprite_Damage[_0x5d4113(0x44d)][_0x5d4113(0x5b1)]=function(){const _0x54c3e9=_0x5d4113;if(Imported[_0x54c3e9(0x567)]){if('mvvkr'===_0x54c3e9(0x44f))return VisuMZ[_0x54c3e9(0xaa5)]['Settings']['QoL']['DigitGroupingDamageSprites'];else _0x3c5414[_0x54c3e9(0x74d)](_0x416356[_0x54c3e9(0x698)],!![]);}else return![];},Sprite_Damage['prototype'][_0x5d4113(0x33b)]=function(){const _0x3d6613=_0x5d4113,_0x555870=VisuMZ[_0x3d6613(0x710)][_0x3d6613(0x326)][_0x3d6613(0x96d)];this[_0x3d6613(0x555)]=_0x555870['CriticalColor'][_0x3d6613(0x481)](0x0),this[_0x3d6613(0xb5d)]=_0x555870[_0x3d6613(0x8a8)];},Sprite_Damage['prototype'][_0x5d4113(0x749)]=function(_0x32452c,_0xdab832){const _0x300f1e=_0x5d4113;this[_0x300f1e(0x555)]=_0xdab832[_0x300f1e(0x249)]||[0x0,0x0,0x0,0x0],this[_0x300f1e(0x555)]=JsonEx[_0x300f1e(0xca0)](this[_0x300f1e(0x555)]),this[_0x300f1e(0xb5d)]=_0xdab832[_0x300f1e(0x98d)]||0x0;const _0x3da744=this[_0x300f1e(0x864)](),_0xea18bc=Math[_0x300f1e(0xa63)](_0x3da744*0x1e),_0x2da6a9=this['createChildSprite'](_0xea18bc,_0x3da744);_0x2da6a9['bitmap'][_0x300f1e(0x776)]=ColorManager[_0x300f1e(0x913)](_0xdab832[_0x300f1e(0x776)]),_0x2da6a9[_0x300f1e(0x432)][_0x300f1e(0x6a1)](_0x32452c,0x0,0x0,_0xea18bc,_0x3da744,_0x300f1e(0x4d5)),_0x2da6a9['dy']=0x0;},Sprite_Damage[_0x5d4113(0x44d)][_0x5d4113(0xb7e)]=function(_0x397140,_0x2c39f0,_0x4e5183){const _0x7b8f0=_0x5d4113,_0x3ea4b5=Math[_0x7b8f0(0xbcc)](this[_0x7b8f0(0x864)](),ImageManager[_0x7b8f0(0xa92)]),_0x31238d=Math[_0x7b8f0(0xa63)](_0x3ea4b5*0x1e),_0x18ab47=this[_0x7b8f0(0xc46)](_0x31238d,_0x3ea4b5),_0x581968=ImageManager[_0x7b8f0(0x706)]/0x2,_0x37347d=_0x18ab47['bitmap'][_0x7b8f0(0x4d8)](_0x2c39f0+'\x20');_0x18ab47[_0x7b8f0(0x432)][_0x7b8f0(0x776)]=ColorManager[_0x7b8f0(0x913)](_0x4e5183[_0x7b8f0(0x776)]),_0x18ab47[_0x7b8f0(0x432)][_0x7b8f0(0x6a1)](_0x2c39f0,_0x581968,0x0,_0x31238d-_0x581968,_0x3ea4b5,_0x7b8f0(0x4d5));const _0x1141fd=Math['round']((_0x3ea4b5-ImageManager[_0x7b8f0(0xa92)])/0x2),_0x2acbc3=_0x31238d/0x2-ImageManager[_0x7b8f0(0x706)]-_0x37347d/0x2+_0x581968/0x2,_0x38c110=ImageManager[_0x7b8f0(0xc28)](_0x7b8f0(0x90e)),_0x38a9a1=ImageManager[_0x7b8f0(0x706)],_0x199393=ImageManager[_0x7b8f0(0xa92)],_0x47d34f=_0x397140%0x10*_0x38a9a1,_0x2ae150=Math[_0x7b8f0(0xa63)](_0x397140/0x10)*_0x199393;_0x18ab47[_0x7b8f0(0x432)][_0x7b8f0(0x89b)](_0x38c110,_0x47d34f,_0x2ae150,_0x38a9a1,_0x199393,_0x2acbc3,_0x1141fd),this['_flashColor']=_0x4e5183['flashColor']||[0x0,0x0,0x0,0x0],this[_0x7b8f0(0x555)]=JsonEx[_0x7b8f0(0xca0)](this['_flashColor']),this[_0x7b8f0(0xb5d)]=_0x4e5183['flashDuration']||0x0,_0x18ab47['dy']=0x0;},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x9e4)]=Sprite_Damage[_0x5d4113(0x44d)][_0x5d4113(0xc46)],Sprite_Damage[_0x5d4113(0x44d)]['createChildSprite']=function(_0x40927b,_0x41ea68){const _0x26b8de=_0x5d4113;return _0x41ea68=Math[_0x26b8de(0xb50)](_0x41ea68*1.2),VisuMZ[_0x26b8de(0x710)][_0x26b8de(0x9e4)][_0x26b8de(0x701)](this,_0x40927b,_0x41ea68);},VisuMZ['BattleCore'][_0x5d4113(0x9da)]=Sprite_StateIcon[_0x5d4113(0x44d)][_0x5d4113(0xb6f)],Sprite_StateIcon[_0x5d4113(0x44d)]['updateFrame']=function(){const _0x2cb626=_0x5d4113;VisuMZ[_0x2cb626(0x710)][_0x2cb626(0x9da)][_0x2cb626(0x701)](this),this['opacity']=this[_0x2cb626(0x673)]>0x0?0xff:0x0;},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xbc1)]=Sprite_Weapon[_0x5d4113(0x44d)][_0x5d4113(0x6b5)],Sprite_Weapon[_0x5d4113(0x44d)][_0x5d4113(0x6b5)]=function(){const _0x2d0164=_0x5d4113;VisuMZ['BattleCore'][_0x2d0164(0xbc1)][_0x2d0164(0x701)](this),this[_0x2d0164(0x432)]&&(this[_0x2d0164(0x432)][_0x2d0164(0x87e)]=VisuMZ[_0x2d0164(0x710)][_0x2d0164(0x326)][_0x2d0164(0xc03)]['SmoothImage']);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x43f)]=Sprite_Gauge[_0x5d4113(0x44d)]['smoothness'],Sprite_Gauge['prototype'][_0x5d4113(0x9c5)]=function(){const _0x3fa1b7=_0x5d4113;return this[_0x3fa1b7(0x3f9)]!=='time'?VisuMZ[_0x3fa1b7(0x710)][_0x3fa1b7(0x326)]['HpGauge'][_0x3fa1b7(0x494)]??0x14:VisuMZ[_0x3fa1b7(0x710)][_0x3fa1b7(0x43f)][_0x3fa1b7(0x701)](this);};function Sprite_HpGauge(){const _0x6647c5=_0x5d4113;this[_0x6647c5(0x7e2)](...arguments);}function _0x19d1(){const _0x277502=['collapseType','maxItems','Game_Temp_requestAnimation','ScaleX','COMBAT\x20LOG','xZTBN','BattleLog','isCharging','hhTYY','isBattleCoreTargetScope','RmigN','isFlipped','critical','isSceneChanging','doesPageHaveOnceParallelStart','SkillItemStandardCols','actorCommandSingleSkill','ActSeq_BattleLog_PushBaseLine','addDamageSprite','mKiwT','KmILi','ActSeq_Motion_WaitMotionFrame','AdjustRect','CxGZm','Window_BattleLog_clear','Turns','alive\x20enemies\x20not\x20user','ActSeq_Impact_ZoomBlurPoint','CalcActionSpeedJS','ActSeq_BattleLog_Clear','eokbW','lUlbk','sliceMax','OxHwn','lukEffectRate','pBZsj','inputtingAction','qdtwe','svBattlerShadowVisible','ActSeq_Movement_WaitForScale','_lastPluginCommandInterpreter','DistanceY','RMzsN','Game_Interpreter_command301','_effectType','boxWidth','isCTB','_allTargets','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','ShowCritical','applyGlobalCommonEventNotetags','CheckSkillCommandShowSwitches','open','TP_Flat','Sprite_Weapon_loadBitmap','Window_BattleLog_performMagicEvasion','_additionalSprites','onGrowEnd','adjustPosition_ScaleDown','mhSRN','commandNameWindowDrawText','base','move','removeStatesAuto','setupBattleCoreData','max','Scene_Battle_createCancelButton','+%1\x20MP','WaitForAngle','close','Intensity','ActionSkillMsg2','setupHpGaugeSprite','setup','moveBattlerToPoint','BrOTH','GeawQ','zvJbM','XoAmC','ZwjqW','_battleCoreNoElement','_waitMode','useItem','dead\x20battlers','ueiMr','magicReflection','compareBattlerSprites','onEscapeSuccess','value1','CmdStyle','WfuiW','ActSeq_Mechanics_OtbOrder','ActSeq_Weapon_ClearActiveWeapon','changePaintOpacity','extraHeight','CriticalHitMultiplier','AutoBattleBgType','autoSelect','animationId','xZtRt','requestAnimation','ActSeq_Motion_ClearFreezeFrame','onAllActionsEnd','flipVisualCutinVert','Actor-%1-%2','helpWindowRect','isActionSelectionValid','performTpbActiveCheckSwitch','clearActiveWeaponSet','NameAlwaysHidden','WMqpK','1048182njDvtM','DFrNm','ActorCmd','battleAngle','lastCommandSymbol','OsBdB','updateRefresh','ext','_createCursorArea','Actor','ShowPortraitsBorderStyle','scope','ActSeq_DB_DragonbonesMotionAni','Sprite_Enemy_setBattler','battleback2Name','IconStypeMagic','_helpWindow','QlTYo','battleMembers','updateMotionCount','clamp','_skillIDs','launchBattle','parse','zaCHp','updateCollapse','_targetGrowY','makeTargetSelectionMoreVisible','PrioritySortActors','Sprite_Battler_damageOffsetY','ONnZh','faceRect','autoBattleStart','SpohE','unshift','SvWeaponSolo-%1-%2','Window_BattleLog_performAction','Window_BattleLog_update','offsetX','weaponTypes','tXBmb','StatusWindowSkinHide','ActSeq_BattleLog_WaitForBattleLog','gDVbS','CmdTextAutoBattle','attackMotions','loadSystem','ShowCurrentState','onDisabledPartyCommandSelection','getLastPluginCommandInterpreter','statusWindowRectBorderStyle','CmdIconEscape','SkvNP','updateCommandNameWindow','VisuMZ_3_ActSeqCamera','TpbGaugeOffsetY','PostEndBattleJS','aDqdc','Scene_Battle_initialize','CalcEscapeRaiseJS','SiFBi','isCustomBattleScope','gainFullActionsPTB','ActSeq_Cutin_AddVisualCutinEffect','ActSeq_Weapon_NextActiveWeapon','makeEscapeRatio','statusTextAutoBattleStyle','ActSeq_Cutin_WaitForExit','border','oUDAy','BattleManager_cancelActorInput','addGuardCommand','onSkewEnd','ConvertCount','cgEst','extraPositionX','createChildSprite','AnchorX','addChildAt','loadPicture','AUTO\x20BATTLE','isDisplayEmergedEnemies','ArRedRate','process_VisuMZ_BattleCore_BaseTroops','logActionList','repositionCancelButtonBorderStyle','ITEM','selectSymbol','onEncounterBattleCore','_battleCoreBattleResumeAfter','pages','physical','description','Game_Action_setAttack','CmdIconItem','ActSeq_Movement_Scale','StepDuration','Parse_Notetags_Targets','BattleVictoryJS','resizeWindowBorderStyle','PreStartBattleJS','errDL','svActorVertCells','setCommonEvent','NoKDx','ActSeq_Zoom_Scale','findSymbolExt','animationBaseDelay','Window_ActorCommand_setup','motionIdle','svAnchorX','Scene_Battle_stop','hkBLq','Scene_Battle_onEnemyOk','_weaponSprite','uJQIh','onOpacityEnd','Window_BattleLog_displayCritical','EasingType','Window_ActorCommand_initialize','onBattleStartBattleCore','_skewEasing','toMHd','battleSys','MotionSpeed','attackStatesRate','performAction','updateEventMain','ActSeq_Element_ForceElements','SceneManager_isSceneChanging','zqutj','iyKAo','Window_BattleLog_pushBaseLine','Scene_Battle_updateBattleProcess','PortraitScale','callOkHandler','isNextSceneBattleTransitionable','FMNes','GUARD','ScaleToFit','QoL','children','drawItem','tpbCommandFight','skills','skillId','effect','isHidden','ActSeq_Mechanics_ArmorPenetration','drawItemImage','_forcing','oUEyV','createCancelButton','bBasS','ZSltD','CastCertain','createSeparateDamagePopups','Game_Action_itemHit','PostEndActionJS','setupShockwaveImpactFilter','bitmapHeight','VisuMZ_2_BattleSystemOTB','battleDisplayText','isPTB','replace','setupZoomBlurImpactFilter','makeDeepCopy','isGuard','checkCacheKey','addExtendedTroopMembers','updateStateIconSprite','_canLose','getDamageStyle','dimColor2','WaitCount','text\x20target','qlEOF','_skillWindow','isSkill','qzafy','motionType','tuTgD','_distortionSprite','linkSprite','WaitForFloat','Game_Interpreter_PluginCommand','drawItemBackground','kZIKw','actionEffect','TextAlign','getMenuImage','%1Damage%2JS','addBattleCoreAutoBattleStyleCommand','_tempActor','BBScr','actionBattleCoreJS','updateHomeMove','duration','XPActorDefaultHeight','hhQKQ','_shadowScaleX','QfMdq','VCkkc','min','createContents','all\x20targets','_animation','Targets2','ShowActorGauge','preemptive','abs','lFdgG','isPhysical','autoBattleWindowRect','current\x20target','kUeBF','TeSLt','terminate','GxIZf','VPfgU','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','ShowFailure','setImmortal','performRecovery','toLowerCase','isQueueOptionsMenu','SkewY','wYZDu','applyGuard','cDNef','onEnemyCancel','YGuPR','delay','isAnyoneSkewing','Qpafp','mcnhP','Window_BattleLog_performSubstitute','MeleeDistance','Scene_Battle_logWindowRect','bXfYl','attackAnimationId2','ActSeq_Mechanics_StbRemoveExcessActions','notFocusValid','addAutoBattleCommands','AllowRandomSpeed','offsetY','gJaGC','ActSeq_Mechanics_StbExploit','createShadowSprite','BattleLayout','Spriteset_Battle_createBattleField','battleProjectiles','_performActionEnd','actions','Scene_Map_initializeAfter','OffsetY','clear','Sprite_Actor_moveToStartPosition','Enemy','Neouh','setupDamagePopup','Window_BattleEnemy_initialize','Enable','isPreviousSceneBattleTransitionable','dwvFm','createHelpWindowBattleCore','hpDamageFmt','nbLKQ','_currentAngle','HyDmE','WaitForScale','updateFlip','ActSeq_Movement_Opacity','createAttachmentSprites','updateEffectsContainer','BindCommonEventKeysForGroup','alive\x20opponents\x20not\x20target','VisuMZ_2_PartySystem','BattleManager_endBattle','ShowFacesListStyle','rowSpacing','Linear','Immortal','StepDistanceX','FMbnw','isCommandEnabled','ElbPx','battleCommandIcon','DFvfh','JumpToLabel','ActSeq_Impact_MotionBlurScreen','Scene_Battle_startEnemySelection','hyedr','ChargeRate','_linkedSprite','Window_BattleLog_performActionEnd','svBattlerAnchorY','_action','hEyNg','gtbNu','uMBkt','zVClL','updateBitmap','performActionEnd','Reveal','mpDamage','registerCommand','BJUCH','nILjG','cNzIo','loadWindowskin','WaitForExit','ActSeq_Movement_FacePoint','OdaVj','NameAttachStateIcon','_dragonbonesSpriteContainer','lineRect','_svBattlerSprite','_lastAction','nOqHU','Window_BattleLog_performCollapse','BattleManager_makeActionOrders','targetSpritePosition','createCommandNameWindow','pointX','ShowAddedState','addAnimationSpriteToContainer','JS\x20%1END\x20TURN','battlerSprites','damageStyle','UOlMK','processRandomizedData','eukqV','checkExtendTroopCompatibility','ActSeq_Angle_Reset','deadMembers','windowPadding','startTpbTurn','Formula','select','performWeaponAnimation','applyArmorModifiers','onBattleEnd','performSTBExploiter','helpWindowRectBorderStyle','jpvRS','ShowSubstitute','softDamageCap','isSkewing','AddOption','repeatTargets','Game_Action_apply','ARRAYJSON','EscapeFailureJS','putActiveBattlerOnTop','mainSpriteScaleY','traitObjects','grkSi','TsgON','initBattleCore','options','battleInjectPrep','FdevD','Destination','vjBNW','NameAlwaysVisible','AweEL','addShowHpGaugeCommand','getSkillTypes','checkBattleEnd','isMagicSkill','_targetOpacity','_ptbActionCost','iRvKS','onBattleStart','mYZEj','autoSelectLastSelected','clearForcedGameTroopSettingsBattleCore','visualCutinPortraitHue','WSjfx','_checkOn','jsOneForOne','initMembersBattleCore','isOpen','_branch','VlpdZ','ActSeq_Animation_WaitForAnimation','_cancelButton','AxTIC','mainSpriteWidth','HYyhw','PreStartActionJS','startInput','abnormal','effects','recoverAll','MAaTM','LXxgM','_actorSprites','refreshMotion','WaitForMovement','Game_Interpreter_updateWaitMode','Victory','isCertainHit','UqXvY','BaseTroopIDs','setHelpWindow','usePremadeActionSequence','_tpbSceneChangeCacheActor','commandOptions','random','XXQMY','VisuMZ_1_ElementStatusCore','initMembers','parallaxHueEnemyModifier','WaitForSkew','bavoO','BattleManager_onEscapeSuccess','showHelpWindow','setSvBattlerSprite','innerHeight','ltJFo','autoMeleeMultiTargetActionSet','isItemCommandEnabled','process_VisuMZ_BattleCore_TraitObject_Notetags','autoBattleAtStart','updateStart','alive\x20actors\x20not\x20user','_targets','alive\x20enemies\x20not\x20target','ActSeq_Camera_Offset','uiNob','dRLZq','zczfF','skewDuration','addWeaponSwapCommand','updateStateSprite','KJfNA','RPxsM','flashColor','WaitForAnimation','Dijif','initVisibility','CommandVisible','ActionItemMsg','updateBattlebackBitmap2','mlfWR','CalcEscapeRatioJS','applyDamageCaps','_commonEventIDs','stepBack','requestRefresh','freezeTime','updatePadding','enemy','ExSCc','troop','VisuMZ_4_BreakShields','Window_BattleLog_displayEvasion','ShowRemovedState','ActSeq_Mechanics_TextPopup','zMDzK','createDigits','ActSeq_Movement_HomeMoveToTarget','ForceExploiter','createActorCommandWindow','isImmortal','skillItemWindowRectMiddle','ActSeq_Animation_ChangeBattlePortrait','applyBattleCoreJS','prepareCustomActionSequence','snapForBackground','cameraClamp','Name','basicGaugesY','waitForFloat','updateBorderStyle','pow','Window_BattleLog_performRecovery','Opacity','playOnceParallelInterpreter','EcJbe','Window_BattleStatus_drawItemImage','updateAttachmentSprites','_targetIndex','ActSeq_Projectile_Picture','EscapeSuccess','%1Apply%2JS','createBattleUIOffsetX','ActSeq_Mechanics_RemoveBuffDebuff','ybxyf','reduce','YPUbC','applyGlobal','ActSeq_Animation_ShowAnimation','XoTlC','playOnceParallelTroopPage','RegExp','getEnemyIdWithName','JS\x20%1DAMAGE\x20%2','setLetter','addGeneralOptions','index','_enemyNameContainer','_preemptive','KpgEj','Sprite_Actor_updateBitmap','_growWholeDuration','onStaticEnemyBitmapLoad','getHalfActionsPTB','setAttack','_dimmerSprite','iaddV','ActSeq_Target_RandTarget','damageContainer','Game_Action_itemEffectAddAttackState','Scene_Map_initialize','ActSeq_Movement_Spin','WbQSY','wtnop','goqKZ','BattleStartEvent','IEJXp','CreateCommonEventKeys','drawTextTopAligned','RSMBr','zCIzI','textSizeEx','Scene_Options_maxCommands','DefeatEvent','bMUXl','40TWNeAt','_motionCount','AS\x20USER','_effectDuration','_updateCursorArea','aMkab','isSceneBattle','kZZKU','DftKf','kcEIq','pop','isDuringNonLoopingMotion','setHandler','isFrameVisible','BattleSystemCTB','damageRate','PARTY','validTargets','CtzHW','aSdYu','DTB','ZUCyf','ShowEnemyGauge','shift','VisuMZ_4_CombatLog','onRVK','vNOCC','name','allBattleMembers','AsTarget','SvBattlerMass-%1-%2','NameAlwaysSelectOnly','isGrowing','SwRGh','_regionBattleback1','_surprise','SZjJe','HXDWV','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','PostStartTurnJS','swapEnemyIDs','push','Game_Troop_setup','Class-%1-%2','fSeDj','_jumpHeight','performEvasion','Scale','UqURR','createString','setupBattlebackBattleCore','anchorY','canGuardBattleCore','_battleCoreForcedElements','isMeleeSingleTargetAction','applyResultSwitches','_enemyId','currentAction','ActSeq_Cutin_WaitForEntrance','randomTargets','jrlLV','visualHpGauge','displayHpDamage','_borderPortraitSprite','endAction','CombatLogIcon','hardDamageCap','ActSeq_Mechanics_Multipliers','States','XAAAV','setupBlueRedInvertImpactFilter','BTestBypass','ActSeq_Set_WholeActionSet','Window_BattleLog_displayMpDamage','setBattleCameraPoint','freezeFrame','createTargetsJS','sliceMin','Sprite_Actor_updateShadow','_phase','stepForward','sleep','refreshActorPortrait','RevertAngle','KLJTO','displayCritical','uDpBO','resetFontSettings','IconStypeNorm','displayReflection','_forcedHomeX','Game_BattlerBase_die','HpGaugeOffsetX','Window_BattleLog_displayActionResults','dDGYf','BattleManager_onEncounter','EWUJS','HnzTM','TPB','ActSeq_Mechanics_Collapse','createInnerPortrait','windowskin','setBackgroundType','battleLayoutStyle','19428mAYrrf','_floatHeight','hitRate','GuardFormulaJS','_inputting','CmdIconFight','ActSeq_Movement_FaceTarget','maxCommands','CheckVisibleSwitchNotetags','tRAXK','qpEJd','BattleManager_initMembers','updatePointAnimations','padding','_autoBattleWindow','start','dbSii','regenerateAllBattleCore','clearElementChanges','_indent','portraitType','checkAutoCustomActionSequenceNotetagEffect','checkSubstitute','spHZL','ItoAW','Settings','Window_BattleLog_performMiss','sCGZI','displayTpDamage','skillTypes','PortraitScaleBorderStyle','addedStateObjects','_motion','turn','PostDamageAsUserJS','_battlerHue','aliveMembers','_skewX','allowRandomSpeed','checkTpbInputClose','endBattle','yxYDm','rqfjd','HZhdw','getBattlePortraitOffsetX','skew','setupCriticalEffect','Sprite_Actor_initMembers','Scene_Battle_terminate','Cqkoc','_shakeFlinchPower','AllowCollapse','parent','_stateIconSprite','aDlsK','messageSpeed','clearWeaponAnimation','TP_Rate','helpAreaBottom','placeGauge','WaitCount1','kqtVn','_baseTexture','RRItb','maxBattleMembers','makeActionListAutoAttack','HomePosJS','dlpqW','rxqlH','Scene_Battle_commandFight','performDamage','PreDamageAsUserJS','currentSymbol','onBattleEndBattleCore','QIHyR','ActSeq_DB_DragonbonesTimeScale','eraseState','createBattleUIOffsetY','createLowerLayer','Text','vFpIm','KNRfi','setBattleImpactTimeScale','hpHealingFmt','removeHorrorEffect','_floatDuration','commandSymbol','setBattleCameraTargets','PvQvc','Game_Battler_onBattleEnd','ParseItemNotetags','battleSpriteSkew','Fpbdr','battleJump','SnZKh','_totalValue','uJqHp','OffsetAdjust','_angleEasing','setBattlerBattleCore','createDamageContainer','Scene_Battle_helpWindowRect','xDycL','displayActionResults','hpAffected','kbYAm','processExtendTroopMembers','loadBattleback2','pHVyv','_targetGrowX','startPartyCommandSelection','contains','command119','sortEnemies','IIhNd','opacity','NogaY','escape','HP_Rate','ATTACK','changeInputWindow','MaxLines','rEomh','DefaultSoftScaler','applyItem','ZVrnX','ActSeq_Movement_FaceDirection','stateRate','hasStaticSvBattler','VisuMZ_3_ActSeqImpact','Tdbhf','map','redraw','okButtonText','anCKo','isAnyoneJumping','BackColor','setActiveWeaponSet','BattleManager_startInput','callUpdateHelp','FocusY','bWtHQ','_offsetX','visible','autoBattleStyle','default','BattleLogRectJS','canGuard','ActSeq_Mechanics_CustomDmgFormula','stateMotionIndex','createBattleField','Sprite_Enemy_setHue','spkCE','jFajx','battleInjectAni','createUIContainer','applyData','zrrRd','_wtypeIDs','TSgAc','expRate','ApyPJ','dHbGy','xCjmB','SxTGY','mbYuM','PSuGT','JS\x20%1START\x20TURN','Sprite_Actor_createStateSprite','EaJPc','JS\x20%1START\x20BATTLE','occasion','QoBlZ','PkWKR','command357','addSingleSkillCommands','ActSeq_Movement_Float','preparePartyRefresh','finishActionSet','process_VisuMZ_BattleCore_Failsafes','CreateCutinSettings','XfJpy','selectNextCommand','textWidth','checkTpbInputOpen','332048aBGRWG','_target','isOpponent','battleMove','_currentActor','TMbUn','playEnemyAttack','CPuKJ','ZWOtt','NcUww','BfgFr','IMeJR','NQNVE','Game_Battler_clearDamagePopup','PostRegenerateJS','svShadow','revealNewWeaknesses','displayCounter','split','WaitForSpin','gaugeLineHeight','Game_BattlerBase_refresh','getNextSubjectFromPool','isLearnedSkill','DUwbS','BattleDefeatJS','kEuhD','addPartyCommand','AutoMeleeAoE','becomeSTBExploited','exit','Sprite_Enemy_updateCollapse','plfFe','drawItemStyleIconText','jumpBattler','alterChange','_defeatedEnemies','performReflection','parallaxScrollXinvertEnemy','QTaYe','battler','Scene_Battle_startActorSelection','anchorX','Spriteset_Battle_createLowerLayer','stbGainInstant','MtTLp','frameVisible','alive\x20friends','nextActiveWeaponSlot','Parse_Notetags_TraitObjects','Override','_statusType','mdYvy','getConfigValue','clearBattlerMotionTrailData','battleSpin','_updateCursorFilterArea','svActorHorzCells','SRSmF','isSideButtonLayout','attackAnimationIdSlot','canAttackBattleCore','PVqgJ','PopupShiftY','HelpAutoBattle','gainHp','setupWeaponAnimation','YQMCo','Scene_Boot_onDatabaseLoaded','autoMeleeSingleTargetActionSet','rpINL','missed','HaJSP','Game_Action_needsSelection','createAutoBattleWindow','moveToStartPosition','createPartyCommandWindow','iterateBattler','updateAngleCalculations','Window_BattleLog_performDamage','Window_Options_addGeneralOptions','walk','movement','inputting','motionSpeed','battleCamera','commandNameWindowDrawBackground','DhKtH','pattern','BARE\x20HANDS','AutoBattleCancel','addAutoBattleCommand','process_VisuMZ_BattleCore_CreateRegExp','oNmch','optDisplayTp','battleZoom','_makeFontNameText','_actions','findIndex','filterArea','_lineHeight','gainCurrentActionsFTB','iGsoX','icBxs','performCastAnimation','prsca','waitForNewLine','_createEffectsContainer','bitmap','isATB','Scene_Battle_createPartyCommandWindow','makeHpDamageText','_flinched','_cache','MANUAL','itemEffectAddNormalState','BdliF','process_VisuMZ_BattleCore_Notetags','adjustWeaponSpriteOffset','_actorCommandWindow','_skewY','Sprite_Gauge_smoothness','updateAttachedSprites','item','_opacityEasing','casting','LKloY','_updateClientArea','_handlers','updatePhase','SkillItemBorderCols','UlOsF','setHelpWindowItem','ActSeq_Mechanics_ActiveChainInputDisable','moveBattlerHomeToPoint','prototype','iNpzP','mvvkr','Game_Map_battleback1Name','xWovf','_weather','portrait','opacityStart','cnZLC','cameraDuration','visualCutinPortraitIndex','command236','destroy','isForFriend','wholeActionSet','isAutoBattle','removeDamageSprite','_text','join','fittingHeight','isAppeared','fFMEP','Window_BattleLog_popupDamage','DistanceAdjust','updateBossCollapse','JSbeJ','removeOnceParallelInterpreter','UpRdx','PostStartActionJS','vwZHK','Game_Action_evalDamageFormula','isMoving','_shadowScaleY','onTurnEnd','_reflectionTarget','addAttackCommand','updateShadow','sHlju','_armorPenetration','HP_Flat','filter','contents','isSkipPartyCommandWindow','ActSeq_Motion_RefreshMotion','_shake','bjNCw','result','placeStateIcon','TimeScale','victory','performCollapse','_statusWindow','slice','ConfigManager_applyData','TBtcV','_battler','currentExt','createWeather','addState','mfpTy','STR','MWmjp','startAction','ActionCount','DQaQn','_itemWindow','ParseClassNotetags','getItemDamageAmountTextBattleCore','NewPopupBottom','_cursorArea','_actor','AniDuration','loadSvActor','process_VisuMZ_BattleCore_PluginParams','StyleName','targetObjects','ShowRemovedBuff','forceWeaponAnimation','drawBackgroundRect','gePzF','StateIconOffsetX','performMagicEvasion','logWindowRect','updateSpin','%1Event','oazPh','chantStyle','power','spell','ActSeq_Impact_ShockwavePoint','Window_SkillList_maxCols','\x5cI[%1]%2','Game_Interpreter_command283','partyCommandWindowRect','StartTurnWait','loadEnemy','drawLineText','mAyGW','WtypeId','includes','addEscapeCommand','statusWindowRectDefaultStyle','Govek','updateForceAction','AASjz','updateSkew','makeCommandList','onEscapeFailure','maxLines','State-%1-%2','PHiUt','createCommandVisibleJS','requestDragonbonesAnimation','_preBattleCommonEvent','Window_BattleLog_displayFailure','_hpGaugeSprite','displayMiss','BattleManager_onEscapeFailure','battleGrow','YNYJE','ApplyImmortal','dead\x20actors','performActionMotions','forceAction','applyImmortal','regionId','PreApplyAsUserJS','setWaitMode','cancel','XPActorCommandLines','float','JS\x20%1APPLY\x20%2','commandFight','_activeWeaponSlot','mhp','chVgR','center','ANTI_TINT_UI','parameters','measureTextWidth','AS\x20TARGET','StatusWindowAttachmentBack','JEGYf','turnCount','updateOnceParallelInterpreters','yHJOR','battleback1Name','apply','updateJump','mwcsN','11715BrSCxq','focus','HelpOptions','portraitFlipVert','_padding','isShownOnBattlePortrait','StateIconOffsetY','PreEndActionJS','gpbmw','HTEsF','ActSeq_Zoom_Reset','prEhT','createJS','addOptionsCommand','isPlaytest','FilZQ','jKFhu','Defeat','updateBorderSprite','UrfNX','isPreviousScene','animationNextDelay','sMiNG','oiVgt','Lqddq','autoSelectPriority','ShowPopup','VisuMZ_1_MainMenuCore','Sprite_Battler_update','Game_Actor_makeActionList','pNnUd','<CENTER>%1','%1StartActionJS','resize','angle','_escapeRatio','_stateSprite','DESUE','StatusWindowSkinFilename','alive\x20friends\x20not\x20target','charged','_actionInputIndex','Vcgru','removeImmortal','ClearBattleLog','singleSkill','_requestRefresh','WuGKL','PopupShiftX','svBattlerData','attackSkillId','battleStatusWindowAnimationContainer','svAnchorY','_battlerContainer','_deathStateApplied','gainHalfActionsPTB','isNextScene','createAnimationSprite','Post','ActSeq_Impact_Desaturate','VWbIu','StatusWindowAttachmentFrontOffsetY','EnableSoftCap','lqKLQ','Scene_Battle_update','PopupDuration','ydkSC','umrQP','_createClientArea','startWeaponAnimation','kivUl','oBQgt','retreat','_forcedHomeY','ResetFocus','clearRect','_homeY','_homeWholeDuration','inBattle','mnBtn','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','startBattle','BindCommonEventKeysForObj','xLGui','CmdIconOptions','Game_Battler_performMiss','CzdMX','quDgg','isConfused','MAXHP','Game_Party_addActor','autoBattleUseSkills','PrioritySortActive','setBattleCameraOffset','_drawTextOutline','waitCount','ASTXK','FlinchDistanceX','concat','setActiveWeaponSlot','okeiq','SPmHn','shadow','skill','kDxsx','parseForcedGameTroopSettingsBattleCore','Sprite_Animation_targetSpritePosition','getStypeIdWithName','drawItemStatusListStyle','ActiveTpbOptionsMessage','BattleManager_inputtingAction','Sprite_Battler_updateMain','Sprite_Enemy_initVisibility','Ehgqy','_flashColor','isForRandom','requestPointAnimation','RCrvj','_baseY','Parse_Notetags_Action','FlashDuration','QOVyN','VisuMZ_2_BattleSystemSTB','process_VisuMZ_BattleCore_jsFunctions','Game_Enemy_transform','Game_BattlerBase_initMembers','_endingBattle','createMainSprite','displayItemMessage','DefaultSoftCap','_active','criticalHitFlat','VisuMZ_0_CoreEngine','processDefeat','ActSeq_Movement_WaitForMovement','%1EndBattleJS','#ffffff','VisuMZ_2_BattleSystemFTB','ocHmw','ATK','QxPHW','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','NUM','addActor','addMeleeReturnActionSet','isAnyoneSpinning','getHardDamageCap','PopupPosition','vertCells','requestMotionRefresh','updateBattleProcess','itemTextAlign','clearBattleCoreData','action','_emptyBitmap','addChildToBack','selectNextActor','JS\x20BATTLE\x20VICTORY','mRaGd','drawEnemyName','faceWidth','setupBattleCore','ActSeq_Movement_Skew','PostStartBattleJS','ChangeOrderBy','clearResult','mpDamageFmt','UINOO','undecided','addFightCommand','drawItemStyleIcon','getAttackMotionSlot','showNormalAnimation','_targetSkewX','onHomeMoveEnd','isBTB','EEfNQ','_backAttachmentSprite','processAnimationRequests','scale','updateHpGaugePosition','stypeId','ActSeq_Movement_WaitForJump','addSkillCommands','setCursorRect','registerDefeatedEnemy','Targets1','canUseItemCommand','uhofr','isFTB','biqjM','portraitHue','startSpin','_scene','refreshCursor','_baseLineStack','encounterList','front\x20base','Sprite_Battler_startMove','2qeOpGj','BKtVt','create','Game_Map_encounterList','text','hTFft','ActSeq_Animation_PlayAtCoordinate','useDigitGrouping','azBzB','_injectAnimationSprite','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','isBattleSys','ActSeq_Mechanics_EtbAction','_namesCount','applySoftDamageCap','Game_Party_removeActor','bVjSE','QXfat','textAlign','setFrame','trueRandomTarget','Spriteset_Battle_update','forceSelect','canMove','DisablePartyCmd','jZTdD','\x20to\x20%1\x20midbattle.','BattleManager_startBattle','BHstQ','SceneManager_push','isActing','bottom','performMiss','OffsetX','_lastHpDamage','MOTIONS','refreshStatusWindow','IhGoV','gainCurrentActionsETB','_angleRevertOnFinish','activate','xXCEb','invokeMagicReflection','CriticalHitFlat','displayRemovedStates','ParseStateNotetags','dataId','CriticalDmgFlat','partyCommandWindowRectXPStyle','PreRegenerateJS','targetActionSet','_tpbNeedsPartyCommand','isChangingOpacity','Scene_Battle_createActorCommandWindow','dbaIV','removeChild','alphabetic','MotionAni','rzBHQ','arPenRate','NgBrz','Game_BattlerBase_addNewState','visualCutinPortraitFilename','_targetSkewY','createHelpWindow','attack','dragonbonesData','ActSeq_Mechanics_BoostPointsChange','splice','createStateSprite','_back2Sprite','UNTITLED','ShowTpDmg','ExtraSettings','growBattler','drawSkillCost','YoVMs','_animationSprites','_targetHomeX','lLCTn','fPTYq','update','performCounter','isTpb','ipqTJ','egzSn','WaitForCamera','SkillsStatesCore','refresh','xOkMX','jsScaleToFit','clearDamagePopup','Sprite_Battleback_adjustPosition','canInput','onFloatEnd','CheckVisibleSkillNotetags','ActSeq_Mechanics_WaitForEffect','isTpbCharged','BattleManager_isTpbMainPhase','_flipScaleX','drawItemStatusXPStyle','frameCount','isAnyoneChangingOpacity','ActSeq_Impact_ColorBreak','ActSeq_Motion_FreezeMotionFrame','MVrbG','IYxHu','dMeqx','_lastRegenFrameCount','itemHit','Game_Battler_performEvasion','CounterPlayback','BattleManager_checkSubstitute','Trgaz','Scene_Map_launchBattle','active','width','SkipPartyCmd','displayReflectionPlayBack','getAttackMotion','debuffAdd','ActSeq_Inject_WaitForInjectAni','oUWhb','atbInterrupt','onEnemyOk','XzycQ','symbol','isActiveTpb','_battlePortrait','Ezxpf','command301','aUiBk','getItemDamageAmountTextOriginal','updateWeather','YwzOb','ParseActorNotetags','fight','Window_BattleLog_refresh','applyCritical','LpwAj','anchor','processPostBattleCommonEvents','Scene_Battle_onActorOk','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','weatherType','battleCameraData','escpm','createBorderStylePortraitSprite','ActionStart','SvBattlerSolo-%1-%2','processAbort','oxkwv','createActionSequenceProjectile','updateShadowVisibility','_partyCommandWindow','AsUser','startShakeFlinch','nYNjo','_motionType','numRepeats','AlZAC','wait','TargetLocation','vEpem','needsSelectionBattleCore','_homeX','command283','ESwil','subject','_animationCount','Game_BattlerBase_isStateResist','mainSpriteScaleX','VisuMZ_2_HorrorEffects','itemEffectAddAttackState','BattleSystemBTB','selectLast','param','JhBGr','VisualCutinEffect','canBattlerMove','hue','rPJFV','Sprite_Actor_update','oIapW','updateActors','Game_Battler_clearMotion','alive\x20actors','Game_Action_isForOpponent','CommandWidth','okTargetSelectionVisibility','addSkillTypeCommand','_damages','ActSeq_Mechanics_AnalyzeWeakness','qwmZV','bossCollapse','skewBattler','Sprite_Actor_updateFrame','Radius','adjustPosition_1for1','YIUNJ','Shadow2','_iconIndex','UTShW','ActSeq_Mechanics_BtbGain','FLYda','fnordRemovedStates','priority','reverse','changeBattlebacks','grgIb','Sprite_Battler_isMoving','makeAutoBattleActions','ActionAnimation','Scene_Battle_windowAreaHeight','moveBattlerDistance','TextColor','NameFontSize','applyAngleChange','_enemyWindow','isTpbMainPhase','SEugE','PyDxT','JSON','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','ResetOffset','BattleManager_endAction','ShowAddedBuff','performActionStart','PerformAction','save','POST-','tMBMD','updateCallMenu','_attackAnimationId','isClicked','isHiddenSkill','WaitForProjectile','pause','SwitchMissEvade','rZNVe','isForOpponentBattleCore','drawSingleSkillCost','onAngleEnd','getTraitSetKeys','NameLegacy','clearOnceParallelInterpreters','dead\x20enemies','drawText','DisplayAction','Scene_Battle_startPartyCommandSelection','ReflectAnimation','executeDamage','BattlebackScale','drawItemStatus','extendTroopMembers','DamageType%1','ceil','isAlive','isUndecided','getCommonEventIdWithName','dQtNX','Window_BattleLog_popBaseLine','_commandNameWindow','ActSeq_Angle_WaitForAngle','revertTpbCachedActor','GxblB','ActSeq_Target_NextTarget','loadBitmap','spriteId','value','commandAutoBattle','SsAOO','Scene_Battle_updateStatusWindowPosition','Game_Battler_forceAction','getDualWieldTimes','applyFreezeMotionFrames','LqnBC','shouldHideBattleEndPopups','_borderPortraitTargetX','ggxfi','isEffecting','Mechanics','CreateActionSequenceTargets','khaDR','drawItemImagePortraitStyle','DamageStyles','DJTIf','evaded','COVNs','createActors','message2','setHorrorEffectSettings','height','NameOffsetY','HyTUR','toUpperCase','Game_Actor_setup','FbFID','NReBi','updateGrow','uwDZc','FullActions','makeBattleCommand','setBattlerMotionTrailData','removeAnimationFromContainer','iutya','iKuUO','createPartyCommandWindowBattleCore','XfTcN','VariableID','startVisualCutin','updatePositionBattleCore','onActorCancel','FrontViewSelect','battleCommands','ActSeq_Cutin_EndVisualCutinEffectAll','initBattlePortrait','_battleField','_actionBattlers','_mainSprite','-%1','TqMQh','ShakeFlinchDuration','_angleWholeDuration','VisuMZ_1_SkillsStatesCore','indexOf','PreDamage%1JS','hidden','popupDamage','Game_Actor_equips','_targetHomeY','calcWindowHeight','processEscape','repeats','setFullActionsPTB','vYDpd','_updateFilterArea','createEffectActionSet','ARRAYNUM','oYMpH','Game_Interpreter_terminate','CmdTextAlign','changeCtbCastTime','call','VcBNS','_opacityWholeDuration','_back1Sprite','surprise','iconWidth','guard','expTotal','Game_Action_applyGlobal','PostApplyAsTargetJS','Window_BattleLog_displayCurrentState','FaceDirection','gzGva','isChanting','updateBattlerContainer','BattleCore','pointY','hide','Game_Action_clear','_immortal','updateHelp','ActionEffect','ActSeq_Mechanics_CtbSpeed','alive\x20friends\x20not\x20user','CTB','itemHeight','Spriteset_Battle_updateActors','SwUJI','ActSeq_Mechanics_Immortal','adjustPosition_ScaleUp','Game_Map_battleback2Name','%1StartBattleJS','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','ESCAPE','_list','setMoveEasingType','StatusWindowAttachmentBackOffsetY','sYFOx','gAiOU','LZvLT','iPdmg','canUse','_shakeFlinchDuration','gLsoR','slices','ArRedFlat','actorCommandEscape','ActSeq_Mechanics_BreakShieldChange','AYQFT','battlelog','rlRPc','cToNf','Slot','Window_BattleLog_performReflection','_tempBattler','members','HpGaugeOffsetY','centerFrontViewSprite','WtJTY','mlEDl','RiAQI','hasSvBattler','ioFwP','sort','Direction','zarlo','getNextSubject','qTCBp','isInputting','process_VisuMZ_BattleCore_CommonEventKeys','deathStateId','needsSelection','setupTextPopup','processBorderActor','refreshBattlerMotions','commandRemember','setValue','Scene_Battle_skillWindowRect','StyleON','ElementStatusCore','ParseArmorNotetags','DzwtJ','setBattleSkew','createDamageSprite','Sprite_Battler_updatePosition','addChildToUiContainer','isAffectedByBreakShield','animationShouldMirror','opponentsUnit','GroupDigits','ArpbQ','clearHorrorEffects','partyCommandWindowRectBorderStyle','cJbiA','boxHeight','_growX','startGrow','%1RegenerateJS','process_VisuMZ_BattleCore_PreBattleCommonEvent','damageOffsetY','_uiContainer','startTurn','isTurnBased','isBypassDamageCap','damage','MIN_SAFE_INTEGER','_damagePopupArray','loop','portraitFlipHorz','HalfActions','isVisualHpGaugeDisplayed','SideviewSelect','Sprite_Battler_setBattler','ActSeq_Animation_CastAnimation','svBattlerAnchorX','addCommand','getAttackWeaponAnimationId','textColor','contentsOpacity','_isBattlerFlipped','attachSpritesToDistortionSprite','startActorCommandSelection','Rifsv','ActSeq_Camera_Reset','setBattleAngle','startDamagePopup','isSelected','Skills','setupDesaturateImpactFilter','dDdTm','displayBattleCoreTransitionErrorMsg','ConvertActionSequenceTarget','jmFrS','Game_Battler_performDamage','battleSkew','Game_Battler_onTurnEnd','Game_Enemy_setup','skillItemWindowRectBorderStyle','Eyexr','weatherPower','_damageContainer','isRightInputMode','isAtbChargingState','updateShadowScale','cDsay','equipSlots','_methods','ConfigManager_makeData','_borderPortraitDuration','setupMotion','StyleOFF','STYPES','CsfWn','sideview_ui','itemWindowRect','removeActor','refreshDimmerBitmap','timeScale','RlOUW','_eventId','XEEGk','SPpHz','skillWindowRect','HIoYW','isSkillItemWindowsMiddle','friendsUnit','getBattlePortrait','ACYMF','setHalfActionsPTB','isIncludedInEnemyWindow','_forceAction','WeaponTypeID','setSkill','TrOIN','rqRZP','BattleManager_processAbort','fvVga','aUJYh','vraOy','changeTurnOrderByCTB','updateShadowPosition','baPZP','Scene_Battle_partyCommandWindowRect','wkWJA','battleCoreTpbMainPhase','addBattleCoreAutoBattleStartupCommand','playEnemyDamage','mrhjV','prepareBorderActor','arPenFlat','animationWait','YSaSh','PostDamageJS','_logWindow','miKvb','VblhH','gNqHu','UmMsy','Sprite_Enemy_updateStateSprite','portraitFilename','qeZpS','finishActorInput','PreStartTurnJS','Game_Action_isForFriend','code','ultpK','_interpreter','VisuMZ_3_ActSeqProjectiles','_weaponImageId','XEtaq','579201yArggj','isFastForward','globalAlpha','createBattleFieldBattleCore','zqsaj','SKILLS','ActionEndUpdate','length','isAnyoneMoving','CriticalDmgRate','PreEndTurnJS','weaponImageId','VtzRK','PGVdy','removedBuffs','initialize','setText','gradientFillRect','loadSvEnemy','actorCommandCancelTPB','GgMoQ','updateBattlebackBitmap1','bitmapWidth','makeTargetSprites','AutoMeleeSolo','PostEndTurnJS','BuKdy','setActionState','cOteT','setBattlerFlip','ShowCounter','ActSeq_Movement_MoveBy','some','VisuMZ_2_BattleSystemCTB','placeTimeGauge','Rate','Game_Action_itemEffectAddNormalState','eegQd','FzZOw','OqgIl','StatusWindowAttachmentFront','isAttack','makeDamageValue','XMUUY','aMRIT','isBattleFlipped','dAYWA','BattleCmdList','_tpbState','AnimationID','LPYah','ActSeq_Mechanics_SwapWeapon','ActSeq_Motion_PerformAction','itemCri','log','note','actor','getWtypeIdWithName','pVuLq','checkShowHideBattleNotetags','updateVisibility','jPpgN','dying','FVeBP','reserveCommonEvent','CTwaE','actorCommandWindowRect','isDeathStateAffected','_battleCoreAddedElements','%1EndTurnJS','NPgbV','canAlterActionCostPTB','process_VisuMZ_BattleCore_Action_Notetags','BattleManager_checkBattleEnd','_stypeIDs','Debuffs','isOptionsCommandAdded','isBuffAffected','iKSNl','aOMNj','fNzwQ','QnQic','updateShakeFlinch','enemyNames','transform','remove','ZGZRg','filters','isPartyCommandWindowDisabled','cancelButtonText','createStateIconSprite','AutoBattleMsg','_lastEnemy','changeBattlerOpacity','onSelectAction','visibilityState','_floatWholeDuration','updateStateSpriteBattleCore','isBusy','isForOpponent','ddSBj','startFloat','_angleDuration','NjvwI','Sprite_Battler_setHome','startSkew','fqVIu','9370uaOkDz','isAnyProjectilePresent','CgmUI','isOptionsCommandEnabled','Sprite_Battler_damageOffsetX','makeUniqueNames','Angle','JS\x20BATTLE\x20DEFEAT','60HHrhxg','AGI','makeActions','callOptions','hitFlat','frynA','_enemyID','StartTurnMsg','numTargets','initElementStatusCore','frontviewSpriteY','_cacheTextWidth','lsOXX','addTextToCombatLog','DiqrL','custom','Mirror','left','battleFloat','TpbGaugeOffsetX','string','checkSceneBattleTransitionable','ActSeq_ChangeAngle','format','displayEvasion','setTroopPage','targetDistortionSpritePosition','startActorSelection','ActSeq_Movement_MoveToPoint','ActSeq_Mechanics_CtbOrder','fontSize','waitForAnimation','Window_BattleLog_performActionStart','flipVisualCutinHorz','uXHjg','NiwZF','performJump','canAddSkillCommand','HitFlat','_pattern','getNextDamagePopup','arRedFlat','xjWqj','mmp','updateStatusWindowPosition','startMove','TQDDF','AffaT','IZkkC','drawActorFace','MReHn','5553SJfarv','compareEnemySprite','right','Wave','sgyGk','smooth','unchanged','isItem','afUjv','onRegeneratePlayStateAnimation','_skewWholeDuration','drawItemImageListStyle','updateUiContainerPosition','TpGaugeOffsetX','_homeDuration','CurrentTurn','allowCollapse','PreApplyAsTargetJS','Duration','Skill-%1-%2','CheckMapBattleEventValid','command3011','user','processBattleCoreJS','clearAllVisualCutins','cancelActorInput','requestFauxAnimation','command301_PreBattleEvent','HitRate','Sprite_Actor_setActorHome','addLoadListener','ofWIu','ssEDl','clearActiveWeaponSlot','blt','FocusX','alterType','Scene_Map_updateCallMenu','_enemyIDs','<CUSTOM\x20ACTION\x20SEQUENCE>','ParseSkillNotetags','addOnceParallelInterpreter','partyCommandWindowRectDefaultStyle','mainSpriteHeight','criticalDmgFlat','evade','createHpGaugeSprite','CriticalDuration','_colorType','createEnemyNames','constructor','TpGaugeOffsetY','KQezp','nBGBq','zEssV','createActorCommandWindowBattleCore','Game_Troop_expTotal','alterPriority','autoBattle','BattleManager_selectNextCommand','turnOrderChangeOTB','Window_BattleLog_performEvasion','_battlerName','Window_BattleLog_displayTpDamage','rTnWO','command339','Game_Action_isForRandom','_frontAttachmentSprite','setHue','removeBuff','_baseX','yzGtv','AutoBattleRect','wrmtS','gainMp','YtIhw','AlRXX','setLastBattleSkill','_targetAngle','stepFlinch','updateMain','drawTextEx','DJhIz','VisuMZ_2_WeaponSwapSystem','_createDamageContainer','Height','collapse','CommandAddOptions','placeActorName','JS\x20%1START\x20ACTION','getBattlePortraitFilename','ActSeq_Impact_MotionBlurTarget','_commonEventKey','isDying','addCustomCommands','Scene_Battle_itemWindowRect','CbEre','windowAreaHeight','VariableDmg','displayFailure','SvMotionIdleMass-%1-%2','forceEscapeSprite','MotionType','removeState','front\x20center','Actions','RkLak','_createCursorSprite','VLxDp','gdHgm','getSkillIdWithName','criticalDmgRate','fyhlp','_waitCount','missile','%1EndActionJS','startMotion','RcXZG','Elements','displayType','hNlMM','STB','DamageDisplay','isMeleeMultiTargetAction','_enemySprites','isAnimationShownOnBattlePortrait','coreEngineRepositionEnemies','cwGIk','isAtbCastingState','onJumpEnd','updateAction','ryKtk','createAttachedSprites','setSTBExploited','rTUeM','makeSpeed','MpGaugeOffsetX','_regionBattleback2','stop','Armor-%1-%2','JFVvq','ActSeq_Mechanics_StbExtraAction','backColor','vIZkC','vdQUg','YzLbq','ActSeq_Movement_WaitForFloat','getChildIndex','gAmTC','IconSet','frontview_ui','TMEAH','EscapeFail','Sprite_Actor_setBattler','getColor','_endBattle','glitch','Scene_Battle_onEnemyCancel','type','jsScaleUp','ActSeq_Movement_HomeMoveToPoint','grbhB','isNonSubmenuCancel','message1','HelpFight','process_VisuMZ_BattleCore_DamageStyles','waitForEffect','wxmsA','hIRGy','isEscapeCommandEnabled','mjIkK','ActSeq_Movement_WaitForSpin','CRDGq','_fauxAnimationSprites','hasBeenDefeatedBefore','ZpGHe','isAnyoneInjectAnimating','isAnyoneGrowing','BTB','ParseWeaponNotetags','Game_Action_setGuard','ExGcN','fEfzH','EMCik','_callSceneOptions','_subject','battleAnimation','updateCustomActionSequence','battleCoreResumeLaunchBattle','adjustFlippedBattlefield','performSubstitute','battleUIOffsetY','LUK','addItemCommand','isAlwaysHidden','setupOversaturateImpactFilter','createAnimationContainer','addText','_jumpDuration','isForFriendBattleCore','drawItemImageXPStyle','_visualHpGauge_JustDied','PreDamageAsTargetJS','Exploiter','ARRAYFUNC','ShowCosts','createEnemyNameContainer','needsActorInputCancel','performShakeFlinch','SkewX','isAnimationPlaying','updateCancel','goBeD','battleUIOffsetX','_enemy','lineHeight','Irkxj','StepDistanceY','MNSzQ','Game_Battler_onBattleStart','playReflection','FmYUv','setBattler','DjWPW','ActSeq_Animation_AttackAnimation2','CVQzs','noSimilarSTypes','list','fZZdk','processRefresh','uGhbK','ActSeq_Animation_AttackAnimation','RequiresDefeat','_floatEasing','GAHER','processForcedAction','makeData','Game_System_initialize','1:1','battleStatusSprite','setActorHome','JpsMY','JZLvn','PostApply%1JS','Damage','jsScaleDown','randomInt','battleCorePreBattleCommonEvent','ActSeq_Mechanics_RemoveState','JS\x20ESCAPE\x20SUCCESS','processActorCommandCancelTPB','isFriendly','lIulj','nguTV','aNhRw','createKeyJS','SJjFZ','setLastPluginCommandInterpreter','TpbActiveChangeEnabled','ScaleUp','checkShowHideSwitchNotetags','DefaultStyle','Game_BattlerBase_eraseState','Window_Options_statusText','setCustomDamageFormula','VewAt','resizeWindowXPStyle','message4','isStatusAffected','Game_Battler_startTpbTurn','VisuMZ_3_SideviewBattleUI','JS\x20%1END\x20ACTION','icon','VisuMZ_3_VisualCutinEffect','Game_Action_executeDamage','_skewDuration','flashDuration','itemLineRect','SwitchCritical','Game_Battler_regenerateAll','damageFlat','ewbyK','EnableDamageCap','HMygj','ActSeq_Mechanics_VariablePopup','Amp','Mute','ActionSequence','tflbr','VGSMl','hUMKy','ScaleDown','battleEffect','isBreakStunned','getFullActionsPTB','Game_Battler_makeSpeed','DistanceX','CmdIconAutoBattle','displayChangedBuffs','_opacityDuration','Item-%1-%2','ActSeq_Mechanics_PtbConvert','ShowPortraits','VMGYN','Sprite_Enemy_createStateIconSprite','ryvYI','addCombatLogCommand','eeHEh','alive\x20battlers\x20not\x20target','actor%1-portrait','Scene_Battle_createAllWindows','pVXIp','iSCAf','2414883uPZDrf','EscapeSuccessJS','loadBattleback1','alignBattleCoreDamageSprite','_actorWindow','CwpkM','xxtEK','Scene_Battle_startActorCommandSelection','DefaultHardCap','Setting','PostDamage%1JS','ShowMpDmg','battlerSmoothImage','ShowReflect','extraPositionScaledY','bBdnN','ShakeFlinchPower','WaitCount2','PartyCmd','smoothness','startAttackWeaponAnimation','THYik','WaitForEntrance','iyBNf','isAutoBattleCommandEnabled','mpHealingFmt','battlerShadowScaleX','alive\x20actors\x20not\x20target','alive\x20battlers\x20not\x20user','frameDelay','DFUTl','ActSeq_Horror_TVRemove','angleDuration','updateWaitMode','FQonI','addDebuff','BattleManager_updatePhase','_executedValue','applyTargetFilters','_displayBattleCoreTransitionErrorMsg','Sprite_StateIcon_updateFrame','showPortraits','DamageFlat','MxSbq','regenerateAll','isAlwaysVisible','_duration','ActSeq_Mechanics_EnemyEscape','_freezeMotionData','addNewState','Sprite_Damage_createChildSprite','AutoBattle','VisuMZ_3_BoostAction','customDamageFormula','Sprite_SvEnemy','_onceParallelInterpreters','MotionFrameWait','damageOffsetX','isTriggered','_enemies','auto','acLhf','noise','CBAzz','MubYb','ejRhr','Kuxhy','XIqWy','joldY','waitForMovement','isSideView','Game_Map_setupBattleback','uhttp','scRtW','updateStaticSvBattlerFrames','addChild','LkvLR','displayCurrentState','BattleEndEvent','HhutL','_forcedBattleLayout','setupActionSet','displayAction','innerWidth','FRBNe','SkillItemMiddleLayout','ActSeq_Mechanics_PtbFullHalfAction','BreakShields','_motionSpeed','vewIX','endAnimation','showAnimation','ActSeq_Movement_WaitForOpacity','ActSeq_Horror_NoiseRemove','lastFilename','bind','CommandAddAutoBattle','position','maxCols','dead\x20friends','hpDamage','VarianceFormulaJS','ZknpD','Point','isFightCommandEnabled','attackStates','pushBaseLine','GUKBw','cjddO','performMoveToPoint','_battleLayoutStyle','isBattleTest','Game_Action_numRepeats','addSingleSkillCommand','Index','35292wWhlfn','isDead','statusWindowRectXPStyle','BravePoints','FvvBO','setGuard','version','traitSet','mainFontSize','createTroopNote','_jumpMaxHeight','isDamagePopupRequested','cameraOffsetDuration','createBattleFieldContainer','ksPpK','vAOpQ','TKERh','tOovJ','forceMotion','WqrmP','AavCX','HelpSkillType','moveBattlerHomeDistance','CVJKZ','AntiTintUiElements','isFloating','setBattleZoom','Ppmki','isMagical','setBattlerFacePoint','isSpinning','GdPeV','BSYcc','makeTargetsBattleCore','iconText','NameOffsetX','EndBattlePopups','removeAnimation','mainSprite','iconIndex','getItemDamageAmountLabelOriginal','RwpHn','JXfPk','adjustPosition','extraPositionY','Sprite_AnimationMV_updatePosition','HelpItem','OTwXh','MAXMP','ActSeq_Impact_MotionTrailCreate','mAyof','changeCtbChargeTime','finalizeScale','selectNextCommandTpb','not\x20focus','mNhox','StatusWindowAttachmentBackOffsetX','_effectsContainer','chant','drawIcon','CriticalHitRate','ActSeq_BattleLog_WaitForNewLine','floor','EqqQE','isActor','_forcedBattlers','isSTB','Game_Action_makeTargets','mOIwR','Window_BattleLog_displayMiss','callNextMethod','origin','dimColor1','ShakeFlinch','huiqr','onEncounter','setBattlePortrait','FlxPU','battleEnd','alive\x20enemies','battleCommandName','ActSeq_Mechanics_OnceParallel','weapons','alterActionCostPTB','updateScale','createEnemies','tMfbD','selectPreviousCommand','cutinExit','updateOpacity','Enemy-%1-%2','isBattlerGrounded','rZVra','yZmSj','wapIz','_jumpWholeDuration','commandNameWindowCenter','updateShadowBattleCore','sccVX','updatePosition','fNJqR','HelpEscape','isForAll','sortDamageSprites','attackAnimationId1','HpGauge','_growDuration','DualWield','dtwkt','iconHeight','WaitForZoom','battlerName','WaitForOpacity','ParseEnemyNotetags','svBattlerName','DamageStyleList','switchToWeaponType','_spriteset','dftmk','_growY','die','applyForcedGameTroopSettingsBattleCore','guardSkillId','alterBreakShield','resetBreakShield','Game_Battler_performActionStart','JITdJ','CopyCombatLog','CoreEngine','SmoothImage','formula','WEAPON\x20SWAP','updateFloat','battlerShadowScaleY','_cursorSprite','Sprite_Enemy_update','jxGHc','_growEasing','applyEasing','startOpacity','tUdhl','ZpMYi','_autoBattle','MDF','ZKieI','blockWidth','JHnab','lastBattleSkill','ShowWeapon','setupFont','_shadowSprite','addBuff','statusWindowRect','commandStyle','parallaxHue','ShuffleArray','performAttackSlot','ActSeq_Impact_MotionTrailRemove','_animationContainer','ActSeq_Impact_ZoomBlurTargetCenter','ActSeqImpact','Targets','context','isAnyoneInjectAniPrepping','currentClass','vQGjn','trim','WaitForJump','FollowTurn','isTickBased','Scene_Battle_createHelpWindow','evalDamageFormulaBattleCore','FlashColor','mcreT','addedBuffs','alterCost','PopupOffsetY','uKDIH','freezeMotion','ShowAddedDebuff','ChantStyle','_battleCoreBattleStartEvent','QhucB','_customDamageFormula','waitForOpacity','wrTLZ','_frame','MAT','displaySubstitute','updateStyleOpacity','VisuMZ_2_BattleSystemETB','clearMotion','makeActionList','canAttack','clearFreezeMotionForWeapons','popBaseLine','statusText','nameY','Shadow','wtypeId','JNadd','displayStartMessages','displayAffectedStatus','cutinEnter','fnordAddedStates','isOkEnabled','llGjS','bgType','performActionEndMembers','vjDRx','isAnyoneFloating','efopH','emkKi','DefaultDamageStyle','BattleManager_startAction','_drawTextBody','performAttack','vecKz','ActSeq_ChangeSkew','apIrk','uiInputPosition','getItemDamageAmountLabelBattleCore','PopupOffsetX','isGuardWaiting','displayBuffs','ActSeq_Impact_TimeScale','isPartyTpbInputtable','zoomDuration','commandStyleCheck','ActSeq_Horror_TVCreate','WaitForNewLine','compatibilityVisible','KaSyD','VisuMZ_2_BattleSystemPTB','JXuUj','gFNWz','ActSeq_Movement_BattleStep','JRvHc','Douom','VariableHeal','rtxfx','_windowLayer','DXpUw','commandName','_homeEasing','Sprite_Battler_initMembers','equips','Scene_Battle_start','TUJpL','helpAreaHeight','yViGo','isSpriteVisible','mqJrW','isDTB','actorCommandAutoBattle','ceuSo','tXasu','playCancel','_svBattlerData','AnchorY','refreshRequest','ActSeq_Zoom_WaitForZoom','DEF','Game_BattlerBase_canAttack','isForRandomBattleCore','textBaseline','changeAtbChargeTime','Scene_Battle_selectPreviousCommand','emerge','actionSplicePoint','drain','makeSuccess','fqerM','ActSeq_Projectile_Animation','ScaleY','waitForJump','isBattlerFlipped','maxTp','speed','PreApply%1JS','ConvertParams','FlinchDistanceY','Window_BattleStatus_initialize','ActSeq_Set_SetupAction','enemyId','cancelTargetSelectionVisibility','isJumping','DigitGrouping','swing','endVisualCutin','kvueh','PreEndBattleJS','hRzMf','COMBATLOG','Scene_Battle_onActorCancel','ActSeq_Movement_Jump','ActSeq_Horror_NoiseCreate','ReflectPlayback','AutoBattleOK','round','match','invokeAction','ShowMissEvasion','actorId','resetResultSwitches','nXbIL','applyHardDamageCap','updateInterpreter','dead','isBattleMember','owwHI','requestMotion','_flashDuration','avXZh','setHome','iDlfn','visualCutinPortraitType','thrust','FXmgw','_multipliers','BattleManager_processVictory','HkFHj','isDebuffAffected','getBattlePortraitOffsetY','clearFreezeMotion','Game_BattlerBase_canGuard','Filename','_lines','tFHrv','pGORW','updateFrame','battleOpacity','OLHPT','JjxWW','shouldPopupDamage','Game_Enemy_battlerName','currentValue','createAllWindows','_commonEventQueue','ActSeq_Horror_Clear','ActionCenteredName','_item','softDamageCapRate','restore','_appeared','setupIconTextPopup','itemRect','updateLink','performMoveToTargets','ActSeq_Mechanics_DamagePopup','Scene_Battle_selectNextCommand','RyDMR','createDistortionSprite','performFlinch','_targetFloatHeight','isEnemy','show','isStateResist'];_0x19d1=function(){return _0x277502;};return _0x19d1();}Sprite_HpGauge['prototype']=Object['create'](Sprite_Gauge[_0x5d4113(0x44d)]),Sprite_HpGauge[_0x5d4113(0x44d)][_0x5d4113(0x8ab)]=Sprite_HpGauge,Sprite_HpGauge[_0x5d4113(0x44d)]['initialize']=function(){const _0x3a67ec=_0x5d4113;Sprite_Gauge[_0x3a67ec(0x44d)]['initialize'][_0x3a67ec(0x701)](this);},Sprite_HpGauge['prototype']['gaugeX']=function(){return 0x0;},Sprite_HpGauge[_0x5d4113(0x44d)][_0x5d4113(0x391)]=function(){const _0x2c5bf6=_0x5d4113;this[_0x2c5bf6(0x432)][_0x2c5bf6(0x192)]();const _0x33f294=this[_0x2c5bf6(0xb75)]();if(!isNaN(_0x33f294)){if(_0x2c5bf6(0x5c6)!==_0x2c5bf6(0xa0b))this['drawGauge']();else{_0x446524=_0x3275f1[_0x2c5bf6(0x710)]['Game_Action_makeTargets'][_0x2c5bf6(0x701)](this);const _0x185ab4=_0x23d275[_0x2c5bf6(0x710)][_0x2c5bf6(0x978)](this[_0x2c5bf6(0x441)](),_0x2c5bf6(0xac6));return _0x3e6171=_0x282dc1['BattleCore']['JS'][_0x185ab4][_0x2c5bf6(0x701)](this,this[_0x2c5bf6(0x652)](),_0x137275),this[_0x2c5bf6(0x1f0)](_0x5237d1);}}};function Sprite_EnemyName(){const _0x30d01b=_0x5d4113;this[_0x30d01b(0x7e2)](...arguments);}Sprite_EnemyName[_0x5d4113(0x44d)]=Object[_0x5d4113(0x5ac)](Sprite_Name[_0x5d4113(0x44d)]),Sprite_EnemyName[_0x5d4113(0x44d)][_0x5d4113(0x8ab)]=Sprite_EnemyName,Sprite_EnemyName['prototype'][_0x5d4113(0x7e2)]=function(){const _0x7467bd=_0x5d4113;Sprite_Name['prototype'][_0x7467bd(0x7e2)]['call'](this),this[_0x7467bd(0x8fd)]();},Sprite_EnemyName[_0x5d4113(0x44d)][_0x5d4113(0x22f)]=function(){const _0x39b782=_0x5d4113;Sprite_Name[_0x39b782(0x44d)][_0x39b782(0x22f)]['call'](this),this['opacity']=0x0,this[_0x39b782(0x1b8)]=null,this[_0x39b782(0x636)]['x']=0.5,this[_0x39b782(0x636)]['y']=0x0;},Sprite_EnemyName[_0x5d4113(0x44d)][_0x5d4113(0x8fd)]=function(){const _0x23b3ea=_0x5d4113;VisuMZ[_0x23b3ea(0x710)]['Settings'][_0x23b3ea(0x194)][_0x23b3ea(0x1cc)]&&(this[_0x23b3ea(0x342)]=new Sprite_StateIcon(),this[_0x23b3ea(0x9fd)](this[_0x23b3ea(0x342)]));},Sprite_EnemyName[_0x5d4113(0x44d)][_0x5d4113(0x7e9)]=function(){const _0x1434a5=_0x5d4113;return Graphics[_0x1434a5(0xbb8)];},Sprite_EnemyName['prototype'][_0x5d4113(0xc9a)]=function(){const _0x39f5d5=_0x5d4113;return this[_0x39f5d5(0x42a)]=this['_lineHeight']||Window_Base[_0x39f5d5(0x44d)][_0x39f5d5(0x950)]()||0x24,this[_0x39f5d5(0x42a)]*0x4;},Sprite_EnemyName[_0x5d4113(0x44d)][_0x5d4113(0x864)]=function(){const _0x4606cc=_0x5d4113;return VisuMZ[_0x4606cc(0x710)]['Settings'][_0x4606cc(0x194)]['NameFontSize']||$gameSystem[_0x4606cc(0xa2d)]();},Sprite_EnemyName['prototype'][_0x5d4113(0x149)]=function(_0x86bf47){const _0x2d0efa=_0x5d4113;this[_0x2d0efa(0x1b8)]=_0x86bf47;},Sprite_EnemyName['prototype'][_0x5d4113(0x5fb)]=function(){const _0x49c10f=_0x5d4113;Sprite_Name[_0x49c10f(0x44d)][_0x49c10f(0x5fb)]['call'](this),this[_0x49c10f(0xb80)](),this['updatePosition'](),this[_0x49c10f(0x440)](),this[_0x49c10f(0xa7e)]();},Sprite_EnemyName['prototype'][_0x5d4113(0x391)]=function(){const _0x21e720=_0x5d4113;this[_0x21e720(0x851)]=undefined;const _0x248f33=this[_0x21e720(0x2c0)](),_0x500c35=this[_0x21e720(0x7e9)](),_0x417f27=Window_Base[_0x21e720(0x44d)][_0x21e720(0x950)]();this[_0x21e720(0xaba)](),this['bitmap'][_0x21e720(0x192)](),this[_0x21e720(0x432)][_0x21e720(0x6a1)](_0x248f33,0x0,0x0,_0x500c35,_0x417f27,_0x21e720(0x4d5));},Sprite_EnemyName['prototype'][_0x5d4113(0xb80)]=function(){const _0x2902f8=_0x5d4113;if(!this['_linkedSprite'])return;this['_battler']!==this[_0x2902f8(0x1b8)][_0x2902f8(0x484)]&&this[_0x2902f8(0xbd4)](this[_0x2902f8(0x1b8)][_0x2902f8(0x484)]);},Sprite_EnemyName[_0x5d4113(0x44d)][_0x5d4113(0xa88)]=function(){const _0x32c3fd=_0x5d4113;if(!this[_0x32c3fd(0x1b8)])return;this[_0x32c3fd(0x42a)]=this[_0x32c3fd(0x42a)]||Window_Base[_0x32c3fd(0x44d)][_0x32c3fd(0x950)](),this['x']=Math[_0x32c3fd(0xb50)](this[_0x32c3fd(0x1b8)][_0x32c3fd(0x8bf)]),this['y']=Math[_0x32c3fd(0xb50)](this[_0x32c3fd(0x1b8)][_0x32c3fd(0x559)]-this[_0x32c3fd(0x42a)]*0.5);const _0x937285=VisuMZ[_0x32c3fd(0x710)][_0x32c3fd(0x326)]['Enemy'];this['x']+=Math[_0x32c3fd(0xb50)](_0x937285[_0x32c3fd(0xa48)]||0x0),this['y']+=Math['round'](_0x937285[_0x32c3fd(0x6cf)]||0x0);},Sprite_EnemyName[_0x5d4113(0x44d)][_0x5d4113(0x440)]=function(){const _0x1cfdeb=_0x5d4113;this[_0x1cfdeb(0xca4)]();},Sprite_EnemyName[_0x5d4113(0x44d)][_0x5d4113(0xca4)]=function(){const _0x3daa0a=_0x5d4113;if(!this['_stateIconSprite'])return;this[_0x3daa0a(0x484)]!==this[_0x3daa0a(0x342)]['_battler']&&this[_0x3daa0a(0x342)][_0x3daa0a(0xbd4)](this[_0x3daa0a(0x484)]);const _0x298c26=this[_0x3daa0a(0x3c4)]();this['_lineHeight']=this[_0x3daa0a(0x42a)]||Window_Base[_0x3daa0a(0x44d)]['lineHeight'](),this[_0x3daa0a(0x342)]['x']=Math[_0x3daa0a(0xb50)]((_0x298c26+ImageManager[_0x3daa0a(0x706)])/0x2)+0x8,this[_0x3daa0a(0x342)]['y']=this[_0x3daa0a(0x42a)]/0x2;const _0x47d58b=VisuMZ[_0x3daa0a(0x710)][_0x3daa0a(0x326)][_0x3daa0a(0x194)];this[_0x3daa0a(0x342)]['x']+=_0x47d58b['AttachStateOffsetX']||0x0,this['_stateIconSprite']['y']+=_0x47d58b['AttachStateOffsetY']||0x0;},Sprite_EnemyName[_0x5d4113(0x44d)][_0x5d4113(0xa7e)]=function(){const _0x5996a1=_0x5d4113,_0x14a578=this[_0x5996a1(0x832)]();if(_0x14a578&&this[_0x5996a1(0x380)]<0xff)this[_0x5996a1(0x380)]+=0x10;else!_0x14a578&&this[_0x5996a1(0x380)]>0x0&&(this[_0x5996a1(0x380)]-=0x10);},Sprite_EnemyName['prototype'][_0x5d4113(0x832)]=function(){const _0x1c7215=_0x5d4113;if(this[_0x1c7215(0x93b)]())return![];else{if(!this[_0x1c7215(0x484)])return![];else{if(this[_0x1c7215(0x484)]['isDead']()){if(_0x1c7215(0x9d0)===_0x1c7215(0x7c0))this[_0x1c7215(0xac3)]=new _0x338a79(),_0xb5a9e4[_0x1c7215(0x4d6)]?this[_0x1c7215(0x9fd)](this[_0x1c7215(0xac3)]):this[_0x1c7215(0x6e7)][_0x1c7215(0x9fd)](this['_animationContainer']);else return![];}else{if(!this[_0x1c7215(0x484)]['isAppeared']())return![];else{if(this[_0x1c7215(0xb0c)]())return!![];else{if(this[_0x1c7215(0x9df)]())return!![];else{if(this[_0x1c7215(0x7aa)]()){if(_0x1c7215(0x782)!==_0x1c7215(0x782))_0x256f72[_0x1c7215(0x710)][_0x1c7215(0x560)][_0x1c7215(0x701)](this),this['initMembersBattleCore']();else return!![];}else{if(this[_0x1c7215(0x380)]>0x0)return![];}}}}}}}},Sprite_EnemyName[_0x5d4113(0x44d)][_0x5d4113(0x93b)]=function(){const _0x3d92b0=_0x5d4113;return VisuMZ['BattleCore'][_0x3d92b0(0x326)]['Enemy'][_0x3d92b0(0xbf8)];},Sprite_EnemyName[_0x5d4113(0x44d)][_0x5d4113(0xb0c)]=function(){return![];},Sprite_EnemyName[_0x5d4113(0x44d)][_0x5d4113(0x9df)]=function(){const _0x437f4e=_0x5d4113;return VisuMZ[_0x437f4e(0x710)]['Settings'][_0x437f4e(0x194)][_0x437f4e(0x1ff)];},Sprite_EnemyName[_0x5d4113(0x44d)]['isIncludedInEnemyWindow']=function(){const _0x41688a=_0x5d4113;return VisuMZ[_0x41688a(0x710)][_0x41688a(0x326)][_0x41688a(0x194)][_0x41688a(0x2c4)]?this['_battler'][_0x41688a(0x77f)]():SceneManager[_0x41688a(0x5a4)][_0x41688a(0x684)]&&SceneManager['_scene'][_0x41688a(0x684)][_0x41688a(0x61d)]&&SceneManager[_0x41688a(0x5a4)][_0x41688a(0x684)]['_enemies'][_0x41688a(0x4b0)](this[_0x41688a(0x484)]);},Sprite_EnemyName['prototype'][_0x5d4113(0x3c4)]=function(){const _0x8612ee=_0x5d4113;if(!this['_battler'])return 0x0;if(this[_0x8612ee(0x851)])return this['_cacheTextWidth'];const _0x5c970d=this[_0x8612ee(0x2c0)]();return this[_0x8612ee(0xaba)](),this[_0x8612ee(0x851)]=this[_0x8612ee(0x432)][_0x8612ee(0x4d8)](_0x5c970d)||0x1,this[_0x8612ee(0x851)];},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x606)]=Sprite_Battleback['prototype'][_0x5d4113(0xa50)],Sprite_Battleback[_0x5d4113(0x44d)][_0x5d4113(0xa50)]=function(){const _0x3e650e=_0x5d4113,_0x2ba6cd=VisuMZ['BattleCore'][_0x3e650e(0x326)][_0x3e650e(0x6a6)];if(!_0x2ba6cd)return VisuMZ[_0x3e650e(0x710)][_0x3e650e(0x606)]['call'](this);const _0x3cf261=String(_0x2ba6cd[_0x3e650e(0x97e)])||'MZ';switch(_0x3cf261){case'MZ':VisuMZ[_0x3e650e(0x710)][_0x3e650e(0x606)][_0x3e650e(0x701)](this);break;case _0x3e650e(0x967):this[_0x3e650e(0x670)]();break;case _0x3e650e(0xc85):this['adjustPosition_ScaleToFit']();break;case _0x3e650e(0x99c):this['adjustPosition_ScaleDown']();break;case _0x3e650e(0x97c):this['adjustPosition_ScaleUp']();break;}},Sprite_Battleback[_0x5d4113(0x44d)][_0x5d4113(0x670)]=function(){const _0x15ce5d=_0x5d4113,_0x3774ef=VisuMZ[_0x15ce5d(0x710)]['Settings'][_0x15ce5d(0x6a6)];if(_0x3774ef&&_0x3774ef[_0x15ce5d(0x20f)])return _0x3774ef[_0x15ce5d(0x20f)][_0x15ce5d(0x701)](this);this[_0x15ce5d(0x61e)]=Graphics[_0x15ce5d(0x61e)],this['height']=Graphics[_0x15ce5d(0x6ce)];const _0x5bd325=0x1;this[_0x15ce5d(0x596)]['x']=_0x5bd325,this[_0x15ce5d(0x596)]['y']=_0x5bd325,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x5d4113(0x44d)]['adjustPosition_ScaleToFit']=function(){const _0x4a5e9d=_0x5d4113,_0x417106=VisuMZ[_0x4a5e9d(0x710)][_0x4a5e9d(0x326)][_0x4a5e9d(0x6a6)];if(_0x417106&&_0x417106[_0x4a5e9d(0x604)])return _0x417106[_0x4a5e9d(0x604)][_0x4a5e9d(0x701)](this);this[_0x4a5e9d(0x61e)]=Graphics['width'],this[_0x4a5e9d(0x6ce)]=Graphics[_0x4a5e9d(0x6ce)];const _0x8d0506=this[_0x4a5e9d(0x61e)]/this[_0x4a5e9d(0x432)][_0x4a5e9d(0x61e)],_0x5a6c3d=this[_0x4a5e9d(0x6ce)]/this[_0x4a5e9d(0x432)]['height'],_0x595cd3=Math[_0x4a5e9d(0xbcc)](_0x8d0506,_0x5a6c3d);this['scale']['x']=_0x595cd3,this['scale']['y']=_0x595cd3,this['x']=(Graphics[_0x4a5e9d(0x61e)]-this[_0x4a5e9d(0x61e)])/0x2,this['y']=Graphics['height']-this['height'];},Sprite_Battleback[_0x5d4113(0x44d)][_0x5d4113(0xbc5)]=function(){const _0xc5361a=_0x5d4113,_0x5907c4=VisuMZ[_0xc5361a(0x710)]['Settings'][_0xc5361a(0x6a6)];if(_0x5907c4&&_0x5907c4[_0xc5361a(0x96e)])return _0x5907c4['jsScaleDown'][_0xc5361a(0x701)](this);this[_0xc5361a(0x61e)]=Graphics[_0xc5361a(0x61e)],this[_0xc5361a(0x6ce)]=Graphics['height'];const _0x2d57e1=Math['min'](0x1,this[_0xc5361a(0x61e)]/this['bitmap'][_0xc5361a(0x61e)]),_0x3ce270=Math[_0xc5361a(0x15d)](0x1,this[_0xc5361a(0x6ce)]/this[_0xc5361a(0x432)][_0xc5361a(0x6ce)]),_0x1eeb52=Math[_0xc5361a(0xbcc)](_0x2d57e1,_0x3ce270);this[_0xc5361a(0x596)]['x']=_0x1eeb52,this[_0xc5361a(0x596)]['y']=_0x1eeb52,this['x']=(Graphics[_0xc5361a(0x61e)]-this[_0xc5361a(0x61e)])/0x2,this['y']=Graphics['height']-this[_0xc5361a(0x6ce)];},Sprite_Battleback[_0x5d4113(0x44d)][_0x5d4113(0x71e)]=function(){const _0x1b956d=_0x5d4113,_0x477952=VisuMZ[_0x1b956d(0x710)][_0x1b956d(0x326)]['BattlebackScale'];if(_0x477952&&_0x477952[_0x1b956d(0x918)])return _0x477952[_0x1b956d(0x918)][_0x1b956d(0x701)](this);this[_0x1b956d(0x61e)]=Graphics[_0x1b956d(0x61e)],this[_0x1b956d(0x6ce)]=Graphics[_0x1b956d(0x6ce)];const _0x3a2239=Math[_0x1b956d(0xbcc)](0x1,this[_0x1b956d(0x61e)]/this[_0x1b956d(0x432)][_0x1b956d(0x61e)]),_0x102d49=Math[_0x1b956d(0xbcc)](0x1,this['height']/this['bitmap'][_0x1b956d(0x6ce)]),_0x11ad30=Math['max'](_0x3a2239,_0x102d49);this['scale']['x']=_0x11ad30,this[_0x1b956d(0x596)]['y']=_0x11ad30,this['x']=(Graphics[_0x1b956d(0x61e)]-this['width'])/0x2,this['y']=Graphics['height']-this[_0x1b956d(0x6ce)];},Spriteset_Battle[_0x5d4113(0x4d6)]=VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x326)]['BattleLayout'][_0x5d4113(0xa3d)]??!![],Spriteset_Battle[_0x5d4113(0x44d)]['isFlipped']=function(){if(!$gameSystem['isSideView']())return![];return![];},Spriteset_Battle[_0x5d4113(0x44d)][_0x5d4113(0xc65)]=function(){return 0x0;},Spriteset_Battle['prototype'][_0x5d4113(0x4f8)]=function(){return 0x0;},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x3f1)]=Spriteset_Battle[_0x5d4113(0x44d)][_0x5d4113(0x35b)],Spriteset_Battle['prototype'][_0x5d4113(0x35b)]=function(){const _0x1777a3=_0x5d4113;VisuMZ['BattleCore'][_0x1777a3(0x3f1)]['call'](this),this[_0x1777a3(0x486)](),this[_0x1777a3(0x8aa)]();},VisuMZ[_0x5d4113(0x710)]['Spriteset_Battle_update']=Spriteset_Battle['prototype'][_0x5d4113(0x5fb)],Spriteset_Battle['prototype'][_0x5d4113(0x5fb)]=function(){const _0x4fe4f7=_0x5d4113;VisuMZ['BattleCore'][_0x4fe4f7(0x5bf)][_0x4fe4f7(0x701)](this),this['updateUiContainerPosition'](),this[_0x4fe4f7(0x62f)]();},Spriteset_Battle[_0x5d4113(0x44d)][_0x5d4113(0x486)]=function(){const _0x2c765f=_0x5d4113;this['_weather']=new Weather(),this['_battleField'][_0x2c765f(0x9fd)](this[_0x2c765f(0x452)]);},Spriteset_Battle['prototype'][_0x5d4113(0x62f)]=function(){const _0x34b366=_0x5d4113;this['_weather']['type']=$gameScreen[_0x34b366(0x63a)](),this[_0x34b366(0x452)][_0x34b366(0x4a4)]=$gameScreen[_0x34b366(0x78c)]();},Game_Interpreter[_0x5d4113(0x44d)][_0x5d4113(0x458)]=function(_0xa07a90){const _0x1a7e45=_0x5d4113;$gameScreen['changeWeather'](_0xa07a90[0x0],_0xa07a90[0x1],_0xa07a90[0x2]);if(_0xa07a90[0x3])this[_0x1a7e45(0x64b)](_0xa07a90[0x2]);return!![];},VisuMZ['BattleCore'][_0x5d4113(0x4a9)]=Game_Interpreter[_0x5d4113(0x44d)][_0x5d4113(0x650)],Game_Interpreter[_0x5d4113(0x44d)][_0x5d4113(0x650)]=function(_0x57c13e){const _0x3983bc=_0x5d4113;return SceneManager[_0x3983bc(0x2ab)]()?(SceneManager[_0x3983bc(0x5a4)]['_spriteset'][_0x3983bc(0x67a)](_0x57c13e[0x0],_0x57c13e[0x1]),!![]):VisuMZ['BattleCore'][_0x3983bc(0x4a9)][_0x3983bc(0x701)](this,_0x57c13e);},Spriteset_Battle[_0x5d4113(0x44d)]['updateBattlebackBitmap']=function(_0x1014a3,_0x822c1c){const _0x5f2cfd=_0x5d4113;_0x1014a3[_0x5f2cfd(0x432)]=_0x822c1c;},Spriteset_Battle[_0x5d4113(0x44d)][_0x5d4113(0x67a)]=function(_0x1c0cb9,_0x599d7d){const _0x1037a9=_0x5d4113;_0x1c0cb9=_0x1c0cb9||'',_0x599d7d=_0x599d7d||'';_0x1c0cb9===''&&_0x599d7d===''&&(_0x1c0cb9=this[_0x1037a9(0x704)][_0x1037a9(0x4df)](),_0x599d7d=this[_0x1037a9(0x5f0)]['battleback2Name']());const _0x5026f6=ImageManager[_0x1037a9(0x9b4)](_0x1c0cb9),_0x54a40c=ImageManager[_0x1037a9(0x378)](_0x599d7d);_0x5026f6[_0x1037a9(0x897)](this['updateBattlebackBitmap1'][_0x1037a9(0xa11)](this,this['_back1Sprite'],this[_0x1037a9(0x5f0)],_0x5026f6,_0x54a40c));},Spriteset_Battle['prototype'][_0x5d4113(0x7e8)]=function(_0x2dec16,_0x4ffd79,_0x3d06ca,_0xa33792){const _0x369f35=_0x5d4113;_0xa33792[_0x369f35(0x897)](this['updateBattlebackBitmap2']['bind'](this,_0x2dec16,_0x4ffd79,_0x3d06ca,_0xa33792));},Spriteset_Battle['prototype'][_0x5d4113(0x24f)]=function(_0x2bdc00,_0xd8585,_0x330cda,_0x501d01){const _0x24dfac=_0x5d4113;_0x2bdc00[_0x24dfac(0x432)]=_0x330cda,_0xd8585['bitmap']=_0x501d01,_0x2bdc00[_0x24dfac(0xa50)](),_0xd8585[_0x24dfac(0xa50)]();},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x18c)]=Spriteset_Battle[_0x5d4113(0x44d)][_0x5d4113(0x3a3)],Spriteset_Battle['prototype'][_0x5d4113(0x3a3)]=function(){const _0x482e6a=_0x5d4113;VisuMZ[_0x482e6a(0x710)][_0x482e6a(0x18c)][_0x482e6a(0x701)](this),this[_0x482e6a(0x7d6)]();},Spriteset_Battle[_0x5d4113(0x44d)]['createBattleFieldBattleCore']=function(){const _0x421547=_0x5d4113;this[_0x421547(0xa32)](),this[_0x421547(0x3a8)](),this[_0x421547(0x93d)](),this[_0x421547(0x371)](),this['adjustFlippedBattlefield']();},Spriteset_Battle['prototype']['createBattleFieldContainer']=function(){const _0x428ad0=_0x5d4113;this[_0x428ad0(0x518)]=new Sprite(),this[_0x428ad0(0x6e7)][_0x428ad0(0x9fd)](this[_0x428ad0(0x518)]);},Spriteset_Battle['prototype'][_0x5d4113(0x93d)]=function(){const _0x437d39=_0x5d4113;this[_0x437d39(0xac3)]=new Sprite(),Spriteset_Battle[_0x437d39(0x4d6)]?this[_0x437d39(0x9fd)](this[_0x437d39(0xac3)]):'qtYYU'!==_0x437d39(0x9aa)?this[_0x437d39(0x6e7)][_0x437d39(0x9fd)](this[_0x437d39(0xac3)]):this[_0x437d39(0x8ed)](_0x437d39(0x21b));},Spriteset_Battle[_0x5d4113(0x44d)][_0x5d4113(0x371)]=function(){const _0x46701e=_0x5d4113;this[_0x46701e(0x78d)]=new Sprite(),this[_0x46701e(0x78d)]['x']=this[_0x46701e(0x6e7)]['x'],this[_0x46701e(0x78d)]['y']=this[_0x46701e(0x6e7)]['y'],this[_0x46701e(0x9fd)](this[_0x46701e(0x78d)]);},Spriteset_Battle['prototype'][_0x5d4113(0x936)]=function(){const _0x174a0a=_0x5d4113;if(!this[_0x174a0a(0xb96)]())return;this[_0x174a0a(0x518)][_0x174a0a(0x596)]['x']=-0x1,this[_0x174a0a(0x518)]['x']=this[_0x174a0a(0x6e7)][_0x174a0a(0x61e)],this[_0x174a0a(0x765)][_0x174a0a(0x596)]['x']=-0x1,this[_0x174a0a(0x765)]['x']=this['_battleField'][_0x174a0a(0x61e)],this[_0x174a0a(0xac3)][_0x174a0a(0x596)]['x']=-0x1,this[_0x174a0a(0xac3)]['x']=this[_0x174a0a(0x6e7)][_0x174a0a(0x61e)],this[_0x174a0a(0x78d)][_0x174a0a(0x596)]['x']=-0x1,this[_0x174a0a(0x78d)]['x']=this[_0x174a0a(0x6e7)]['x']+this['_battleField'][_0x174a0a(0x61e)];},Spriteset_Battle['prototype'][_0x5d4113(0xa7a)]=function(){const _0x3785a5=_0x5d4113;if(Imported['VisuMZ_0_CoreEngine']&&this[_0x3785a5(0x8f7)]()){if(_0x3785a5(0x324)!==_0x3785a5(0x324)){if(!this['_damageContainer'])return;if(!_0x1dba4f)return;this[_0x3785a5(0x78d)][_0x3785a5(0x5e1)](_0x12f9b5);}else this['repositionEnemiesByResolution']();}const _0x1ad834=$gameTroop[_0x3785a5(0x738)](),_0x4e82a1=[];for(const _0x279662 of _0x1ad834){_0x3785a5(0xc18)==='PAJWQ'?this[_0x3785a5(0x38d)]()?this['updateStaticSvBattlerFrames']():(this[_0x3785a5(0x6bd)](),_0x15274b[_0x3785a5(0x710)][_0x3785a5(0x66e)][_0x3785a5(0x701)](this)):_0x4e82a1['push'](new Sprite_Enemy(_0x279662));}_0x4e82a1[_0x3785a5(0x740)](this[_0x3785a5(0x87a)][_0x3785a5(0xa11)](this));for(const _0x36a76d of _0x4e82a1){if(_0x3785a5(0x29a)===_0x3785a5(0x29a))this[_0x3785a5(0x518)][_0x3785a5(0x9fd)](_0x36a76d);else{if(this[_0x3785a5(0x38d)]())return;this[_0x3785a5(0x43c)](),this['_weaponSprite'][_0x3785a5(0xbd4)](_0x3951fc),this[_0x3785a5(0x493)]['clearWeaponAnimation']();}}this[_0x3785a5(0x8f5)]=_0x4e82a1;},Spriteset_Battle[_0x5d4113(0x44d)][_0x5d4113(0x6cb)]=function(){const _0x1e907=_0x5d4113;this[_0x1e907(0x220)]=[];for(let _0x255439=0x0;_0x255439<$gameParty[_0x1e907(0x34d)]();_0x255439++){const _0x133f26=$gameParty['battleMembers']()[_0x255439],_0x1ed58e=new Sprite_Actor();_0x1ed58e['moveToStartPositionBattleCore'](_0x133f26),_0x1ed58e[_0x1e907(0x957)](_0x133f26),_0x1ed58e[_0x1e907(0x5fb)](),this[_0x1e907(0x220)][_0x1e907(0x2ce)](_0x1ed58e),this[_0x1e907(0x518)][_0x1e907(0x9fd)](_0x1ed58e);}},Spriteset_Battle['prototype'][_0x5d4113(0x51c)]=function(_0x3c5c5d,_0x500160,_0x39c52d,_0x3e0334){const _0x479ccc=_0x5d4113,_0x4d61f8=this['isMVAnimation'](_0x500160),_0x5146f8=new(_0x4d61f8?Sprite_AnimationMV:Sprite_Animation)(),_0x3ccbfe=this[_0x479ccc(0x7ea)](_0x3c5c5d);this[_0x479ccc(0x758)](_0x3c5c5d[0x0])&&(_0x39c52d=!_0x39c52d),_0x5146f8[_0x479ccc(0x498)]=_0x3c5c5d,_0x5146f8['setup'](_0x3ccbfe,_0x500160,_0x39c52d,_0x3e0334),this[_0x479ccc(0x1d8)](_0x5146f8);},Spriteset_Battle['prototype'][_0x5d4113(0x1d8)]=function(_0x12bd42){const _0x1d9bdf=_0x5d4113;this[_0x1d9bdf(0x8f6)](_0x12bd42)?_0x1d9bdf(0x455)===_0x1d9bdf(0x455)?(this[_0x1d9bdf(0x516)]()[_0x1d9bdf(0x9fd)](_0x12bd42),_0x12bd42[_0x1d9bdf(0x968)]=!![]):(_0x436a1b[_0x1d9bdf(0x44d)][_0x1d9bdf(0xc81)][_0x1d9bdf(0x701)](this),this[_0x1d9bdf(0x82f)]=this[_0x1d9bdf(0x258)]()):this[_0x1d9bdf(0xac3)][_0x1d9bdf(0x9fd)](_0x12bd42),this[_0x1d9bdf(0x5f7)][_0x1d9bdf(0x2ce)](_0x12bd42);},Spriteset_Battle[_0x5d4113(0x44d)][_0x5d4113(0x8f6)]=function(_0x37b1d1){const _0x43fdb8=_0x5d4113;if(!_0x37b1d1)return![];if(!_0x37b1d1['_animation'])return![];if(!_0x37b1d1['targetObjects'][0x0])return![];if(_0x37b1d1[_0x43fdb8(0x498)][0x0][_0x43fdb8(0xa65)]&&!_0x37b1d1[_0x43fdb8(0x498)][0x0][_0x43fdb8(0xa65)]())return![];if($gameSystem[_0x43fdb8(0x9f8)]())return![];if(!this['battleStatusWindowAnimationContainer']())return![];if(_0x37b1d1[_0x43fdb8(0x8ab)]===Sprite_Animation){if(_0x43fdb8(0x64a)!=='cBIJl'){if(_0x37b1d1[_0x43fdb8(0x160)][_0x43fdb8(0x8f0)]!==0x0)return![];}else{const _0x262382=_0x4457cd[_0x43fdb8(0x96f)](0x2)===0x0?this[_0x43fdb8(0x759)]():this[_0x43fdb8(0x7a6)]();_0x44674d[_0x43fdb8(0x2ce)](_0x262382['trueRandomTarget']());}}else{if(_0x37b1d1[_0x43fdb8(0x8ab)]===Sprite_AnimationMV){if(_0x37b1d1[_0x43fdb8(0x160)][_0x43fdb8(0xa13)]===0x3)return![];}}return!![];const _0x22ead7=Window_BattleStatus[_0x43fdb8(0x44d)][_0x43fdb8(0x30c)]();return['xp',_0x43fdb8(0x453)][_0x43fdb8(0x37c)](_0x22ead7);},Spriteset_Battle[_0x5d4113(0x44d)][_0x5d4113(0x516)]=function(){const _0x2727e8=_0x5d4113;if(!SceneManager[_0x2727e8(0x5a4)])return null;if(!SceneManager[_0x2727e8(0x5a4)]['_statusWindow'])return null;if(!SceneManager[_0x2727e8(0x5a4)][_0x2727e8(0x480)]['_effectsContainer'])return null;return SceneManager[_0x2727e8(0x5a4)]['_statusWindow'][_0x2727e8(0xa5e)];},Spriteset_Battle[_0x5d4113(0x44d)][_0x5d4113(0xa4a)]=function(_0xb23c25){const _0x5e58fe=_0x5d4113;this['removeAnimationFromContainer'](_0xb23c25);for(const _0x474420 of _0xb23c25['targetObjects']){if(_0x5e58fe(0xa18)===_0x5e58fe(0x24b)){if(!this[_0x5e58fe(0x258)]())return;_0x314487[_0x5e58fe(0x800)]()?this['x']=_0x29c159['boxWidth']-this[_0x5e58fe(0x258)]()['battler']()[_0x5e58fe(0x8bf)]:this['x']=this[_0x5e58fe(0x258)]()[_0x5e58fe(0x3ee)]()[_0x5e58fe(0x8bf)];this['x']-=_0x4f4b1f['round'](this[_0x5e58fe(0x61e)]/0x2),this['y']=this[_0x5e58fe(0x258)]()[_0x5e58fe(0x3ee)]()[_0x5e58fe(0x559)]-_0x17b699['round'](this[_0x5e58fe(0x950)]()*1.5);const _0x27e8d5=_0x10fc07[_0x5e58fe(0x710)][_0x5e58fe(0x326)][_0x5e58fe(0x194)];this['x']+=_0x27e8d5[_0x5e58fe(0xa48)]||0x0,this['y']+=_0x27e8d5[_0x5e58fe(0x6cf)]||0x0;}else _0x474420['endAnimation']&&_0x474420['endAnimation']();}_0xb23c25[_0x5e58fe(0x459)]();},Spriteset_Battle[_0x5d4113(0x44d)][_0x5d4113(0x6da)]=function(_0x1c5fcb){const _0x40c5a6=_0x5d4113;this['isAnimationShownOnBattlePortrait'](_0x1c5fcb)?this[_0x40c5a6(0x516)]()[_0x40c5a6(0x5e1)](_0x1c5fcb):this[_0x40c5a6(0xac3)][_0x40c5a6(0x5e1)](_0x1c5fcb);this['_effectsContainer']['removeChild'](_0x1c5fcb),this[_0x40c5a6(0xac3)]['removeChild'](_0x1c5fcb),this[_0x40c5a6(0x5f7)][_0x40c5a6(0x828)](_0x1c5fcb);if(this[_0x40c5a6(0x926)])this[_0x40c5a6(0x926)]['remove'](_0x1c5fcb);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x71b)]=Spriteset_Battle[_0x5d4113(0x44d)][_0x5d4113(0x662)],Spriteset_Battle[_0x5d4113(0x44d)]['updateActors']=function(){const _0x2f0a8a=_0x5d4113;VisuMZ[_0x2f0a8a(0x710)][_0x2f0a8a(0x71b)]['call'](this),this[_0x2f0a8a(0x70f)]();},Spriteset_Battle[_0x5d4113(0x44d)][_0x5d4113(0x70f)]=function(){const _0xa255a0=_0x5d4113;this[_0xa255a0(0x518)][_0xa255a0(0xc87)]['sort'](this[_0xa255a0(0xbe1)][_0xa255a0(0xa11)](this)),this[_0xa255a0(0x1f4)]();},Spriteset_Battle['prototype'][_0x5d4113(0xbe1)]=function(_0x445055,_0x4ceee4){const _0x4b2270=_0x5d4113;if(VisuMZ[_0x4b2270(0x710)]['Settings'][_0x4b2270(0xc03)][_0x4b2270(0xc16)]){if(_0x445055['_battler']&&_0x4ceee4[_0x4b2270(0x484)]){if(_0x4b2270(0xb25)!==_0x4b2270(0xb25))_0x1d489c['refreshActorPortrait'](this);else{if(_0x445055[_0x4b2270(0x484)][_0x4b2270(0xa65)]()&&_0x4ceee4['_battler'][_0x4b2270(0xb88)]()){if(_0x4b2270(0xa54)===_0x4b2270(0xa54))return 0x1;else{const _0x1acd2f=_0x38231b[_0x4b2270(0x44d)][_0x4b2270(0x481)][_0x4b2270(0x701)](arguments,0x1);this[_0x4b2270(0x793)][_0x4b2270(0xc1c)]({'name':_0x23529d,'params':_0x1acd2f});}}else{if(_0x4ceee4[_0x4b2270(0x484)]['isActor']()&&_0x445055[_0x4b2270(0x484)][_0x4b2270(0xb88)]()){if(_0x4b2270(0xa1d)!==_0x4b2270(0x7a8))return-0x1;else{if(!_0x5eb5ed[_0x4b2270(0x2ab)]())return;if(_0x13f018[_0x4b2270(0x6bf)]())return;if(!this[_0x4b2270(0x3ee)]())return;if(_0x5a0f38[_0x4b2270(0x7da)]<=0x0)return;_0x5977b2=_0x41df17||{},_0x235620['textColor']=_0x486bc1[_0x4b2270(0x776)]||_0x4b2270(0x56b),_0x3f5ca5['flashColor']=_0x3176f0[_0x4b2270(0x249)]||[0x0,0x0,0x0,0x0],_0x271d70[_0x4b2270(0x98d)]=_0x344134[_0x4b2270(0x98d)]||0x0,this[_0x4b2270(0x3ee)]()[_0x4b2270(0xb7e)](_0x3d1357,_0x38efb7,_0x42de36);}}}}}}return _0x445055[_0x4b2270(0x559)]!==_0x4ceee4[_0x4b2270(0x559)]?_0x445055[_0x4b2270(0x559)]-_0x4ceee4[_0x4b2270(0x559)]:_0x4ceee4[_0x4b2270(0x6b6)]-_0x445055[_0x4b2270(0x6b6)];},Spriteset_Battle['prototype']['putActiveBattlerOnTop']=function(){const _0xd1c4b3=_0x5d4113;if(!VisuMZ[_0xd1c4b3(0x710)][_0xd1c4b3(0x326)]['Actor'][_0xd1c4b3(0x53f)])return;const _0x126c29=BattleManager[_0xd1c4b3(0x932)];if(_0x126c29){if('YCDjP'!=='PWEyp'){if(_0x126c29[_0xd1c4b3(0xa65)]()&&!$gameSystem['isSideView']())return;const _0x2521c4=_0x126c29['battler']();if(_0x2521c4&&_0x126c29[_0xd1c4b3(0xa65)]())this[_0xd1c4b3(0x518)][_0xd1c4b3(0x9fd)](_0x2521c4);}else!this[_0xd1c4b3(0x1cf)]&&(this[_0xd1c4b3(0x1cf)]=new _0x26c81b(_0x4293dd),this[_0xd1c4b3(0x779)]()),this[_0xd1c4b3(0x1cf)][_0xd1c4b3(0x957)](_0x398510);}},Spriteset_Battle['prototype'][_0x5d4113(0x6f6)]=function(){const _0x2d7367=_0x5d4113;for(const _0x161c3a of $gameParty[_0x2d7367(0x331)]()){if(!_0x161c3a)continue;if(!_0x161c3a[_0x2d7367(0x3ee)]())continue;_0x161c3a[_0x2d7367(0x3ee)]()[_0x2d7367(0x8de)]=!![],_0x161c3a[_0x2d7367(0x3ee)]()[_0x2d7367(0x52b)]();}},Spriteset_Battle[_0x5d4113(0x44d)][_0x5d4113(0x3a8)]=function(){const _0xe91353=_0x5d4113;this[_0xe91353(0x765)]=new Sprite();if(Spriteset_Battle[_0xe91353(0x4d6)])this['addChild'](this[_0xe91353(0x765)]);else{if(_0xe91353(0x2a4)===_0xe91353(0x4ae))return this['statusTextAutoBattleStyle']();else this[_0xe91353(0x6e7)][_0xe91353(0x9fd)](this[_0xe91353(0x765)]);}SceneManager[_0xe91353(0x5a4)][_0xe91353(0x765)]=this[_0xe91353(0x765)];},Spriteset_Battle[_0x5d4113(0x44d)]['createEnemyNames']=function(){const _0x5b3607=_0x5d4113;if(VisuMZ[_0x5b3607(0x710)][_0x5b3607(0x326)][_0x5b3607(0x194)][_0x5b3607(0x69e)])return;this[_0x5b3607(0x289)]=new Sprite(),BattleManager[_0x5b3607(0x756)](this['_enemyNameContainer']);for(const _0x4f5c17 of this[_0x5b3607(0x8f5)]){if('xXCEb'===_0x5b3607(0x5d3)){const _0x145cff=new Sprite_EnemyName();this[_0x5b3607(0x289)][_0x5b3607(0x9fd)](_0x145cff),_0x145cff[_0x5b3607(0x149)](_0x4f5c17);}else{const _0x702c79=[],_0x390ff8=new _0x3f1602(this);return _0x390ff8[_0x5b3607(0x290)](),_0x702c79[_0x5b3607(0x2ce)](_0x390ff8),_0x702c79;}}},Spriteset_Battle['prototype'][_0x5d4113(0x885)]=function(){const _0x4212b3=_0x5d4113;if(!this[_0x4212b3(0x78d)])return;if(!this[_0x4212b3(0x765)])return;const _0x3a10d4=Spriteset_Battle[_0x4212b3(0x4d6)]?this[_0x4212b3(0x78d)]['x']:0x0,_0x2c252d=Spriteset_Battle[_0x4212b3(0x4d6)]?this['_damageContainer']['y']:0x0,_0x57fb31=Imported[_0x4212b3(0xc30)]?this[_0x4212b3(0x6e7)]['x']:0x0,_0x3b3a44=Imported[_0x4212b3(0xc30)]?this[_0x4212b3(0x6e7)]['y']:0x0;this[_0x4212b3(0x765)]['x']=_0x3a10d4+_0x57fb31,this[_0x4212b3(0x765)]['y']=_0x2c252d+_0x3b3a44;},BattleManager[_0x5d4113(0x756)]=function(_0x123499){const _0x311bc7=_0x5d4113;if(!SceneManager[_0x311bc7(0x5a4)][_0x311bc7(0x765)])return;SceneManager[_0x311bc7(0x5a4)][_0x311bc7(0x765)][_0x311bc7(0x9fd)](_0x123499);},Spriteset_Battle[_0x5d4113(0x44d)][_0x5d4113(0x835)]=function(){return![];},Spriteset_Battle[_0x5d4113(0x44d)][_0x5d4113(0xaf7)]=function(){const _0x33d18d=_0x5d4113;return this['battlerSprites']()[_0x33d18d(0x7f3)](_0x2df44b=>_0x2df44b[_0x33d18d(0xa3e)]());},Spriteset_Battle['prototype'][_0x5d4113(0x394)]=function(){const _0x4e206c=_0x5d4113;return this['battlerSprites']()['some'](_0x3ed935=>_0x3ed935[_0x4e206c(0xb43)]());},Spriteset_Battle['prototype']['isAnyoneGrowing']=function(){const _0x57a804=_0x5d4113;return this[_0x57a804(0x1da)]()['some'](_0xfe7758=>_0xfe7758[_0x57a804(0x2c5)]());},Spriteset_Battle[_0x5d4113(0x44d)]['isAnyoneSkewing']=function(){const _0xa7b758=_0x5d4113;return this[_0xa7b758(0x1da)]()[_0xa7b758(0x7f3)](_0x58de7f=>_0x58de7f[_0xa7b758(0x1ee)]());},Spriteset_Battle[_0x5d4113(0x44d)]['isAnyoneSpinning']=function(){const _0x3319f7=_0x5d4113;return this[_0x3319f7(0x1da)]()[_0x3319f7(0x7f3)](_0xe177c1=>_0xe177c1['isSpinning']());},Spriteset_Battle[_0x5d4113(0x44d)][_0x5d4113(0x610)]=function(){const _0x5a0923=_0x5d4113;return this[_0x5a0923(0x1da)]()[_0x5a0923(0x7f3)](_0x59b598=>_0x59b598[_0x5a0923(0x5de)]());},VisuMZ[_0x5d4113(0x710)]['Window_ItemList_maxCols']=Window_ItemList[_0x5d4113(0x44d)][_0x5d4113(0xa14)],Window_ItemList['prototype'][_0x5d4113(0xa14)]=function(){const _0x5774d5=_0x5d4113;if(SceneManager[_0x5774d5(0x2ab)]())return SceneManager['_scene']['battleLayoutStyle']()===_0x5774d5(0xc3e)?VisuMZ[_0x5774d5(0x710)][_0x5774d5(0x326)][_0x5774d5(0x18b)][_0x5774d5(0x448)]:VisuMZ[_0x5774d5(0x710)][_0x5774d5(0x326)][_0x5774d5(0x18b)]['SkillItemStandardCols'];else{if(_0x5774d5(0xc44)!==_0x5774d5(0xc44)){const _0x367bda=_0x4ee795[_0x14aabc[_0x5774d5(0xc8b)]];if(_0x367bda&&!_0x549f13[_0x5774d5(0x4b0)](_0x367bda))_0xb3e6f3['push'](_0x367bda);}else return VisuMZ[_0x5774d5(0x710)]['Window_ItemList_maxCols'][_0x5774d5(0x701)](this);}},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x4a7)]=Window_SkillList[_0x5d4113(0x44d)][_0x5d4113(0xa14)],Window_SkillList[_0x5d4113(0x44d)][_0x5d4113(0xa14)]=function(){const _0x4e72c2=_0x5d4113;return SceneManager[_0x4e72c2(0x2ab)]()?SceneManager['_scene'][_0x4e72c2(0x30c)]()===_0x4e72c2(0xc3e)?VisuMZ[_0x4e72c2(0x710)][_0x4e72c2(0x326)][_0x4e72c2(0x18b)][_0x4e72c2(0x448)]:VisuMZ[_0x4e72c2(0x710)][_0x4e72c2(0x326)][_0x4e72c2(0x18b)]['SkillItemStandardCols']:VisuMZ[_0x4e72c2(0x710)][_0x4e72c2(0x4a7)]['call'](this);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x416)]=Window_Options[_0x5d4113(0x44d)][_0x5d4113(0x287)],Window_Options[_0x5d4113(0x44d)][_0x5d4113(0x287)]=function(){const _0x380b60=_0x5d4113;VisuMZ[_0x380b60(0x710)][_0x380b60(0x416)][_0x380b60(0x701)](this),this[_0x380b60(0x185)](),this[_0x380b60(0x201)]();},Window_Options[_0x5d4113(0x44d)]['addAutoBattleCommands']=function(){const _0xbced4a=_0x5d4113;VisuMZ['BattleCore']['Settings'][_0xbced4a(0x9e5)][_0xbced4a(0x1ef)]&&(this[_0xbced4a(0x7ba)](),this[_0xbced4a(0x152)]());},Window_Options[_0x5d4113(0x44d)][_0x5d4113(0x201)]=function(){const _0x32c0c3=_0x5d4113;if(!VisuMZ[_0x32c0c3(0x710)]['Settings'][_0x32c0c3(0xa8e)]['AddHpGaugeOption'])return;const _0x356442=TextManager['visualHpGauge'],_0xbca6b=_0x32c0c3(0x2e2);this[_0x32c0c3(0x774)](_0x356442,_0xbca6b);},Window_Options[_0x5d4113(0x44d)]['addBattleCoreAutoBattleStartupCommand']=function(){const _0xc70321=_0x5d4113,_0x55686b=TextManager['autoBattleStart'],_0x382c44=_0xc70321(0x23b);this[_0xc70321(0x774)](_0x55686b,_0x382c44);},Window_Options[_0x5d4113(0x44d)][_0x5d4113(0x152)]=function(){const _0x291b41=_0x5d4113,_0xa2e36=TextManager[_0x291b41(0x39d)],_0x3360ca='autoBattleUseSkills';this[_0x291b41(0x774)](_0xa2e36,_0x3360ca);},VisuMZ[_0x5d4113(0x710)]['Window_Options_statusText']=Window_Options[_0x5d4113(0x44d)][_0x5d4113(0xae9)],Window_Options[_0x5d4113(0x44d)]['statusText']=function(_0x3fb454){const _0x39185c=_0x5d4113,_0x286626=this['commandSymbol'](_0x3fb454);if(_0x286626==='autoBattleUseSkills'){if(_0x39185c(0x159)==='jjZgI')this[_0x39185c(0x5c1)]()&&_0x55df2d[_0x39185c(0x710)][_0x39185c(0x5a9)]['call'](this,_0xc6b8f6,_0x13c8a3,_0x29a861);else return this[_0x39185c(0xc3c)]();}else{if('vFpIm'===_0x39185c(0x35d))return VisuMZ[_0x39185c(0x710)][_0x39185c(0x980)][_0x39185c(0x701)](this,_0x3fb454);else{if(!_0x586e27)return;for(const _0x43c3db of _0x460e26[_0x39185c(0x95c)]){if([0x6c,0x198][_0x39185c(0x4b0)](_0x43c3db['code'])){const _0x384d1f=_0x43c3db[_0x39185c(0x4d7)][0x0];if(_0x384d1f['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];}}},Window_Options[_0x5d4113(0x44d)][_0x5d4113(0xc3c)]=function(){const _0xe85d41=_0x5d4113,_0x228081=VisuMZ[_0xe85d41(0x710)][_0xe85d41(0x326)][_0xe85d41(0x9e5)],_0x2c38bc=this[_0xe85d41(0x3fb)](_0xe85d41(0x53e));return _0x2c38bc?_0x228081[_0xe85d41(0x74f)]:_0x228081[_0xe85d41(0x797)];},Window_ShopStatus['prototype'][_0x5d4113(0xb02)]=function(){const _0x4fca6c=_0x5d4113,_0x2b9a08=DataManager[_0x4fca6c(0x13e)](this['_item']),_0x3d06b4=VisuMZ[_0x4fca6c(0x6c7)][_0x2b9a08];if(!_0x3d06b4)return this[_0x4fca6c(0xa4d)]();const _0x4ddaf7=_0x4fca6c(0x6a9)[_0x4fca6c(0x85d)](this['_item'][_0x4fca6c(0x769)][_0x4fca6c(0x917)]),_0x109693=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x4fca6c(0xb7a)]['damage'][_0x4fca6c(0x917)]];return _0x3d06b4[_0x4ddaf7]['format'](_0x109693);},Window_ShopStatus['prototype'][_0x5d4113(0x490)]=function(){const _0x2751fb=_0x5d4113,_0x44e4dd=DataManager['getDamageStyle'](this[_0x2751fb(0xb7a)]),_0x501aa6=VisuMZ[_0x2751fb(0x6c7)][_0x44e4dd];if(!_0x501aa6)return this[_0x2751fb(0x62e)]();return _0x501aa6[_0x2751fb(0x8f3)][_0x2751fb(0x701)](this);},VisuMZ[_0x5d4113(0x710)]['Window_PartyCommand_initialize']=Window_PartyCommand[_0x5d4113(0x44d)]['initialize'],Window_PartyCommand['prototype']['initialize']=function(_0x2151f3){const _0x40e0f5=_0x5d4113;VisuMZ[_0x40e0f5(0x710)]['Window_PartyCommand_initialize']['call'](this,_0x2151f3),this['createCommandNameWindow'](_0x2151f3);},Window_PartyCommand[_0x5d4113(0x44d)][_0x5d4113(0x1d5)]=function(_0x2403f3){const _0x2104d9=_0x5d4113,_0x1a7034=new Rectangle(0x0,0x0,_0x2403f3['width'],_0x2403f3[_0x2104d9(0x6ce)]);this['_commandNameWindow']=new Window_Base(_0x1a7034),this[_0x2104d9(0x6b0)][_0x2104d9(0x380)]=0x0,this[_0x2104d9(0x9fd)](this[_0x2104d9(0x6b0)]),this[_0x2104d9(0xc2f)]();},Window_PartyCommand['prototype'][_0x5d4113(0x398)]=function(){const _0x20cb76=_0x5d4113;Window_Command[_0x20cb76(0x44d)][_0x20cb76(0x398)][_0x20cb76(0x701)](this);if(this['_commandNameWindow'])this['updateCommandNameWindow']();},Window_PartyCommand[_0x5d4113(0x44d)][_0x5d4113(0xc2f)]=function(){const _0xf96473=_0x5d4113,_0x403d66=this[_0xf96473(0x6b0)];_0x403d66[_0xf96473(0x476)][_0xf96473(0x192)]();const _0x493574=this['commandStyleCheck'](this[_0xf96473(0x288)]());if(_0x493574===_0xf96473(0x989)&&this[_0xf96473(0xb8c)]()>0x0){const _0x1a4a64=this[_0xf96473(0x98e)](this[_0xf96473(0x288)]());let _0x2014e0=this[_0xf96473(0xb18)](this[_0xf96473(0x288)]());_0x2014e0=_0x2014e0[_0xf96473(0xc9e)](/\\I\[(\d+)\]/gi,''),_0x403d66[_0xf96473(0x2fc)](),this['commandNameWindowDrawBackground'](_0x2014e0,_0x1a4a64),this[_0xf96473(0xbc7)](_0x2014e0,_0x1a4a64),this['commandNameWindowCenter'](_0x2014e0,_0x1a4a64);}},Window_PartyCommand[_0x5d4113(0x44d)][_0x5d4113(0x41c)]=function(_0x2980db,_0x59b135){},Window_PartyCommand['prototype'][_0x5d4113(0xbc7)]=function(_0x995dd3,_0x482091){const _0xdff5e4=_0x5d4113,_0x5e5ab0=this[_0xdff5e4(0x6b0)];_0x5e5ab0[_0xdff5e4(0x6a1)](_0x995dd3,0x0,_0x482091['y'],_0x5e5ab0['innerWidth'],_0xdff5e4(0x4d5));},Window_PartyCommand[_0x5d4113(0x44d)][_0x5d4113(0xa85)]=function(_0x216db6,_0x2ee73d){const _0x20b628=_0x5d4113,_0x2a70d4=this[_0x20b628(0x6b0)],_0x3670bd=$gameSystem['windowPadding'](),_0x4a45df=_0x2ee73d['x']+Math[_0x20b628(0xa63)](_0x2ee73d['width']/0x2)+_0x3670bd;_0x2a70d4['x']=_0x2a70d4[_0x20b628(0x61e)]/-0x2+_0x4a45df,_0x2a70d4['y']=Math[_0x20b628(0xa63)](_0x2ee73d[_0x20b628(0x6ce)]/0x2);},Window_PartyCommand[_0x5d4113(0x44d)]['makeCommandList']=function(){const _0x57760b=_0x5d4113;this[_0x57760b(0x58c)](),this[_0x57760b(0x421)](),this[_0x57760b(0x8d7)](),this[_0x57760b(0x4f0)](),this['addEscapeCommand']();},Window_PartyCommand[_0x5d4113(0x44d)][_0x5d4113(0x58c)]=function(){const _0x127f08=_0x5d4113,_0x3b1834=this[_0x127f08(0xabe)](),_0x3203bf=VisuMZ[_0x127f08(0x710)][_0x127f08(0x326)]['PartyCmd'][_0x127f08(0x312)],_0x3eff67=_0x3b1834===_0x127f08(0x5ae)?TextManager[_0x127f08(0x632)]:_0x127f08(0x4a8)[_0x127f08(0x85d)](_0x3203bf,TextManager[_0x127f08(0x632)]),_0x440a18=this[_0x127f08(0xa1a)]();this['addCommand'](_0x3eff67,_0x127f08(0x632),_0x440a18);},Window_PartyCommand[_0x5d4113(0x44d)][_0x5d4113(0xa1a)]=function(){return!![];},Window_PartyCommand[_0x5d4113(0x44d)][_0x5d4113(0x421)]=function(){const _0x46d58b=_0x5d4113;if(!this['isAutoBattleCommandAdded']())return;const _0x5b8af3=this[_0x46d58b(0xabe)](),_0x54c876=VisuMZ['BattleCore']['Settings'][_0x46d58b(0x9c4)][_0x46d58b(0x9a2)],_0x166d2e=_0x5b8af3===_0x46d58b(0x5ae)?TextManager['autoBattle']:_0x46d58b(0x4a8)[_0x46d58b(0x85d)](_0x54c876,TextManager[_0x46d58b(0x8b3)]),_0x49b079=this[_0x46d58b(0x9ca)]();this['addCommand'](_0x166d2e,_0x46d58b(0x8b3),_0x49b079);},Window_PartyCommand[_0x5d4113(0x44d)]['isAutoBattleCommandAdded']=function(){const _0x2d41a5=_0x5d4113;return VisuMZ[_0x2d41a5(0x710)][_0x2d41a5(0x326)][_0x2d41a5(0x9c4)][_0x2d41a5(0xa12)];},Window_PartyCommand[_0x5d4113(0x44d)][_0x5d4113(0x9ca)]=function(){return!![];},Window_PartyCommand[_0x5d4113(0x44d)]['addCustomCommands']=function(){},Window_PartyCommand[_0x5d4113(0x44d)][_0x5d4113(0x4f0)]=function(){const _0x56d11b=_0x5d4113;if(!this[_0x56d11b(0x81f)]())return;const _0x192441=this[_0x56d11b(0xabe)](),_0x5f059c=VisuMZ['BattleCore'][_0x56d11b(0x326)][_0x56d11b(0x9c4)][_0x56d11b(0x537)],_0x520269=_0x192441==='text'?TextManager[_0x56d11b(0x1fa)]:_0x56d11b(0x4a8)['format'](_0x5f059c,TextManager['options']),_0x2974a7=this[_0x56d11b(0x841)]();this['addCommand'](_0x520269,'options',_0x2974a7);},Window_PartyCommand[_0x5d4113(0x44d)][_0x5d4113(0x81f)]=function(){const _0x1e91fb=_0x5d4113;return VisuMZ[_0x1e91fb(0x710)][_0x1e91fb(0x326)][_0x1e91fb(0x9c4)][_0x1e91fb(0x8d0)];},Window_PartyCommand['prototype']['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x5d4113(0x44d)]['addEscapeCommand']=function(){const _0x4159a5=_0x5d4113,_0x4dc722=this['commandStyle'](),_0x4a3ab7=VisuMZ[_0x4159a5(0x710)][_0x4159a5(0x326)][_0x4159a5(0x9c4)]['CmdIconEscape'],_0x40347f=_0x4dc722===_0x4159a5(0x5ae)?TextManager['escape']:_0x4159a5(0x4a8)[_0x4159a5(0x85d)](_0x4a3ab7,TextManager[_0x4159a5(0x382)]),_0x2ed176=this[_0x4159a5(0x922)]();this[_0x4159a5(0x774)](_0x40347f,_0x4159a5(0x382),_0x2ed176);},Window_PartyCommand[_0x5d4113(0x44d)][_0x5d4113(0x922)]=function(){return BattleManager['canEscape']();},Window_PartyCommand['prototype'][_0x5d4113(0x57a)]=function(){const _0x536396=_0x5d4113;return VisuMZ[_0x536396(0x710)][_0x536396(0x326)][_0x536396(0x9c4)][_0x536396(0x6ff)];},Window_PartyCommand[_0x5d4113(0x44d)]['drawItem']=function(_0x2425ab){const _0x4eff1c=_0x5d4113,_0x559910=this[_0x4eff1c(0xb09)](_0x2425ab);if(_0x559910===_0x4eff1c(0xa47)){if(_0x4eff1c(0x7ae)==='TrOIN')this[_0x4eff1c(0x3e7)](_0x2425ab);else{_0x47f635[_0x4eff1c(0x3ca)][_0x4eff1c(0x7ee)]('undecided');const _0x3cf7a8=_0x59f14c[_0x4eff1c(0x3ca)][_0x4eff1c(0x3ee)]();if(_0x3cf7a8)_0x3cf7a8[_0x4eff1c(0x254)]();}}else _0x559910===_0x4eff1c(0x989)?this['drawItemStyleIcon'](_0x2425ab):Window_Command[_0x4eff1c(0x44d)][_0x4eff1c(0xc88)]['call'](this,_0x2425ab);},Window_PartyCommand['prototype']['commandStyle']=function(){const _0x137e8f=_0x5d4113;return VisuMZ['BattleCore'][_0x137e8f(0x326)][_0x137e8f(0x9c4)][_0x137e8f(0xbe4)];},Window_PartyCommand[_0x5d4113(0x44d)]['commandStyleCheck']=function(_0x1ad4bd){const _0x57b26a=_0x5d4113;if(_0x1ad4bd<0x0)return _0x57b26a(0x5ae);const _0x299fb8=this['commandStyle']();if(_0x299fb8!==_0x57b26a(0x9ee))return _0x299fb8;else{if(this['maxItems']()>0x0){if(_0x57b26a(0x369)===_0x57b26a(0x369)){const _0x57479d=this[_0x57b26a(0xb18)](_0x1ad4bd);if(_0x57479d[_0x57b26a(0xb51)](/\\I\[(\d+)\]/i)){const _0x1c83bb=this['itemLineRect'](_0x1ad4bd),_0x5e2b81=this[_0x57b26a(0x2a1)](_0x57479d)[_0x57b26a(0x61e)];if(_0x5e2b81<=_0x1c83bb['width'])return'iconText';else{if(_0x57b26a(0x2ca)==='qZEkx')_0x12a69a=(_0x5bd3c8+_0x13eb56)/0x2,_0x326f45=-0x1;else return _0x57b26a(0x989);}}}else{const _0x2f0d36=this['_borderPortraitDuration'],_0x256a3d=this[_0x57b26a(0x2e4)];_0x256a3d['x']=(_0x256a3d['x']*(_0x2f0d36-0x1)+this[_0x57b26a(0x6c0)])/_0x2f0d36,_0x256a3d['opacity']=(_0x256a3d[_0x57b26a(0x380)]*(_0x2f0d36-0x1)+0xff)/_0x2f0d36,this['_borderPortraitDuration']--;}}}return _0x57b26a(0x5ae);},Window_PartyCommand[_0x5d4113(0x44d)][_0x5d4113(0x3e7)]=function(_0x34c59b){const _0x10852b=_0x5d4113,_0x276844=this[_0x10852b(0x98e)](_0x34c59b),_0xb2ec4c=this[_0x10852b(0xb18)](_0x34c59b),_0x220a16=this['textSizeEx'](_0xb2ec4c)[_0x10852b(0x61e)];this[_0x10852b(0xbe8)](this[_0x10852b(0x1af)](_0x34c59b));const _0x27b587=this['itemTextAlign']();if(_0x27b587===_0x10852b(0x87b)){if(_0x10852b(0x4a2)===_0x10852b(0x7ef)){if(_0x462aea[_0x10852b(0x710)]['_commonEventKey'][_0x28d91c]){const _0x12abe0=_0x167a26['BattleCore'][_0x10852b(0x8d5)][_0x335014],_0x1315c8={'code':0x2c,'dataId':_0x12abe0,'value1':0x1,'value2':0x0};_0x540c28[_0x10852b(0x21c)]['push'](_0x1315c8);}}else this[_0x10852b(0x8ca)](_0xb2ec4c,_0x276844['x']+_0x276844[_0x10852b(0x61e)]-_0x220a16,_0x276844['y'],_0x220a16);}else{if(_0x27b587==='center'){const _0x22ad94=_0x276844['x']+Math[_0x10852b(0xa63)]((_0x276844[_0x10852b(0x61e)]-_0x220a16)/0x2);this[_0x10852b(0x8ca)](_0xb2ec4c,_0x22ad94,_0x276844['y'],_0x220a16);}else this[_0x10852b(0x8ca)](_0xb2ec4c,_0x276844['x'],_0x276844['y'],_0x220a16);}},Window_PartyCommand[_0x5d4113(0x44d)][_0x5d4113(0x58d)]=function(_0x173080){const _0x4f4151=_0x5d4113;this['commandName'](_0x173080)[_0x4f4151(0xb51)](/\\I\[(\d+)\]/i);const _0x4af173=Number(RegExp['$1'])||0x0,_0x484a61=this[_0x4f4151(0x98e)](_0x173080),_0x5b8fc0=_0x484a61['x']+Math[_0x4f4151(0xa63)]((_0x484a61[_0x4f4151(0x61e)]-ImageManager['iconWidth'])/0x2),_0x1f69b6=_0x484a61['y']+(_0x484a61['height']-ImageManager[_0x4f4151(0xa92)])/0x2;this[_0x4f4151(0xa60)](_0x4af173,_0x5b8fc0,_0x1f69b6);},Window_PartyCommand[_0x5d4113(0x44d)][_0x5d4113(0x712)]=function(){},Window_PartyCommand['prototype'][_0x5d4113(0x5d2)]=function(){const _0x5a8646=_0x5d4113;Window_Command[_0x5a8646(0x44d)][_0x5a8646(0x5d2)]['call'](this);const _0x3f934c=this['battleLayoutStyle']();_0x3f934c===_0x5a8646(0xc3e)&&this['showHelpWindow']();},Window_PartyCommand[_0x5d4113(0x44d)][_0x5d4113(0x30c)]=function(){const _0x58b1d9=_0x5d4113;if(this[_0x58b1d9(0xa20)])return this['_battleLayoutStyle'];return this[_0x58b1d9(0xa20)]=SceneManager[_0x58b1d9(0x5a4)]['battleLayoutStyle'](),this[_0x58b1d9(0xa20)];},Window_PartyCommand[_0x5d4113(0x44d)][_0x5d4113(0x715)]=function(){const _0x12c944=_0x5d4113,_0x103a7a=VisuMZ[_0x12c944(0x710)][_0x12c944(0x326)]['PartyCmd'],_0x242aa0=this[_0x12c944(0x355)]();switch(_0x242aa0){case _0x12c944(0x632):this[_0x12c944(0xc0a)][_0x12c944(0x7e3)](_0x103a7a[_0x12c944(0x91d)]);break;case _0x12c944(0x8b3):this[_0x12c944(0xc0a)][_0x12c944(0x7e3)](_0x103a7a[_0x12c944(0x406)]);break;case _0x12c944(0x1fa):this[_0x12c944(0xc0a)][_0x12c944(0x7e3)](_0x103a7a[_0x12c944(0x4e5)]);break;case _0x12c944(0x382):this['_helpWindow'][_0x12c944(0x7e3)](_0x103a7a[_0x12c944(0xa8a)]);break;default:this['_helpWindow'][_0x12c944(0x7e3)]('');break;}},VisuMZ[_0x5d4113(0x710)]['Window_ActorCommand_initialize']=Window_ActorCommand['prototype'][_0x5d4113(0x7e2)],Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x7e2)]=function(_0xb1fe6d){const _0x188d23=_0x5d4113;VisuMZ[_0x188d23(0x710)][_0x188d23(0xc71)][_0x188d23(0x701)](this,_0xb1fe6d),this['createCommandNameWindow'](_0xb1fe6d);},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x1d5)]=function(_0x2ae9bb){const _0x4b6527=_0x5d4113,_0x568acc=new Rectangle(0x0,0x0,_0x2ae9bb['width'],_0x2ae9bb[_0x4b6527(0x6ce)]);this[_0x4b6527(0x6b0)]=new Window_Base(_0x568acc),this[_0x4b6527(0x6b0)][_0x4b6527(0x380)]=0x0,this[_0x4b6527(0x9fd)](this[_0x4b6527(0x6b0)]),this['updateCommandNameWindow']();},Window_ActorCommand[_0x5d4113(0x44d)]['callUpdateHelp']=function(){const _0xefd828=_0x5d4113;Window_Command[_0xefd828(0x44d)][_0xefd828(0x398)]['call'](this);if(this[_0xefd828(0x6b0)])this['updateCommandNameWindow']();},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0xc2f)]=function(){const _0x5931ba=_0x5d4113,_0x1fc426=this[_0x5931ba(0x6b0)];_0x1fc426['contents'][_0x5931ba(0x192)]();const _0x15dddf=this[_0x5931ba(0xb09)](this[_0x5931ba(0x288)]());if(_0x15dddf===_0x5931ba(0x989)&&this[_0x5931ba(0xb8c)]()>0x0){const _0x2d6131=this[_0x5931ba(0x98e)](this[_0x5931ba(0x288)]());let _0x3a656e=this['commandName'](this[_0x5931ba(0x288)]());_0x3a656e=_0x3a656e['replace'](/\\I\[(\d+)\]/gi,''),_0x1fc426[_0x5931ba(0x2fc)](),this[_0x5931ba(0x41c)](_0x3a656e,_0x2d6131),this[_0x5931ba(0xbc7)](_0x3a656e,_0x2d6131),this[_0x5931ba(0xa85)](_0x3a656e,_0x2d6131);}},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x41c)]=function(_0x324f29,_0x56b2b3){},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0xbc7)]=function(_0x220472,_0x3842b4){const _0xe6ab67=_0x5d4113,_0x4ca6fc=this[_0xe6ab67(0x6b0)];_0x4ca6fc['drawText'](_0x220472,0x0,_0x3842b4['y'],_0x4ca6fc[_0xe6ab67(0xa05)],_0xe6ab67(0x4d5));},Window_ActorCommand['prototype'][_0x5d4113(0xa85)]=function(_0x2faa3a,_0x2c9e2c){const _0x41c45e=_0x5d4113,_0x1534f7=this['_commandNameWindow'],_0x83419a=$gameSystem[_0x41c45e(0x1e2)](),_0x2cb403=_0x2c9e2c['x']+Math[_0x41c45e(0xa63)](_0x2c9e2c[_0x41c45e(0x61e)]/0x2)+_0x83419a;_0x1534f7['x']=_0x1534f7[_0x41c45e(0x61e)]/-0x2+_0x2cb403,_0x1534f7['y']=Math['floor'](_0x2c9e2c['height']/0x2);},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x4b7)]=function(){const _0x53b4d3=_0x5d4113;if(!this[_0x53b4d3(0x493)])return;const _0x53cca7=this[_0x53b4d3(0x493)][_0x53b4d3(0x6e4)]();for(const _0x4caa0d of _0x53cca7){this[_0x53b4d3(0x6d8)](_0x4caa0d[_0x53b4d3(0x6d1)]()[_0x53b4d3(0xacb)]());}},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x6d8)]=function(_0x10f825){const _0x2b3b7a=_0x5d4113;_0x10f825===_0x2b3b7a(0x384)&&this['addAttackCommand']();[_0x2b3b7a(0x798),_0x2b3b7a(0x7d8)][_0x2b3b7a(0x4b0)](_0x10f825)&&(_0x2b3b7a(0x7b2)!==_0x2b3b7a(0x1c5)?this[_0x2b3b7a(0x59a)]():this[_0x2b3b7a(0x1b8)]=_0x33a6c5);_0x10f825===_0x2b3b7a(0xc84)&&this[_0x2b3b7a(0xc41)]();_0x10f825===_0x2b3b7a(0xc50)&&this[_0x2b3b7a(0x93a)]();_0x10f825===_0x2b3b7a(0x722)&&this[_0x2b3b7a(0x4b1)]();_0x10f825===_0x2b3b7a(0xc4a)&&this['addAutoBattleCommand']();if(_0x10f825['match'](/STYPE: (\d+)/i)){const _0x186998=Number(RegExp['$1']);this[_0x2b3b7a(0x668)](_0x186998);}else{if(_0x10f825['match'](/STYPE: (.*)/i)){const _0x4ef935=DataManager[_0x2b3b7a(0x54e)](RegExp['$1']);this[_0x2b3b7a(0x668)](_0x4ef935);}}_0x10f825==='ALL\x20SKILLS'&&(_0x2b3b7a(0x338)===_0x2b3b7a(0x338)?this[_0x2b3b7a(0x3bc)]():_0x18e90e[_0x2b3b7a(0x2ce)](_0x2b3b7a(0xbf7),_0x2a483f));if(_0x10f825[_0x2b3b7a(0xb51)](/SKILL: (\d+)/i)){const _0x556c10=Number(RegExp['$1']);this[_0x2b3b7a(0xa23)]($dataSkills[_0x556c10]);}else{if(_0x10f825[_0x2b3b7a(0xb51)](/SKILL: (.*)/i)){if('zEssV'!==_0x2b3b7a(0x8af))this[_0x2b3b7a(0x2f4)]=_0x2b3b7a(0x32e);else{const _0xdb6996=DataManager[_0x2b3b7a(0x8e7)](RegExp['$1']);this[_0x2b3b7a(0xa23)]($dataSkills[_0xdb6996]);}}}if(_0x10f825===_0x2b3b7a(0x2b5)&&Imported[_0x2b3b7a(0x1a7)]){if('aoliP'!==_0x2b3b7a(0x814))this[_0x2b3b7a(0x3e1)]();else return _0x3b6af5(_0x1d02c3['$1']);}[_0x2b3b7a(0xb4a),_0x2b3b7a(0xb8f)]['includes'](_0x10f825)&&Imported[_0x2b3b7a(0x2bd)]&&this[_0x2b3b7a(0x9ab)]();if(_0x10f825===_0x2b3b7a(0xaa8)&&Imported[_0x2b3b7a(0x8cc)]){if(_0x2b3b7a(0x56d)!==_0x2b3b7a(0x56d)){const _0xeca070=this[_0x2b3b7a(0x98e)](_0x4fb6f8),_0x282826=this[_0x2b3b7a(0xb18)](_0x2ea699),_0x3d2797=this[_0x2b3b7a(0x2a1)](_0x282826)[_0x2b3b7a(0x61e)];this[_0x2b3b7a(0xbe8)](this[_0x2b3b7a(0x1af)](_0x4c9152));const _0x51cf65=this[_0x2b3b7a(0x57a)]();if(_0x51cf65===_0x2b3b7a(0x87b))this[_0x2b3b7a(0x8ca)](_0x282826,_0xeca070['x']+_0xeca070[_0x2b3b7a(0x61e)]-_0x3d2797,_0xeca070['y'],_0x3d2797);else{if(_0x51cf65===_0x2b3b7a(0x4d5)){const _0x1c637a=_0xeca070['x']+_0x7aa27a['floor']((_0xeca070['width']-_0x3d2797)/0x2);this[_0x2b3b7a(0x8ca)](_0x282826,_0x1c637a,_0xeca070['y'],_0x3d2797);}else this[_0x2b3b7a(0x8ca)](_0x282826,_0xeca070['x'],_0xeca070['y'],_0x3d2797);}}else this[_0x2b3b7a(0x245)](!![]);}},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x470)]=function(){const _0x1652a7=_0x5d4113,_0x493030=$dataSkills[this[_0x1652a7(0x493)][_0x1652a7(0x515)]()];if(!_0x493030)return;if(!this[_0x1652a7(0x86b)](_0x493030))return;const _0xaca045=this[_0x1652a7(0xabe)](),_0x5af1db=DataManager[_0x1652a7(0xa75)](_0x493030),_0x24d753=DataManager[_0x1652a7(0x1b1)](_0x493030),_0xebb289=_0xaca045===_0x1652a7(0x5ae)?_0x5af1db:'\x5cI[%1]%2'[_0x1652a7(0x85d)](_0x24d753,_0x5af1db);this['addCommand'](_0xebb289,_0x1652a7(0x5eb),this[_0x1652a7(0x493)][_0x1652a7(0xae6)]());},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0xc41)]=function(){const _0x2c388b=_0x5d4113,_0x30605c=$dataSkills[this[_0x2c388b(0x493)][_0x2c388b(0xa9f)]()];if(!_0x30605c)return;if(!this[_0x2c388b(0x86b)](_0x30605c))return;const _0xd8ca56=this['commandStyle'](),_0x4bdf51=DataManager[_0x2c388b(0xa75)](_0x30605c),_0x47e046=DataManager['battleCommandIcon'](_0x30605c),_0x4f1adc=_0xd8ca56===_0x2c388b(0x5ae)?_0x4bdf51:'\x5cI[%1]%2'['format'](_0x47e046,_0x4bdf51);this['addCommand'](_0x4f1adc,'guard',this['_actor'][_0x2c388b(0x3a0)]());},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x93a)]=function(){const _0x6d14fb=_0x5d4113,_0x5660ff=this[_0x6d14fb(0xabe)](),_0x8b4f2c=VisuMZ[_0x6d14fb(0x710)][_0x6d14fb(0x326)][_0x6d14fb(0xbfc)][_0x6d14fb(0xc58)],_0x496b5b=_0x5660ff===_0x6d14fb(0x5ae)?TextManager[_0x6d14fb(0x441)]:_0x6d14fb(0x4a8)['format'](_0x8b4f2c,TextManager[_0x6d14fb(0x441)]),_0x580441=this[_0x6d14fb(0x239)]();this[_0x6d14fb(0x774)](_0x496b5b,'item',_0x580441);},Window_ActorCommand['prototype']['isItemCommandEnabled']=function(){const _0x2fa10e=_0x5d4113;return this[_0x2fa10e(0x493)]&&this[_0x2fa10e(0x493)][_0x2fa10e(0x59e)]();},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x59a)]=function(){const _0x4c3309=_0x5d4113,_0x3fb4b7=this['_actor']['skillTypes']();for(const _0x41a43d of _0x3fb4b7){_0x4c3309(0x147)!==_0x4c3309(0x147)?_0x2009ec[_0x4c3309(0x710)][_0x4c3309(0x326)][_0x4c3309(0xc03)][_0x4c3309(0x34f)]?_0x303449[_0x4c3309(0x710)][_0x4c3309(0x326)][_0x4c3309(0xc03)]['HomePosJS'][_0x4c3309(0x701)](this,_0x2c3ac7):_0x4316e1[_0x4c3309(0x710)]['Sprite_Actor_setActorHome'][_0x4c3309(0x701)](this,_0x250a51):this['addSkillTypeCommand'](_0x41a43d);}},Window_ActorCommand[_0x5d4113(0x44d)]['addSkillTypeCommand']=function(_0x2dab87){const _0xbc9a38=_0x5d4113;let _0x3721f1=$dataSystem[_0xbc9a38(0x32a)][_0x2dab87];if(!_0x3721f1)return;let _0x20596d=_0x3721f1;const _0x4158cc=this['commandStyle']();if(_0x4158cc===_0xbc9a38(0x5ae))_0x20596d=_0x20596d[_0xbc9a38(0xc9e)](/\x1I\[(\d+)\]/gi,''),_0x20596d=_0x20596d[_0xbc9a38(0xc9e)](/\\I\[(\d+)\]/gi,'');else{if(!_0x3721f1[_0xbc9a38(0xb51)](/\\I\[(\d+)\]/i)){if(_0xbc9a38(0x2f9)!=='KLJTO')_0x3478d5=(_0x1608a7+_0x1e68ef)/0x2,_0x3f2fdb=-0x1;else{const _0x1254c1=Imported['VisuMZ_1_SkillsStatesCore']?VisuMZ[_0xbc9a38(0x601)][_0xbc9a38(0x326)][_0xbc9a38(0x780)]:VisuMZ[_0xbc9a38(0x710)]['Settings'][_0xbc9a38(0xbfc)],_0x229332=$dataSystem['magicSkills'][_0xbc9a38(0x4b0)](_0x2dab87),_0x17fb2b=_0x229332?_0x1254c1[_0xbc9a38(0xc09)]:_0x1254c1[_0xbc9a38(0x2fd)];_0x20596d=_0xbc9a38(0x4a8)['format'](_0x17fb2b,_0x3721f1);}}}this[_0xbc9a38(0x774)](_0x20596d,_0xbc9a38(0x54a),!![],_0x2dab87);},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x3bc)]=function(){const _0x5c47fd=_0x5d4113,_0x2e7b04=this[_0x5c47fd(0x493)][_0x5c47fd(0x32a)](),_0x168633=this[_0x5c47fd(0x493)][_0x5c47fd(0xc8a)]();for(const _0x151e1f of _0x168633){if(!_0x151e1f)continue;if(Imported[_0x5c47fd(0x6ee)]){if(this[_0x5c47fd(0x95b)](_0x151e1f))continue;if(this[_0x5c47fd(0x695)](_0x151e1f))continue;}else{if(!_0x2e7b04[_0x5c47fd(0x4b0)](_0x151e1f[_0x5c47fd(0x598)])){if(_0x5c47fd(0x5af)===_0x5c47fd(0x5af))continue;else return _0x2eb4f8[_0x5c47fd(0x710)][_0x5c47fd(0x326)]['Mechanics']['AllowRandomSpeed'];}}this['addSingleSkillCommand'](_0x151e1f);}},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x95b)]=function(_0x3ef019){const _0x59a817=_0x5d4113,_0x5dda0c=this['_actor'][_0x59a817(0x32a)](),_0x5b0a22=_0x5dda0c[_0x59a817(0x475)](_0x4fef9f=>DataManager[_0x59a817(0x202)](_0x3ef019)[_0x59a817(0x4b0)](_0x4fef9f));return _0x5b0a22[_0x59a817(0x7da)]<=0x0;},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x695)]=function(_0x5b242d){const _0x53b105=_0x5d4113;if(Imported[_0x53b105(0x6ee)]){if(_0x53b105(0x812)!==_0x53b105(0x3b0)){if(VisuMZ['SkillsStatesCore']['version']>=1.24){if(this[_0x53b105(0x493)]){if(!VisuMZ[_0x53b105(0x601)]['CheckVisibleBattleNotetags'](this[_0x53b105(0x493)],_0x5b242d))return!![];if(!VisuMZ[_0x53b105(0x601)][_0x53b105(0x315)](this['_actor'],_0x5b242d))return!![];if(!VisuMZ[_0x53b105(0x601)][_0x53b105(0x609)](this['_actor'],_0x5b242d))return!![];}}else{if(_0x53b105(0xc6a)!==_0x53b105(0x1c7)){if(!Window_SkillList[_0x53b105(0x44d)][_0x53b105(0x80e)]['call'](this,_0x5b242d))return!![];if(!Window_SkillList['prototype'][_0x53b105(0x97d)][_0x53b105(0x701)](this,_0x5b242d))return!![];if(!Window_SkillList[_0x53b105(0x44d)]['checkShowHideSkillNotetags'][_0x53b105(0x701)](this,_0x5b242d))return!![];}else{if(!_0x15eff4[_0x53b105(0x2ab)]())return;const _0x4c0c1a=_0x4a7352[_0x53b105(0x7c2)];_0x4c0c1a[_0x53b105(0xae8)]();}}}else{if(!_0x33bd34)return 0x0;let _0x3680d9=0x0;const _0x28c393=_0x2e935e[_0x53b105(0x80a)];return _0x28c393[_0x53b105(0xb51)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x3680d9+=_0x4010f3(_0x41ba2a['$1'])),_0x28c393[_0x53b105(0xb51)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x3680d9+=_0x278bd8(_0x320150['$2'])),_0x3680d9;}}return![];},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0xa23)]=function(_0x2a2af7){const _0xb66277=_0x5d4113;if(!_0x2a2af7)return;if(!this[_0xb66277(0x86b)](_0x2a2af7))return;const _0x200a43=this[_0xb66277(0xabe)](),_0x284fcd=DataManager['battleCommandName'](_0x2a2af7),_0x32c915=DataManager[_0xb66277(0x1b1)](_0x2a2af7),_0x76dced=_0x200a43===_0xb66277(0x5ae)?_0x284fcd:_0xb66277(0x4a8)[_0xb66277(0x85d)](_0x32c915,_0x284fcd),_0x279510=this[_0xb66277(0x493)][_0xb66277(0x72a)](_0x2a2af7);this[_0xb66277(0x774)](_0x76dced,_0xb66277(0x510),_0x279510,_0x2a2af7['id']);},Window_ActorCommand[_0x5d4113(0x44d)]['canAddSkillCommand']=function(_0x3bc838){const _0x4db36a=_0x5d4113,_0x1be508=_0x3bc838[_0x4db36a(0x80a)];if(_0x1be508[_0x4db36a(0xb51)](/<COMMAND REQUIRE LEARN>/i)){if(_0x4db36a(0x925)!==_0x4db36a(0x925))_0x547838=!_0x2763ac;else{if(!this[_0x4db36a(0x493)][_0x4db36a(0x3dd)](_0x3bc838['id']))return![];}}if(_0x1be508['match'](/<COMMAND REQUIRE ACCESS>/i)){if(_0x4db36a(0x994)!=='HMygj')_0x381dc9=this['svBattlerData']()[_0x4db36a(0xaec)]||0x0;else{if(!this[_0x4db36a(0x493)]['hasSkill'](_0x3bc838['id']))return![];}}const _0x53ba04=VisuMZ[_0x4db36a(0x710)][_0x4db36a(0x978)](_0x3bc838,'CommandVisible');if(VisuMZ[_0x4db36a(0x710)]['JS'][_0x53ba04]){if(!VisuMZ[_0x4db36a(0x710)]['JS'][_0x53ba04][_0x4db36a(0x701)](this,this[_0x4db36a(0x493)],_0x3bc838))return![];}return VisuMZ[_0x4db36a(0x710)]['CheckSkillCommandShowSwitches'](_0x3bc838);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xbbe)]=function(_0x27d3e8){const _0x5ef7a0=_0x5d4113,_0x5f22c9=_0x27d3e8[_0x5ef7a0(0x80a)];if(_0x5f22c9[_0x5ef7a0(0xb51)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x2c993b=JSON[_0x5ef7a0(0xc11)]('['+RegExp['$1'][_0x5ef7a0(0xb51)](/\d+/g)+']');for(const _0xaa122d of _0x2c993b){if('yxYDm'!==_0x5ef7a0(0x336)){if(!_0x355d97[_0x5ef7a0(0x9f8)]())return;const _0x968c5b=this[_0x5ef7a0(0x3ee)]();if(!_0x968c5b)return;_0x968c5b['startOpacity'](_0x27080d,_0x5e5dae,_0x4c59dc);}else{if(!$gameSwitches[_0x5ef7a0(0x6b7)](_0xaa122d))return![];}}return!![];}if(_0x5f22c9[_0x5ef7a0(0xb51)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x450444=JSON['parse']('['+RegExp['$1'][_0x5ef7a0(0xb51)](/\d+/g)+']');for(const _0x49b6db of _0x450444){if(_0x5ef7a0(0x5fe)!==_0x5ef7a0(0x5fe))_0x4db4f4+=_0x4027a9[_0x5ef7a0(0xc03)]['OffsetX']||0x0,_0x1cc993+=_0xdb1df4['Actor'][_0x5ef7a0(0x191)]||0x0;else{if(!$gameSwitches[_0x5ef7a0(0x6b7)](_0x49b6db))return![];}}return!![];}if(_0x5f22c9[_0x5ef7a0(0xb51)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x407d24=JSON['parse']('['+RegExp['$1'][_0x5ef7a0(0xb51)](/\d+/g)+']');for(const _0x85e558 of _0x407d24){if(_0x5ef7a0(0x1fc)!==_0x5ef7a0(0x1fc))return this[_0x5ef7a0(0x42a)]=this[_0x5ef7a0(0x42a)]||_0x645d10['prototype'][_0x5ef7a0(0x950)]()||0x24,this['_lineHeight']*0x4;else{if($gameSwitches[_0x5ef7a0(0x6b7)](_0x85e558))return!![];}}return![];}if(_0x5f22c9[_0x5ef7a0(0xb51)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4debdd=JSON[_0x5ef7a0(0xc11)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x18eaba of _0x4debdd){if('oqKxW'!==_0x5ef7a0(0x824)){if(!$gameSwitches[_0x5ef7a0(0x6b7)](_0x18eaba))return!![];}else _0x2814e3['scope']=_0x375d87(_0x2daa04['$1'])['toUpperCase']()['trim']();}return![];}if(_0x5f22c9[_0x5ef7a0(0xb51)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x5ef7a0(0x5c3)==='uwNyO')return _0x295092(_0x1eb2f5['$1']);else{const _0x3ec826=JSON[_0x5ef7a0(0xc11)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x28aaac of _0x3ec826){if('GRDKn'!==_0x5ef7a0(0x91a)){if(!$gameSwitches[_0x5ef7a0(0x6b7)](_0x28aaac))return!![];}else{if(this[_0x5ef7a0(0x795)]>0x0){const _0xc988ff=this[_0x5ef7a0(0x795)],_0xa218c0=this['_borderPortraitSprite'];_0xa218c0['x']=(_0xa218c0['x']*(_0xc988ff-0x1)+this[_0x5ef7a0(0x6c0)])/_0xc988ff,_0xa218c0[_0x5ef7a0(0x380)]=(_0xa218c0[_0x5ef7a0(0x380)]*(_0xc988ff-0x1)+0xff)/_0xc988ff,this[_0x5ef7a0(0x795)]--;}}}return![];}}if(_0x5f22c9[_0x5ef7a0(0xb51)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x5ef7a0(0x72c)==='XemyI')this['_distortionSprite']['addChild'](this['_mainSprite']);else{const _0x2d2acb=JSON['parse']('['+RegExp['$1'][_0x5ef7a0(0xb51)](/\d+/g)+']');for(const _0x3a74bd of _0x2d2acb){if(_0x5ef7a0(0x5fa)!==_0x5ef7a0(0xbd7)){if($gameSwitches[_0x5ef7a0(0x6b7)](_0x3a74bd))return![];}else _0x42fdda[_0x5ef7a0(0x80a)]+=_0x5ef7a0(0x8a0);}return!![];}}return!![];},Window_ActorCommand['prototype'][_0x5d4113(0x4b1)]=function(){const _0x38540f=_0x5d4113,_0x27d80a=this[_0x38540f(0xabe)](),_0x5cef3c=VisuMZ[_0x38540f(0x710)][_0x38540f(0x326)][_0x38540f(0x9c4)][_0x38540f(0xc2d)],_0x46c1a8=_0x27d80a===_0x38540f(0x5ae)?TextManager[_0x38540f(0x382)]:_0x38540f(0x4a8)['format'](_0x5cef3c,TextManager[_0x38540f(0x382)]),_0x1b1980=this[_0x38540f(0x922)]();this[_0x38540f(0x774)](_0x46c1a8,_0x38540f(0x382),_0x1b1980);},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x922)]=function(){return BattleManager['canEscape']();},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x421)]=function(){const _0x5f0e15=_0x5d4113,_0x4fc60b=this[_0x5f0e15(0xabe)](),_0x6d949e=VisuMZ[_0x5f0e15(0x710)]['Settings'][_0x5f0e15(0x9c4)]['CmdIconAutoBattle'],_0x46af0a=_0x4fc60b===_0x5f0e15(0x5ae)?TextManager[_0x5f0e15(0x8b3)]:_0x5f0e15(0x4a8)['format'](_0x6d949e,TextManager[_0x5f0e15(0x8b3)]),_0x13893b=this['isAutoBattleCommandEnabled']();this['addCommand'](_0x46af0a,_0x5f0e15(0x8b3),_0x13893b);},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x9ca)]=function(){return!![];},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x57a)]=function(){const _0x84c62a=_0x5d4113;return VisuMZ[_0x84c62a(0x710)]['Settings'][_0x84c62a(0xbfc)][_0x84c62a(0x6ff)];},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0xc88)]=function(_0x35042e){const _0x3e8db1=_0x5d4113,_0x4c1208=this['commandStyleCheck'](_0x35042e);if(_0x4c1208==='iconText')this[_0x3e8db1(0x3e7)](_0x35042e);else{if(_0x4c1208===_0x3e8db1(0x989)){if(_0x3e8db1(0x6ae)===_0x3e8db1(0x958))return;else this[_0x3e8db1(0x58d)](_0x35042e);}else Window_Command[_0x3e8db1(0x44d)][_0x3e8db1(0xc88)][_0x3e8db1(0x701)](this,_0x35042e);}this['drawSingleSkillCost'](_0x35042e);},Window_ActorCommand[_0x5d4113(0x44d)]['commandStyle']=function(){const _0x2bffe2=_0x5d4113;return VisuMZ['BattleCore']['Settings'][_0x2bffe2(0xbfc)]['CmdStyle'];},Window_ActorCommand['prototype'][_0x5d4113(0xb09)]=function(_0x456c2f){const _0x3e017b=_0x5d4113;if(_0x456c2f<0x0)return _0x3e017b(0x5ae);const _0x1972ac=this[_0x3e017b(0xabe)]();if(_0x1972ac!==_0x3e017b(0x9ee))return _0x1972ac;else{if(this[_0x3e017b(0xb8c)]()>0x0){const _0x3639b4=this['commandName'](_0x456c2f);if(_0x3639b4['match'](/\\I\[(\d+)\]/i)){if(_0x3e017b(0x613)!==_0x3e017b(0x881)){const _0x334aa9=this['itemLineRect'](_0x456c2f),_0xb2b08=this[_0x3e017b(0x2a1)](_0x3639b4)[_0x3e017b(0x61e)];return _0xb2b08<=_0x334aa9[_0x3e017b(0x61e)]?_0x3e017b(0xa47):_0x3e017b(0x989);}else return _0x13cb1c(_0x505038['$1'])[_0x3e017b(0x3d8)](/[\r\n]+/);}}}return'text';},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x3e7)]=function(_0x42c611){const _0x2039c5=_0x5d4113,_0xc02a84=this['itemLineRect'](_0x42c611),_0x22f607=this[_0x2039c5(0xb18)](_0x42c611),_0x580ece=this['textSizeEx'](_0x22f607)['width'];this['changePaintOpacity'](this[_0x2039c5(0x1af)](_0x42c611));const _0x41e2a3=this['itemTextAlign']();if(_0x41e2a3===_0x2039c5(0x87b))_0x2039c5(0x554)===_0x2039c5(0x554)?this[_0x2039c5(0x8ca)](_0x22f607,_0xc02a84['x']+_0xc02a84[_0x2039c5(0x61e)]-_0x580ece,_0xc02a84['y'],_0x580ece):_0x42ff03+=_0x39e451;else{if(_0x41e2a3===_0x2039c5(0x4d5)){if(_0x2039c5(0x3de)==='IfJXd')return _0x2e7c9e[_0x2039c5(0x710)]['Game_Action_needsSelection'][_0x2039c5(0x701)](this);else{const _0x24eece=_0xc02a84['x']+Math[_0x2039c5(0xa63)]((_0xc02a84['width']-_0x580ece)/0x2);this[_0x2039c5(0x8ca)](_0x22f607,_0x24eece,_0xc02a84['y'],_0x580ece);}}else this[_0x2039c5(0x8ca)](_0x22f607,_0xc02a84['x'],_0xc02a84['y'],_0x580ece);}},Window_ActorCommand[_0x5d4113(0x44d)]['drawItemStyleIcon']=function(_0xdee71b){const _0x4fa807=_0x5d4113;this['commandName'](_0xdee71b)[_0x4fa807(0xb51)](/\\I\[(\d+)\]/i);const _0x2c48ec=Number(RegExp['$1'])||0x0,_0x14bf15=this['itemLineRect'](_0xdee71b),_0x4ff4d1=_0x14bf15['x']+Math[_0x4fa807(0xa63)]((_0x14bf15[_0x4fa807(0x61e)]-ImageManager[_0x4fa807(0x706)])/0x2),_0x47d3f5=_0x14bf15['y']+(_0x14bf15['height']-ImageManager[_0x4fa807(0xa92)])/0x2;this[_0x4fa807(0xa60)](_0x2c48ec,_0x4ff4d1,_0x47d3f5);},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x69b)]=function(_0x13f3c1){const _0x33ded8=_0x5d4113;if(!(VisuMZ[_0x33ded8(0x710)][_0x33ded8(0x326)]['ActorCmd'][_0x33ded8(0x946)]??!![]))return;const _0x225522=this[_0x33ded8(0x363)](_0x13f3c1);if(![_0x33ded8(0x5eb),_0x33ded8(0x707),'singleSkill']['includes'](_0x225522))return;const _0x237631=this[_0x33ded8(0x98e)](_0x13f3c1);let _0x5c2964=null;if(_0x225522===_0x33ded8(0x5eb))_0x5c2964=$dataSkills[this['_actor']['attackSkillId']()];else{if(_0x225522===_0x33ded8(0x707)){if(_0x33ded8(0x647)!==_0x33ded8(0x647))return _0x240f86[_0x33ded8(0x2ab)]()?(_0x3e028a[_0x33ded8(0x5a4)][_0x33ded8(0xa9a)][_0x33ded8(0x67a)](_0x4e876b[0x0],_0x20b0af[0x1]),!![]):_0x23915d[_0x33ded8(0x710)][_0x33ded8(0x4a9)]['call'](this,_0x49434e);else _0x5c2964=$dataSkills[this[_0x33ded8(0x493)][_0x33ded8(0xa9f)]()];}else _0x5c2964=$dataSkills[this['_list'][_0x13f3c1]['ext']];}this[_0x33ded8(0x5f5)](this['_actor'],_0x5c2964,_0x237631['x'],_0x237631['y'],_0x237631[_0x33ded8(0x61e)]);},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x5f5)]=function(_0x3068c6,_0x366397,_0x5ce173,_0x4a8583,_0x216d6a){const _0x46caf9=_0x5d4113;if(!_0x366397)return;if(Imported[_0x46caf9(0x6ee)]){if(_0x46caf9(0x1b2)!=='DFvfh')for(const _0x18526c of _0x175859){for(const _0x3222f3 of _0x36e0db){const _0x1c8a20=_0x431c24[0x0][_0x46caf9(0x85d)](_0x3222f3[0x0],_0x18526c[0x0]),_0x49204a=_0x50f65f[0x1][_0x46caf9(0x85d)](_0x3222f3[0x1],_0x18526c[0x1])[_0x46caf9(0xacb)](),_0x509496=new _0x2d76a8(_0x42d4e6[_0x46caf9(0x85d)](_0x49204a),'i');_0x53b14a[_0x1c8a20]=_0x509496;}}else Window_Command[_0x46caf9(0x44d)][_0x46caf9(0x5f5)][_0x46caf9(0x701)](this,_0x3068c6,_0x366397,_0x5ce173,_0x4a8583,_0x216d6a);}else Window_SkillList[_0x46caf9(0x44d)]['drawSkillCost']['call'](this,_0x366397,_0x5ce173,_0x4a8583,_0x216d6a);},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x712)]=function(){},Window_ActorCommand[_0x5d4113(0x44d)]['activate']=function(){const _0x34bf06=_0x5d4113;Window_Command[_0x34bf06(0x44d)]['activate'][_0x34bf06(0x701)](this);const _0x1320a9=this[_0x34bf06(0x30c)]();_0x1320a9===_0x34bf06(0xc3e)&&this[_0x34bf06(0x234)]();},Window_ActorCommand[_0x5d4113(0x44d)]['battleLayoutStyle']=function(){const _0x1f3959=_0x5d4113;if(this['_battleLayoutStyle'])return this[_0x1f3959(0xa20)];return this[_0x1f3959(0xa20)]=SceneManager[_0x1f3959(0x5a4)]['battleLayoutStyle'](),this['_battleLayoutStyle'];},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xc66)]=Window_ActorCommand[_0x5d4113(0x44d)]['setup'],Window_ActorCommand[_0x5d4113(0x44d)]['setup']=function(_0x2f0fd3){const _0x404e9d=_0x5d4113,_0x247852=this[_0x404e9d(0x30c)]();if(_0x2f0fd3&&['xp',_0x404e9d(0x453)][_0x404e9d(0x4b0)](_0x247852))this[_0x404e9d(0x983)](_0x2f0fd3);else _0x2f0fd3&&[_0x404e9d(0xc3e)][_0x404e9d(0x4b0)](_0x247852)&&(_0x404e9d(0x979)!==_0x404e9d(0x979)?this[_0x404e9d(0xa9a)][_0x404e9d(0x5fb)]():(this[_0x404e9d(0xc5d)](_0x2f0fd3),this['showHelpWindow']()));VisuMZ[_0x404e9d(0x710)][_0x404e9d(0xc66)][_0x404e9d(0x701)](this,_0x2f0fd3),_0x2f0fd3&&$gameTroop['aliveMembers']()[_0x404e9d(0x7da)]>0x0&&_0x2f0fd3['battler']()&&(_0x404e9d(0x8e6)==='Cvaon'?this[_0x404e9d(0x2ce)]('performRecovery',_0x2f6e04):_0x2f0fd3[_0x404e9d(0x3ee)]()['stepForward']());},Window_ActorCommand['prototype'][_0x5d4113(0x983)]=function(_0x34eaff){const _0x53bb7b=_0x5d4113,_0x42dd18=Math['round'](Graphics['boxWidth']/0x3),_0x32b6bd=Math['round'](Graphics[_0x53bb7b(0xbb8)]/$gameParty[_0x53bb7b(0xc0c)]()[_0x53bb7b(0x7da)]),_0x4c2b21=Math[_0x53bb7b(0x15d)](_0x42dd18,_0x32b6bd),_0x5c6f68=this[_0x53bb7b(0x460)](VisuMZ['BattleCore'][_0x53bb7b(0x326)][_0x53bb7b(0x18b)][_0x53bb7b(0x4ce)]),_0x57b154=Math[_0x53bb7b(0xb50)](_0x32b6bd*_0x34eaff[_0x53bb7b(0x288)]())+Math[_0x53bb7b(0xb50)]((_0x32b6bd-_0x4c2b21)/0x2),_0xab1fe9=Math['round'](SceneManager[_0x53bb7b(0x5a4)]['_statusWindow']['y']-_0x5c6f68);this['move'](_0x57b154,_0xab1fe9,_0x4c2b21,_0x5c6f68),this[_0x53bb7b(0x15e)](),this[_0x53bb7b(0x30b)](0x1);},Window_ActorCommand['prototype'][_0x5d4113(0xc5d)]=function(_0xcd0485){const _0x5cebcc=_0x5d4113,_0x17f93d=SceneManager[_0x5cebcc(0x5a4)][_0x5cebcc(0x75d)]();this[_0x5cebcc(0xbc9)](_0x17f93d['x'],_0x17f93d['y'],_0x17f93d[_0x5cebcc(0x61e)],_0x17f93d[_0x5cebcc(0x6ce)]),this[_0x5cebcc(0x15e)](),this[_0x5cebcc(0x30b)](0x0);},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x79d)]=function(){const _0x2c1ed4=_0x5d4113;if(this[_0x2c1ed4(0x291)]){if(_0x2c1ed4(0x62b)!==_0x2c1ed4(0x62b)){if(!_0x378342[_0x2c1ed4(0x9f8)]())return;const _0x20c1c5=this['battler'](),_0x55dd45=_0x377af6['battler']();if(!_0x20c1c5||!_0x55dd45)return;const _0xc3b945=_0x55dd45[_0x2c1ed4(0x8bf)],_0x505ad1=_0x55dd45['_baseY'];this['moveBattlerToPoint'](_0xc3b945,_0x505ad1,0x0,![],_0x2c1ed4(0x1ab),-0x1),_0x20c1c5[_0x2c1ed4(0xa88)]();const _0x32f2c4=_0x35fcb9['BattleCore']['Settings'][_0x2c1ed4(0x998)];let _0x1c3517=(_0x55dd45[_0x2c1ed4(0x61e)]+_0x20c1c5[_0x2c1ed4(0x61e)])/0x2;_0x1c3517*=this['isActor']()?0x1:-0x1;let _0xd97192=_0x32f2c4[_0x2c1ed4(0x952)]*(this[_0x2c1ed4(0xa65)]()?0x1:-0x1);_0x3dde9f[_0x2c1ed4(0x680)](_0x1c3517,_0xd97192,0x0,![],'Linear'),_0x55dd45['updatePosition']();}else{const _0x34ef66=this[_0x2c1ed4(0x291)][_0x2c1ed4(0x432)],_0x58be19=this[_0x2c1ed4(0x61e)]-0x8,_0xeb907e=this[_0x2c1ed4(0x6ce)],_0x5a1522=this[_0x2c1ed4(0x31a)],_0x4f7ef3=ColorManager[_0x2c1ed4(0xa6d)](),_0x23f194=ColorManager[_0x2c1ed4(0x13f)]();this[_0x2c1ed4(0x291)]['x']=0x4,_0x34ef66[_0x2c1ed4(0x504)](_0x58be19,_0xeb907e),_0x34ef66[_0x2c1ed4(0x7e4)](0x0,0x0,_0x58be19,_0x5a1522,_0x23f194,_0x4f7ef3,!![]),_0x34ef66['fillRect'](0x0,_0x5a1522,_0x58be19,_0xeb907e-_0x5a1522*0x2,_0x4f7ef3),_0x34ef66[_0x2c1ed4(0x7e4)](0x0,_0xeb907e-_0x5a1522,_0x58be19,_0x5a1522,_0x4f7ef3,_0x23f194,!![]),this[_0x2c1ed4(0x291)][_0x2c1ed4(0x5bd)](0x0,0x0,_0x58be19,_0xeb907e);}}},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x715)]=function(){const _0x52d3ff=_0x5d4113;if(!this['_actor'])return;const _0x16b3fe=VisuMZ[_0x52d3ff(0x710)][_0x52d3ff(0x326)][_0x52d3ff(0xbfc)],_0xc1446c=this[_0x52d3ff(0x355)]();switch(_0xc1446c){case'attack':this[_0x52d3ff(0x44a)]($dataSkills[this[_0x52d3ff(0x493)][_0x52d3ff(0x515)]()]);break;case _0x52d3ff(0x707):this['setHelpWindowItem']($dataSkills[this[_0x52d3ff(0x493)]['guardSkillId']()]);break;case _0x52d3ff(0x54a):const _0x37c6c5=_0x16b3fe[_0x52d3ff(0xa3a)],_0x59cf50=_0x37c6c5['format']($dataSystem[_0x52d3ff(0x32a)][this[_0x52d3ff(0x485)]()]);this[_0x52d3ff(0xc0a)]['setText'](_0x59cf50);break;case _0x52d3ff(0x510):this[_0x52d3ff(0x44a)]($dataSkills[this[_0x52d3ff(0x485)]()]);break;case _0x52d3ff(0x441):this[_0x52d3ff(0xc0a)][_0x52d3ff(0x7e3)](_0x16b3fe[_0x52d3ff(0xa53)]);break;case _0x52d3ff(0x382):this['_helpWindow'][_0x52d3ff(0x7e3)](_0x16b3fe[_0x52d3ff(0xa8a)]);break;case'autoBattle':this['_helpWindow']['setText'](_0x16b3fe['HelpAutoBattle']);break;default:this[_0x52d3ff(0xc0a)][_0x52d3ff(0x7e3)]('');break;}},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0x659)]=function(){const _0x1ade89=_0x5d4113;this[_0x1ade89(0x5c0)](0x0);if(this[_0x1ade89(0x493)]&&ConfigManager[_0x1ade89(0x74c)]){if(_0x1ade89(0xb35)===_0x1ade89(0xb35)){const _0x290b39=this[_0x1ade89(0x493)][_0x1ade89(0xbfe)]();this[_0x1ade89(0xc51)](_0x290b39);if(_0x290b39===_0x1ade89(0x54a)){const _0x535e9a=this[_0x1ade89(0x493)]['lastBattleSkill']();if(_0x535e9a){if(_0x1ade89(0x16a)!==_0x1ade89(0x2ba)){const _0x1fda28=this[_0x1ade89(0xc64)](_0x1ade89(0x54a),_0x535e9a[_0x1ade89(0x598)]);this['select'](_0x1fda28||0x0);}else{if(!_0x2f3c2b['isSceneBattle']())return;if(!_0x21feb1[_0x1ade89(0x22e)])return;const _0x46499d=_0x5de0d6['_action'];if(!_0x46499d)return;_0x46499d['_battleCoreNoElement']=!![];}}}else{if(_0x290b39==='singleSkill'){const _0x465022=this[_0x1ade89(0x493)][_0x1ade89(0xab8)]();if(_0x465022){const _0x26f19e=this['findSymbolExt'](_0x1ade89(0x510),_0x465022['id']);this[_0x1ade89(0x1e5)](_0x26f19e||0x0);}}}}else{const _0x450db3=this[_0x1ade89(0x98e)](this[_0x1ade89(0x288)]());let _0x778e31=this[_0x1ade89(0xb18)](this[_0x1ade89(0x288)]());_0x778e31=_0x778e31['replace'](/\\I\[(\d+)\]/gi,''),_0x4798d3[_0x1ade89(0x2fc)](),this[_0x1ade89(0x41c)](_0x778e31,_0x450db3),this[_0x1ade89(0xbc7)](_0x778e31,_0x450db3),this['commandNameWindowCenter'](_0x778e31,_0x450db3);}}},Window_ActorCommand[_0x5d4113(0x44d)][_0x5d4113(0xc64)]=function(_0x1dd80e,_0x58f318){const _0x23a200=_0x5d4113;return this[_0x23a200(0x723)][_0x23a200(0x428)](_0x4cadf4=>_0x4cadf4[_0x23a200(0x628)]===_0x1dd80e&&_0x4cadf4[_0x23a200(0xc01)]===_0x58f318);},VisuMZ['BattleCore'][_0x5d4113(0xb3f)]=Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x7e2)],Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x7e2)]=function(_0x43f892){const _0x264c63=_0x5d4113;VisuMZ[_0x264c63(0x710)][_0x264c63(0xb3f)][_0x264c63(0x701)](this,_0x43f892),this[_0x264c63(0x1f9)](),this[_0x264c63(0x1a3)]();},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x30c)]=function(){const _0x40e477=_0x5d4113;if(this[_0x40e477(0xa20)])return this[_0x40e477(0xa20)];return this[_0x40e477(0xa20)]=SceneManager['_scene'][_0x40e477(0x30c)](),this[_0x40e477(0xa20)];},Window_BattleStatus['prototype']['initBattleCore']=function(){const _0x2908c9=_0x5d4113;this[_0x2908c9(0x3f4)]=this[_0x2908c9(0x2b2)]();const _0xba863d=VisuMZ[_0x2908c9(0x710)][_0x2908c9(0x326)][_0x2908c9(0x18b)];if(_0xba863d[_0x2908c9(0xc23)]){if('rCTcB'===_0x2908c9(0xb6d))return 0x1*this[_0x2908c9(0xa9c)];else this['opacity']=0x0;}},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x2b2)]=function(){const _0x528cdc=_0x5d4113,_0x55d37a=VisuMZ[_0x528cdc(0x710)][_0x528cdc(0x326)][_0x528cdc(0x18b)];if(_0x55d37a[_0x528cdc(0x509)]){if(_0x528cdc(0xba2)!==_0x528cdc(0xba2))_0x4aeefc+=_0x715ed1,_0x2f5ac1+=_0x31168e[_0x528cdc(0xa65)]()?-_0x4f53ad:_0x4454b2;else return!![];}const _0x4c9bac=this[_0x528cdc(0x30c)]();switch(_0x4c9bac){case _0x528cdc(0x95c):case _0x528cdc(0xc3e):return!![];break;case _0x528cdc(0x39e):case'xp':case _0x528cdc(0x453):default:return![];break;}},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0xbe9)]=function(){const _0x5073a1=_0x5d4113;if(this[_0x5073a1(0x2b2)]())return 0x0;else{if(_0x5073a1(0xc83)===_0x5073a1(0xc83))return 0xa;else _0x247c5a=(_0x42ce88+_0x6f480c)/0x2;}},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0xa14)]=function(){const _0x11f4c7=_0x5d4113,_0x5b25e2=this[_0x11f4c7(0x30c)]();switch(_0x5b25e2){case'list':return 0x1;break;case'xp':case'portrait':return $gameParty['battleMembers']()[_0x11f4c7(0x7da)];break;case _0x11f4c7(0x39e):default:return $gameParty[_0x11f4c7(0x34d)]();break;}},Window_BattleStatus[_0x5d4113(0x44d)]['itemHeight']=function(){const _0xf2621d=_0x5d4113,_0x518ac7=this['battleLayoutStyle']();switch(_0x518ac7){case'list':return Window_StatusBase[_0xf2621d(0x44d)][_0xf2621d(0x71a)]['call'](this);break;case _0xf2621d(0x39e):case'xp':case _0xf2621d(0x453):default:return this['innerHeight'];break;}},Window_BattleStatus['prototype'][_0x5d4113(0x1aa)]=function(){const _0x5e78af=_0x5d4113,_0x128da2=this[_0x5e78af(0x30c)]();switch(_0x128da2){case _0x5e78af(0x95c):return Window_StatusBase[_0x5e78af(0x44d)][_0x5e78af(0x1aa)][_0x5e78af(0x701)](this);break;case _0x5e78af(0x39e):case'xp':case'portrait':default:return 0x0;break;}},Window_BattleStatus['prototype']['updatePadding']=function(){const _0x7ec84b=_0x5d4113;this['isFrameVisible']()?_0x7ec84b(0x31d)!=='dbSii'?(_0x47d1db=_0x27f8bd[_0x7ec84b(0xa63)](_0xf6fffe[_0x7ec84b(0x22c)]()*(_0xfb08ec+0x1)),_0x4751bd=_0x32af12[_0x4af9b9],_0x298b08[_0x4f1103]=_0x47ca4c[_0x422868],_0x2ed76f[_0xb7bf00]=_0x5165af):Window_StatusBase['prototype']['updatePadding'][_0x7ec84b(0x701)](this):this[_0x7ec84b(0x31a)]=0x8;},Window_BattleStatus['prototype'][_0x5d4113(0x1c8)]=function(){const _0x138093=_0x5d4113,_0x703769=VisuMZ[_0x138093(0x710)][_0x138093(0x326)]['BattleLayout'];_0x703769['StatusWindowSkinFilename']?_0x138093(0x3b6)===_0x138093(0x7e7)?(this[_0x138093(0x892)](),this['_currentActor']=null,this['_inputting']=![]):this[_0x138093(0x30a)]=ImageManager[_0x138093(0xc28)](_0x703769[_0x138093(0x509)]):Window_StatusBase['prototype'][_0x138093(0x1c8)][_0x138093(0x701)](this);},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x14c)]=function(_0x56abd5){const _0x2a1f98=_0x5d4113,_0x359391=VisuMZ[_0x2a1f98(0x710)]['Settings'][_0x2a1f98(0x18b)];if(_0x359391['StatusWindowSelectableBackHide'])return;Window_StatusBase['prototype'][_0x2a1f98(0x14c)][_0x2a1f98(0x701)](this,_0x56abd5);},Window_BattleStatus['prototype']['requestRefresh']=function(){const _0x5078e2=_0x5d4113;this[_0x5078e2(0x511)]=!![];},Window_BattleStatus[_0x5d4113(0x44d)]['update']=function(){const _0x5cbcb3=_0x5d4113;Window_StatusBase[_0x5cbcb3(0x44d)][_0x5cbcb3(0x5fb)][_0x5cbcb3(0x701)](this),this[_0x5cbcb3(0xc00)](),this['updateEffectContainers']();if(this[_0x5cbcb3(0x30c)]()===_0x5cbcb3(0xc3e))this[_0x5cbcb3(0x26e)]();},Window_BattleStatus['prototype']['updateRefresh']=function(){const _0x541008=_0x5d4113;if($gameTemp['isBattleRefreshRequested']())_0x541008(0x1eb)===_0x541008(0x6dc)?this['visualHpGauge']=_0xeeaf39[_0x541008(0x2e2)]:(this[_0x541008(0x3be)](),this[_0x541008(0x511)]=![],$gameTemp['clearBattleRefreshRequest']());else this[_0x541008(0x511)]&&(this[_0x541008(0x511)]=![],this[_0x541008(0x602)](),this['updateAttachmentSprites']());},Window_BattleStatus['prototype'][_0x5d4113(0xb89)]=function(){const _0x2a7251=_0x5d4113;Window_StatusBase[_0x2a7251(0x44d)]['show'][_0x2a7251(0x701)](this);if(!$gameSystem[_0x2a7251(0x9f8)]())this[_0x2a7251(0x602)]();},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x712)]=function(){const _0x1aab86=_0x5d4113;if(this[_0x1aab86(0x8ab)]===Window_BattleStatus)return;Window_StatusBase[_0x1aab86(0x44d)][_0x1aab86(0x712)][_0x1aab86(0x701)](this);},Window_BattleStatus['prototype'][_0x5d4113(0x49b)]=function(_0x218cc5){const _0x1a57c5=_0x5d4113,_0x2d72f9=this[_0x1a57c5(0x30c)]();switch(_0x2d72f9){case'xp':case'portrait':break;case'default':case _0x1a57c5(0x95c):case'border':default:return Window_StatusBase[_0x1a57c5(0x44d)][_0x1a57c5(0x49b)][_0x1a57c5(0x701)](this,_0x218cc5);break;}},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x274)]=Window_BattleStatus['prototype'][_0x5d4113(0xc8f)],Window_BattleStatus['prototype'][_0x5d4113(0xc8f)]=function(_0x5e07f4){const _0x26b25a=_0x5d4113,_0x235ba5=this['battleLayoutStyle']();switch(_0x235ba5){case _0x26b25a(0x95c):this[_0x26b25a(0x884)](_0x5e07f4);break;case'xp':this['drawItemImageXPStyle'](_0x5e07f4);break;case _0x26b25a(0x453):this[_0x26b25a(0x6c6)](_0x5e07f4);break;case _0x26b25a(0x39e):case _0x26b25a(0xc3e):default:VisuMZ[_0x26b25a(0x710)][_0x26b25a(0x274)][_0x26b25a(0x701)](this,_0x5e07f4);break;}},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x6a7)]=function(_0x32a6e5){const _0x5d7a51=_0x5d4113,_0x3031ec=this[_0x5d7a51(0x30c)]();if(!$gameSystem[_0x5d7a51(0x9f8)]())this[_0x5d7a51(0x73a)](_0x32a6e5);switch(_0x3031ec){case'list':this[_0x5d7a51(0x54f)](_0x32a6e5);break;case'xp':case _0x5d7a51(0x453):case _0x5d7a51(0x39e):case _0x5d7a51(0xc3e):default:this[_0x5d7a51(0x60e)](_0x32a6e5);break;}},Window_BattleStatus[_0x5d4113(0x44d)]['refreshCursor']=function(){const _0x3e3c85=_0x5d4113,_0x57274=this[_0x3e3c85(0x30c)]();if(['xp'][_0x3e3c85(0x4b0)](_0x57274)&&!$gameSystem[_0x3e3c85(0x9f8)]()){this[_0x3e3c85(0x59b)](0x0,0x0,0x0,0x0);return;}Window_StatusBase['prototype'][_0x3e3c85(0x5a5)]['call'](this);},Window_BattleStatus['prototype'][_0x5d4113(0x73a)]=function(_0x47bacb){const _0x2b57a5=_0x5d4113,_0x23f28=this[_0x2b57a5(0x80b)](_0x47bacb)[_0x2b57a5(0x3ee)]();if(!_0x23f28)return;const _0x5a3c96=this['battleLayoutStyle'](),_0x18bc14=this[_0x2b57a5(0xb7f)](_0x47bacb);let _0x139bc4=Math[_0x2b57a5(0xb50)](_0x18bc14['x']+_0x18bc14['width']/0x2)+this[_0x2b57a5(0x31a)];if([_0x2b57a5(0x95c)]['includes'](_0x5a3c96)){if(_0x2b57a5(0x671)===_0x2b57a5(0x6d0)){this[_0x2b57a5(0x2e4)]=new _0x1253b9();const _0x407603=_0x12d728['_scene'],_0x46aee3=_0x407603[_0x2b57a5(0xc87)][_0x2b57a5(0x6ef)](_0x407603['_windowLayer']);_0x407603[_0x2b57a5(0xc48)](this[_0x2b57a5(0x2e4)],_0x46aee3),this['_borderPortraitSprite'][_0x2b57a5(0x636)]['x']=0.5,this['_borderPortraitSprite'][_0x2b57a5(0x636)]['y']=0x1;const _0x4f3ea5=_0x188738['BattleCore'][_0x2b57a5(0x326)][_0x2b57a5(0x18b)][_0x2b57a5(0x32b)];this['_borderPortraitSprite'][_0x2b57a5(0x596)]['x']=_0x4f3ea5,this[_0x2b57a5(0x2e4)]['scale']['y']=_0x4f3ea5,this[_0x2b57a5(0x2e4)]['y']=this['y']+this[_0x2b57a5(0x6ce)],this[_0x2b57a5(0x795)]=0x0;}else _0x139bc4=_0x18bc14[_0x2b57a5(0x61e)]/$gameParty[_0x2b57a5(0xc0c)]()[_0x2b57a5(0x7da)],_0x139bc4*=_0x47bacb,_0x139bc4+=_0x18bc14[_0x2b57a5(0x61e)]/$gameParty[_0x2b57a5(0xc0c)]()['length']/0x2;}let _0x353e2b=Math[_0x2b57a5(0xb50)](this[_0x2b57a5(0x850)](_0x47bacb,_0x23f28,_0x18bc14));_0x23f28['setHome'](_0x139bc4,_0x353e2b),this[_0x2b57a5(0xc48)](_0x23f28,0x1),_0x23f28[_0x2b57a5(0xb89)](),this[_0x2b57a5(0x1a4)](),this['updateAttachmentSprites']();},Window_BattleStatus[_0x5d4113(0x44d)]['frontviewSpriteY']=function(_0x5ce2d8,_0xe7e341,_0x14a118){const _0x554b9d=_0x5d4113,_0x37a88e=VisuMZ[_0x554b9d(0x710)]['Settings'][_0x554b9d(0x18b)],_0x53ba9f=this[_0x554b9d(0x30c)]();if(_0x53ba9f==='xp'){const _0x2411c4=_0x37a88e['XPSpriteYLocation'];switch(_0x2411c4[_0x554b9d(0x172)]()['trim']()){case _0x554b9d(0x5c9):return _0x14a118['height']-_0xe7e341['_shadowSprite'][_0x554b9d(0x6ce)]/0x4;break;case _0x554b9d(0x4d5):const _0x4d9551=_0x37a88e[_0x554b9d(0x158)];return(_0x14a118[_0x554b9d(0x6ce)]+(_0xe7e341[_0x554b9d(0x6ce)]||_0x4d9551))/0x2;break;case'top':return 0x0;case _0x554b9d(0x2c0):default:return this['nameY'](_0x14a118);break;}}else{if(_0x53ba9f===_0x554b9d(0x453)){}}return _0xe7e341['height'];},Sprite_Name[_0x5d4113(0x44d)][_0x5d4113(0xc9a)]=function(){return 0x24;},Sprite_Name['prototype'][_0x5d4113(0x391)]=function(){const _0x2e0c28=_0x5d4113,_0x283746=this['name'](),_0x3e54ad=this[_0x2e0c28(0x7e9)](),_0x15107=this[_0x2e0c28(0xc9a)]();this[_0x2e0c28(0xaba)](),this[_0x2e0c28(0x432)][_0x2e0c28(0x192)](),this[_0x2e0c28(0x432)][_0x2e0c28(0x29e)](_0x283746,0x4,0x0,_0x3e54ad,_0x15107,_0x2e0c28(0x857));},Bitmap[_0x5d4113(0x44d)]['drawTextTopAligned']=function(_0x178545,_0x3c9834,_0x1910d6,_0x2ce571,_0x41a6a8,_0x516d28){const _0x47a111=_0x5d4113,_0x53749e=this[_0x47a111(0xac7)],_0x9f98d0=_0x53749e[_0x47a111(0x7d5)];_0x2ce571=_0x2ce571||0xffffffff;let _0x8caac0=_0x3c9834,_0x316c35=Math[_0x47a111(0xb50)](_0x1910d6+0x18/0x2+this[_0x47a111(0x864)]*0.35);_0x516d28===_0x47a111(0x4d5)&&(_0x47a111(0xb9f)===_0x47a111(0x744)?this[_0x47a111(0x30e)]=this[_0x47a111(0xb87)]:_0x8caac0+=_0x2ce571/0x2),_0x516d28===_0x47a111(0x87b)&&(_0x8caac0+=_0x2ce571),_0x53749e[_0x47a111(0x68f)](),_0x53749e['font']=this[_0x47a111(0x426)](),_0x53749e[_0x47a111(0x5bc)]=_0x516d28,_0x53749e[_0x47a111(0xb2e)]=_0x47a111(0x5e2),_0x53749e[_0x47a111(0x7d5)]=0x1,this[_0x47a111(0x541)](_0x178545,_0x8caac0,_0x316c35,_0x2ce571),_0x53749e['globalAlpha']=_0x9f98d0,this[_0x47a111(0xafc)](_0x178545,_0x8caac0,_0x316c35,_0x2ce571),_0x53749e[_0x47a111(0xb7c)](),this[_0x47a111(0x34b)][_0x47a111(0x5fb)]();},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0xaea)]=function(_0x541530){const _0x439665=_0x5d4113;return this[_0x439665(0x26c)](_0x541530)-this[_0x439665(0x3da)]();},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x884)]=function(_0x44f53b){const _0x4b6d58=_0x5d4113;if(!VisuMZ[_0x4b6d58(0x710)][_0x4b6d58(0x326)][_0x4b6d58(0x18b)][_0x4b6d58(0x1a9)])return;const _0x5a9056=this['actor'](_0x44f53b),_0x2cc307=this[_0x4b6d58(0xb7f)](_0x44f53b);_0x2cc307['width']=ImageManager[_0x4b6d58(0x583)],_0x2cc307['height']-=0x2,this['drawActorFace'](_0x5a9056,_0x2cc307['x']+0x1,_0x2cc307['y']+0x1,_0x2cc307[_0x4b6d58(0x61e)],_0x2cc307[_0x4b6d58(0x6ce)]);},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x54f)]=function(_0x248b5d){const _0x5b1dc7=_0x5d4113,_0x573196=VisuMZ[_0x5b1dc7(0x710)][_0x5b1dc7(0x326)][_0x5b1dc7(0x18b)],_0x1ee222=$dataSystem[_0x5b1dc7(0x424)]?0x4:0x3,_0x24bde9=_0x1ee222*0x80+(_0x1ee222-0x1)*0x8+0x4,_0x55661b=this['actor'](_0x248b5d),_0x9a6f45=this[_0x5b1dc7(0xb7f)](_0x248b5d);let _0xdb42a5=_0x9a6f45['x']+this[_0x5b1dc7(0x31a)];_0x573196[_0x5b1dc7(0x1a9)]?_0x5b1dc7(0x216)!=='YblSt'?_0xdb42a5=_0x9a6f45['x']+ImageManager[_0x5b1dc7(0x583)]+0x8:_0x2d2972=!_0xf57230:_0xdb42a5+=ImageManager['iconWidth'];const _0xea081a=Math[_0x5b1dc7(0xb50)](Math[_0x5b1dc7(0x15d)](_0x9a6f45['x']+_0x9a6f45[_0x5b1dc7(0x61e)]-_0x24bde9,_0xdb42a5)),_0xe5c4c4=Math[_0x5b1dc7(0xb50)](_0x9a6f45['y']+(_0x9a6f45['height']-Sprite_Name[_0x5b1dc7(0x44d)]['bitmapHeight']())/0x2),_0x57e1b0=Math[_0x5b1dc7(0xb50)](_0xea081a-ImageManager[_0x5b1dc7(0x706)]/0x2-0x4),_0x3ee66a=Math[_0x5b1dc7(0xb50)](_0x9a6f45['y']+(_0x9a6f45[_0x5b1dc7(0x6ce)]-ImageManager[_0x5b1dc7(0xa92)])/0x2+ImageManager['iconHeight']/0x2);let _0x1521a2=_0xea081a+0x88;const _0x3169ec=_0xe5c4c4;this['placeTimeGauge'](_0x55661b,_0xea081a-0x4+(_0x573196[_0x5b1dc7(0x859)]||0x0),_0xe5c4c4+(_0x573196[_0x5b1dc7(0xc31)]||0x0)),this[_0x5b1dc7(0x8d1)](_0x55661b,_0xea081a+(_0x573196[_0x5b1dc7(0xa48)]||0x0),_0xe5c4c4+(_0x573196[_0x5b1dc7(0x6cf)]||0x0)),this[_0x5b1dc7(0x47c)](_0x55661b,_0x57e1b0+(_0x573196['StateIconOffsetX']||0x0),_0x3ee66a+(_0x573196[_0x5b1dc7(0x4e9)]||0x0)),this[_0x5b1dc7(0x348)](_0x55661b,'hp',_0x1521a2+0x88*0x0+(_0x573196[_0x5b1dc7(0x301)]||0x0),_0x3169ec+(_0x573196[_0x5b1dc7(0x739)]||0x0)),this[_0x5b1dc7(0x348)](_0x55661b,'mp',_0x1521a2+0x88*0x1+(_0x573196[_0x5b1dc7(0x901)]||0x0),_0x3169ec+(_0x573196['MpGaugeOffsetY']||0x0)),$dataSystem[_0x5b1dc7(0x424)]&&this[_0x5b1dc7(0x348)](_0x55661b,'tp',_0x1521a2+0x88*0x2+(_0x573196[_0x5b1dc7(0x886)]||0x0),_0x3169ec+(_0x573196[_0x5b1dc7(0x8ac)]||0x0));},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x941)]=function(_0x36a067){const _0x47abfc=_0x5d4113;if(!$gameSystem[_0x47abfc(0x9f8)]())return;VisuMZ[_0x47abfc(0x710)][_0x47abfc(0x274)]['call'](this,_0x36a067);},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x60e)]=function(_0x5854f1){const _0x54fabd=_0x5d4113,_0x3477fd=VisuMZ['BattleCore'][_0x54fabd(0x326)][_0x54fabd(0x18b)],_0x501a0a=this['actor'](_0x5854f1),_0x2e23ba=this[_0x54fabd(0xb7f)](_0x5854f1),_0x4df1d0=Math[_0x54fabd(0xb50)](_0x2e23ba['x']+(_0x2e23ba[_0x54fabd(0x61e)]-0x80)/0x2),_0x53b73c=this[_0x54fabd(0xaea)](_0x2e23ba);let _0x5da0ed=_0x4df1d0-ImageManager[_0x54fabd(0x706)]/0x2-0x4,_0x35e8dc=_0x53b73c+ImageManager[_0x54fabd(0xa92)]/0x2;_0x5da0ed-ImageManager[_0x54fabd(0x706)]/0x2<_0x2e23ba['x']&&(_0x5da0ed=_0x4df1d0+ImageManager[_0x54fabd(0x706)]/0x2-0x4,_0x35e8dc=_0x53b73c-ImageManager[_0x54fabd(0xa92)]/0x2);const _0x54bb9f=_0x4df1d0,_0x488511=this['basicGaugesY'](_0x2e23ba);this[_0x54fabd(0x7f5)](_0x501a0a,_0x4df1d0+(_0x3477fd[_0x54fabd(0x859)]||0x0),_0x53b73c+(_0x3477fd[_0x54fabd(0xc31)]||0x0)),this[_0x54fabd(0x8d1)](_0x501a0a,_0x4df1d0+(_0x3477fd['NameOffsetX']||0x0),_0x53b73c+(_0x3477fd[_0x54fabd(0x6cf)]||0x0)),this[_0x54fabd(0x47c)](_0x501a0a,_0x5da0ed+(_0x3477fd[_0x54fabd(0x49d)]||0x0),_0x35e8dc+(_0x3477fd[_0x54fabd(0x4e9)]||0x0)),this[_0x54fabd(0x348)](_0x501a0a,'hp',_0x54bb9f+(_0x3477fd[_0x54fabd(0x301)]||0x0),_0x488511+(_0x3477fd[_0x54fabd(0x739)]||0x0)),this[_0x54fabd(0x348)](_0x501a0a,'mp',_0x54bb9f+(_0x3477fd[_0x54fabd(0x901)]||0x0),_0x488511+this[_0x54fabd(0x3da)]()+(_0x3477fd['MpGaugeOffsetY']||0x0)),$dataSystem[_0x54fabd(0x424)]&&this[_0x54fabd(0x348)](_0x501a0a,'tp',_0x54bb9f+(_0x3477fd[_0x54fabd(0x886)]||0x0),_0x488511+this[_0x54fabd(0x3da)]()*0x2+(_0x3477fd[_0x54fabd(0x8ac)]||0x0));},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x9db)]=function(_0x8b717e){const _0x1723ce=_0x5d4113;if(!VisuMZ['BattleCore'][_0x1723ce(0x326)][_0x1723ce(0x18b)][_0x1723ce(0x9a7)])return![];if(_0x8b717e[_0x1723ce(0x7a7)]())return!![];return Imported[_0x1723ce(0x4fe)]&&_0x8b717e[_0x1723ce(0x150)]();},Game_Actor['prototype']['getBattlePortraitOffsetX']=function(){const _0x5d52c7=_0x5d4113;if(this[_0x5d52c7(0x80b)]()['note'][_0x5d52c7(0xb51)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i)){if(_0x5d52c7(0xb12)===_0x5d52c7(0xb12))return Number(RegExp['$1']);else _0x376bd2=_0x5842f9[this['_actor']['guardSkillId']()];}else{if(this[_0x5d52c7(0x80b)]()[_0x5d52c7(0x80a)][_0x5d52c7(0xb51)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x5d4113(0x44d)][_0x5d4113(0xb68)]=function(){const _0x295b10=_0x5d4113;if(this[_0x295b10(0x80b)]()[_0x295b10(0x80a)][_0x295b10(0xb51)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i)){if(_0x295b10(0x462)===_0x295b10(0xb5e)){if(_0x156647[_0x295b10(0xa9a)]['isAnyProjectilePresent']())return!![];this[_0x295b10(0xbdc)]='';}else return Number(RegExp['$1']);}else{if(this[_0x295b10(0x80b)]()[_0x295b10(0x80a)][_0x295b10(0xb51)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if('CsDzF'===_0x295b10(0x3b2)){const _0x121273=_0x3add8e[_0x295b10(0x6aa)](_0x378122['width']/0x3),_0x1d161f=_0x213f37[_0x295b10(0xb50)]((_0x5a3c41[_0x295b10(0xbb8)]-_0x121273)/0x2),_0x4a285e=this[_0x295b10(0x75d)](),_0x8d16c=_0x4a285e['y'],_0x584fb7=_0x4a285e[_0x295b10(0x6ce)];return new _0x5a5b44(_0x1d161f,_0x8d16c,_0x121273,_0x584fb7);}else return Number(RegExp['$2']);}}return 0x0;},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x6c6)]=function(_0x37a671){const _0x5c4625=_0x5d4113,_0x28a573=this[_0x5c4625(0x80b)](_0x37a671);if(this[_0x5c4625(0x9db)](_0x28a573)){const _0x4737a1=_0x5c4625(0x9ae)[_0x5c4625(0x85d)](_0x28a573[_0x5c4625(0xb54)]()),_0x3c757a=this[_0x5c4625(0x309)](_0x4737a1,Sprite),_0x26140a=_0x28a573[_0x5c4625(0x8d3)]();_0x26140a!==''?_0x3c757a[_0x5c4625(0x432)]=ImageManager[_0x5c4625(0xc49)](_0x26140a):_0x3c757a[_0x5c4625(0x432)]=ImageManager[_0x5c4625(0x57d)];const _0x2f6661=this[_0x5c4625(0xb7f)](_0x37a671);_0x3c757a[_0x5c4625(0x636)]['x']=0.5,_0x3c757a['anchor']['y']=0x1;let _0x2a76a0=Math['round'](_0x2f6661['x']+_0x2f6661[_0x5c4625(0x61e)]/0x2)+this[_0x5c4625(0x31a)];_0x2a76a0+=_0x28a573[_0x5c4625(0x339)]();let _0x4b0f5b=Math[_0x5c4625(0xb50)](this[_0x5c4625(0x6ce)]);_0x4b0f5b+=_0x28a573[_0x5c4625(0xb68)](),_0x3c757a[_0x5c4625(0xbc9)](_0x2a76a0,_0x4b0f5b);const _0x400e0d=VisuMZ[_0x5c4625(0x710)][_0x5c4625(0x326)][_0x5c4625(0x18b)]['PortraitScale'];_0x3c757a[_0x5c4625(0x596)]['x']=_0x400e0d,_0x3c757a[_0x5c4625(0x596)]['y']=_0x400e0d,_0x3c757a[_0x5c4625(0xb89)]();}else{const _0x462de7=this[_0x5c4625(0xc19)](_0x37a671);this[_0x5c4625(0x877)](_0x28a573,_0x462de7['x'],_0x462de7['y'],_0x462de7[_0x5c4625(0x61e)],_0x462de7[_0x5c4625(0x6ce)]);}},Window_BattleStatus[_0x5d4113(0x44d)]['createInnerPortrait']=function(_0x2fcd5f,_0x5e099a){const _0x290935=_0x5d4113,_0x46a61c=this[_0x290935(0xbc3)];if(_0x46a61c[_0x2fcd5f])return _0x46a61c[_0x2fcd5f];else{if('VfcXT'!==_0x290935(0x3e0)){const _0x3b4bef=new _0x5e099a();return _0x46a61c[_0x2fcd5f]=_0x3b4bef,this[_0x290935(0x57e)](_0x3b4bef),this[_0x290935(0x57e)](this[_0x290935(0x492)]),_0x3b4bef;}else _0x1bc0a1['BattleCore']['Scene_Battle_startPartyCommandSelection']['call'](this);}},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x527)]=function(){const _0x81488=_0x5d4113;this[_0x81488(0xc02)](),this[_0x81488(0x431)](),Window_StatusBase[_0x81488(0x44d)][_0x81488(0x527)]['call'](this),this['_createDamageContainer']();},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0xc02)]=function(){const _0xe7a2d=_0x5d4113;this[_0xe7a2d(0x492)]=new Sprite(),this['_cursorArea'][_0xe7a2d(0x82a)]=[new PIXI['filters']['AlphaFilter']()],this[_0xe7a2d(0x492)][_0xe7a2d(0x429)]=new Rectangle(),this[_0xe7a2d(0x492)][_0xe7a2d(0xbc9)](this[_0xe7a2d(0x4e7)],this[_0xe7a2d(0x4e7)]),this['addChild'](this[_0xe7a2d(0x492)]);},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x431)]=function(){const _0x329a1a=_0x5d4113;this[_0x329a1a(0xa5e)]=new Sprite(),this[_0x329a1a(0x9fd)](this[_0x329a1a(0xa5e)]);},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x1a4)]=function(){const _0x35d884=_0x5d4113;this[_0x35d884(0xa5e)]&&this[_0x35d884(0x9fd)](this['_effectsContainer']);},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x8cd)]=function(){const _0x5b17cc=_0x5d4113;this['_damageContainer']=new Sprite(),this[_0x5b17cc(0x9fd)](this[_0x5b17cc(0x78d)]);},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x8e4)]=function(){const _0xa1568b=_0x5d4113;this[_0xa1568b(0xaab)]=new Sprite();for(let _0x3b2aab=0x0;_0x3b2aab<0x9;_0x3b2aab++){this[_0xa1568b(0xaab)][_0xa1568b(0x9fd)](new Sprite());}this[_0xa1568b(0x492)][_0xa1568b(0x9fd)](this[_0xa1568b(0xaab)]);},Window_BattleStatus['prototype'][_0x5d4113(0x445)]=function(){const _0x46fad4=_0x5d4113;Window_StatusBase[_0x46fad4(0x44d)]['_updateClientArea'][_0x46fad4(0x701)](this),this[_0x46fad4(0x2a9)]();},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x2a9)]=function(){const _0x3e67a8=_0x5d4113,_0x45330c=this[_0x3e67a8(0x4e7)];this[_0x3e67a8(0x492)][_0x3e67a8(0xbc9)](_0x45330c,_0x45330c),this[_0x3e67a8(0x492)]['x']=_0x45330c-this[_0x3e67a8(0xa6c)]['x'],this[_0x3e67a8(0x492)]['y']=_0x45330c-this[_0x3e67a8(0xa6c)]['y'],this[_0x3e67a8(0xa05)]>0x0&&this['innerHeight']>0x0?this[_0x3e67a8(0x492)][_0x3e67a8(0x39c)]=this[_0x3e67a8(0x211)]():this[_0x3e67a8(0x492)][_0x3e67a8(0x39c)]=![];},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x6fa)]=function(){const _0x36628c=_0x5d4113;Window_StatusBase[_0x36628c(0x44d)][_0x36628c(0x6fa)][_0x36628c(0x701)](this),this[_0x36628c(0x3fe)]();},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x3fe)]=function(){const _0x506fc0=_0x5d4113,_0x12f6ac=this[_0x506fc0(0x492)]['worldTransform'][_0x506fc0(0x4e0)](new Point(0x0,0x0)),_0x44158e=this[_0x506fc0(0x492)]['filterArea'];_0x44158e['x']=_0x12f6ac['x']+this[_0x506fc0(0xa6c)]['x'],_0x44158e['y']=_0x12f6ac['y']+this['origin']['y'],_0x44158e[_0x506fc0(0x61e)]=this[_0x506fc0(0xa05)],_0x44158e['height']=this[_0x506fc0(0x236)];},Window_BattleStatus['prototype'][_0x5d4113(0x2f7)]=function(_0x2e75be){const _0x3e84a6=_0x5d4113;if(this[_0x3e84a6(0x30c)]()!==_0x3e84a6(0x453))return;this[_0x3e84a6(0x6c6)](_0x2e75be[_0x3e84a6(0x288)]());},Window_BattleStatus[_0x5d4113(0x44d)]['addDamageSprite']=function(_0x4339df,_0xab46ac){const _0xf717d1=_0x5d4113;if(!this[_0xf717d1(0x78d)])return;if(!_0x4339df)return;if(!_0xab46ac)return;const _0x5a3a23=this[_0xf717d1(0xb7f)](_0xab46ac[_0xf717d1(0x288)]());_0x5a3a23['x']+=_0x5a3a23[_0xf717d1(0x61e)]/0x2+this[_0xf717d1(0x31a)],_0x4339df['x']=_0x5a3a23['x'],_0x4339df['y']=_0x5a3a23['y'],this['_damageContainer'][_0xf717d1(0x9fd)](_0x4339df);},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x45d)]=function(_0x25558a){const _0x464cf5=_0x5d4113;if(!this[_0x464cf5(0x78d)])return;if(!_0x25558a)return;this['_damageContainer'][_0x464cf5(0x5e1)](_0x25558a);},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x26e)]=function(){const _0x6b951c=_0x5d4113;if(!this['isBorderStylePortraitShown']())return;if(!this['_borderPortraitSprite'])this[_0x6b951c(0x63d)]();this[_0x6b951c(0x7bd)](),this[_0x6b951c(0x4f5)]();},Window_BattleStatus[_0x5d4113(0x44d)]['isBorderStylePortraitShown']=function(){const _0x40ad56=_0x5d4113;if(this[_0x40ad56(0x8ab)]!==Window_BattleStatus)return![];if(!SceneManager[_0x40ad56(0x2ab)]())return![];return VisuMZ['BattleCore'][_0x40ad56(0x326)][_0x40ad56(0x18b)][_0x40ad56(0xc04)];},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x63d)]=function(){const _0x198f87=_0x5d4113;this[_0x198f87(0x2e4)]=new Sprite();const _0x42cc72=SceneManager[_0x198f87(0x5a4)],_0x143f44=_0x42cc72[_0x198f87(0xc87)][_0x198f87(0x6ef)](_0x42cc72['_windowLayer']);_0x42cc72[_0x198f87(0xc48)](this[_0x198f87(0x2e4)],_0x143f44),this[_0x198f87(0x2e4)][_0x198f87(0x636)]['x']=0.5,this[_0x198f87(0x2e4)][_0x198f87(0x636)]['y']=0x1;const _0x557970=VisuMZ[_0x198f87(0x710)][_0x198f87(0x326)]['BattleLayout'][_0x198f87(0x32b)];this[_0x198f87(0x2e4)][_0x198f87(0x596)]['x']=_0x557970,this[_0x198f87(0x2e4)][_0x198f87(0x596)]['y']=_0x557970,this[_0x198f87(0x2e4)]['y']=this['y']+this['height'],this['_borderPortraitDuration']=0x0;},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x7bd)]=function(){const _0x20c32d=_0x5d4113;this[_0x20c32d(0x2e4)][_0x20c32d(0x39c)]=BattleManager[_0x20c32d(0x745)]();const _0x675c9f=BattleManager['actor'](),_0x322752=_0x675c9f?_0x675c9f[_0x20c32d(0x8d3)]()||'':'';if(_0x675c9f===this[_0x20c32d(0x2e4)][_0x20c32d(0x80b)]&&_0x322752===this['_borderPortraitSprite'][_0x20c32d(0xa10)])return;this[_0x20c32d(0x2e4)][_0x20c32d(0x80b)]=_0x675c9f||this[_0x20c32d(0x2e4)]['actor'],this[_0x20c32d(0x2e4)][_0x20c32d(0xa10)]=_0x322752;if(!_0x675c9f){if('qErmv'!==_0x20c32d(0x373))return;else return 0x0;}else{if(_0x322752===''){this['_borderPortraitSprite'][_0x20c32d(0x432)]=ImageManager['_emptyBitmap'],this[_0x20c32d(0x2e4)][_0x20c32d(0xa10)]='';return;}else{const _0x2312e3=ImageManager[_0x20c32d(0xc49)](_0x322752);this[_0x20c32d(0x2e4)][_0x20c32d(0x380)]=0x0,_0x2312e3[_0x20c32d(0x897)](this[_0x20c32d(0x74a)][_0x20c32d(0xa11)](this,_0x2312e3));}}},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x74a)]=function(_0x11c3c7){const _0x4d8e30=_0x5d4113;this[_0x4d8e30(0x795)]=0x14,this['_borderPortraitSprite'][_0x4d8e30(0x432)]=_0x11c3c7;SceneManager['_scene'][_0x4d8e30(0x78e)]()?(this[_0x4d8e30(0x2e4)]['x']=0x0,this[_0x4d8e30(0x6c0)]=Math[_0x4d8e30(0x6aa)](_0x11c3c7['width']/0x2)):_0x4d8e30(0x6c8)!==_0x4d8e30(0x6c8)?(_0x27618e[_0x4d8e30(0x710)]['ParseItemNotetags']&&_0x3a64ee[_0x4d8e30(0x710)][_0x4d8e30(0x367)][_0x4d8e30(0x701)](this,_0x4646db),_0x24e3c1[_0x4d8e30(0x710)]['Parse_Notetags_Action'](_0x18d4dc),_0x20656e['BattleCore'][_0x4d8e30(0xc5b)](_0x5359e0)):(this[_0x4d8e30(0x2e4)]['x']=this[_0x4d8e30(0x61e)],this[_0x4d8e30(0x6c0)]=this[_0x4d8e30(0x61e)]*0x3/0x4);this[_0x4d8e30(0x2e4)][_0x4d8e30(0x380)]=0x0,this['_borderPortraitSprite']['y']=this['y']+this['height'];const _0x5c3888=BattleManager['actor']();_0x5c3888&&(this[_0x4d8e30(0x6c0)]+=_0x5c3888['getBattlePortraitOffsetX'](),this['_borderPortraitSprite']['y']+=_0x5c3888[_0x4d8e30(0xb68)]());},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x4f5)]=function(){const _0x87701d=_0x5d4113;if(this[_0x87701d(0x795)]>0x0){if(_0x87701d(0x379)!=='pHVyv'){const _0x41b024=this['commandStyleCheck'](_0x1a90c9);if(_0x41b024===_0x87701d(0xa47))this[_0x87701d(0x3e7)](_0x37763a);else _0x41b024==='icon'?this[_0x87701d(0x58d)](_0x22b23d):_0x417797[_0x87701d(0x44d)][_0x87701d(0xc88)][_0x87701d(0x701)](this,_0x418e3b);this[_0x87701d(0x69b)](_0x417897);}else{const _0x11f071=this[_0x87701d(0x795)],_0x167e7e=this['_borderPortraitSprite'];_0x167e7e['x']=(_0x167e7e['x']*(_0x11f071-0x1)+this[_0x87701d(0x6c0)])/_0x11f071,_0x167e7e[_0x87701d(0x380)]=(_0x167e7e[_0x87701d(0x380)]*(_0x11f071-0x1)+0xff)/_0x11f071,this[_0x87701d(0x795)]--;}}},Window_BattleStatus[_0x5d4113(0x44d)]['updateEffectContainers']=function(){const _0x3855cf=_0x5d4113;return;this[_0x3855cf(0xa5e)]&&(this[_0x3855cf(0xa5e)]['x']=this['x'],this[_0x3855cf(0xa5e)]['y']=this['y']),this[_0x3855cf(0x78d)]&&(this[_0x3855cf(0x78d)]['x']=this['x'],this[_0x3855cf(0x78d)]['y']=this['y']);},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x1a3)]=function(){const _0x1cfcdb=_0x5d4113,_0x4562be=VisuMZ[_0x1cfcdb(0x710)][_0x1cfcdb(0x326)][_0x1cfcdb(0x18b)];if(_0x4562be[_0x1cfcdb(0x4da)]){if(_0x1cfcdb(0x404)===_0x1cfcdb(0x614))this['selectNextCommand']();else{const _0x48e3b2=new Sprite();_0x48e3b2['bitmap']=ImageManager[_0x1cfcdb(0xc28)](_0x4562be[_0x1cfcdb(0x4da)]),_0x48e3b2['x']=_0x4562be[_0x1cfcdb(0xa5d)]||0x0,_0x48e3b2['y']=_0x4562be[_0x1cfcdb(0x725)]||0x0,this[_0x1cfcdb(0x57e)](_0x48e3b2),this[_0x1cfcdb(0x594)]=_0x48e3b2;}}if(_0x4562be[_0x1cfcdb(0x7fb)]){const _0xa1a76d=new Sprite();_0xa1a76d['bitmap']=ImageManager[_0x1cfcdb(0xc28)](_0x4562be[_0x1cfcdb(0x7fb)]),_0xa1a76d['x']=_0x4562be['StatusWindowAttachmentFrontOffsetX']||0x0,_0xa1a76d['y']=_0x4562be[_0x1cfcdb(0x520)]||0x0,this[_0x1cfcdb(0x9fd)](_0xa1a76d),this['_frontAttachmentSprite']=_0xa1a76d;}},Window_BattleStatus[_0x5d4113(0x44d)][_0x5d4113(0x275)]=function(){const _0x2edf4f=_0x5d4113;this[_0x2edf4f(0x8bc)]&&this[_0x2edf4f(0x9fd)](this['_frontAttachmentSprite']);if(this[_0x2edf4f(0x594)]){if('oxkwv'!==_0x2edf4f(0x641))return;else this[_0x2edf4f(0x57e)](this[_0x2edf4f(0x594)]);}},Window_BattleActor[_0x5d4113(0x44d)][_0x5d4113(0xaf2)]=function(){const _0x3c10e6=_0x5d4113;return Window_BattleStatus[_0x3c10e6(0x44d)][_0x3c10e6(0xaf2)][_0x3c10e6(0x701)](this)&&this[_0x3c10e6(0xbf5)]();},Window_BattleActor['prototype'][_0x5d4113(0xbf5)]=function(){const _0x15f0f2=_0x5d4113,_0x28d856=BattleManager[_0x15f0f2(0xbaf)](),_0x46bb7d=this[_0x15f0f2(0x80b)](this[_0x15f0f2(0x288)]());if(!_0x28d856)return!![];if(!_0x28d856[_0x15f0f2(0x441)]())return!![];const _0x3a903e=_0x28d856[_0x15f0f2(0x441)]()['note'];if(_0x3a903e[_0x15f0f2(0xb51)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x15f0f2(0x95d)===_0x15f0f2(0x95d)){if(_0x46bb7d===BattleManager[_0x15f0f2(0x80b)]())return![];}else{if(!_0x237bbf['isSceneBattle']())return;_0x27603e[_0x15f0f2(0xb3d)](_0x59239d,_0x283d92);const _0x2f1b4c=_0x1be08d['getLastPluginCommandInterpreter'](),_0x2f8987=_0x474c2c[_0x15f0f2(0x1b3)];if(!_0x2f1b4c)return;_0x156cee['_targetIndex']++,_0x2ddd98[_0x15f0f2(0x3c7)]=_0x4fbf97[_0x15f0f2(0xbba)][_0xa5de5e['_targetIndex']]||null,_0x279990['_target']&&_0x2f8987['toUpperCase']()[_0x15f0f2(0xacb)]()!==_0x15f0f2(0x5f1)&&_0x2f1b4c[_0x15f0f2(0x37d)]([_0x2f8987]);}}return!![];},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x197)]=Window_BattleEnemy[_0x5d4113(0x44d)][_0x5d4113(0x7e2)],Window_BattleEnemy[_0x5d4113(0x44d)]['initialize']=function(_0x4c8f81){const _0x3e20e7=_0x5d4113;this['_lastEnemy']=null,VisuMZ[_0x3e20e7(0x710)][_0x3e20e7(0x197)][_0x3e20e7(0x701)](this,_0x4c8f81);},Window_BattleEnemy[_0x5d4113(0x44d)]['maxCols']=function(){const _0x3eef1c=_0x5d4113;return this[_0x3eef1c(0xb8c)]();},VisuMZ[_0x5d4113(0x710)]['Window_BattleEnemy_show']=Window_BattleEnemy[_0x5d4113(0x44d)][_0x5d4113(0xb89)],Window_BattleEnemy[_0x5d4113(0x44d)][_0x5d4113(0xb89)]=function(){const _0x236bdb=_0x5d4113;VisuMZ[_0x236bdb(0x710)]['Window_BattleEnemy_show'][_0x236bdb(0x701)](this),this['y']=Graphics[_0x236bdb(0x6ce)]*0xa;},Window_BattleEnemy['prototype']['validTargets']=function(){const _0x2d849c=_0x5d4113;return $gameTroop['aliveMembers']()[_0x2d849c(0x481)](0x0);},Window_BattleEnemy['prototype'][_0x5d4113(0x602)]=function(){const _0x24689a=_0x5d4113;this[_0x24689a(0x9ed)]=this[_0x24689a(0x2b6)](),this[_0x24689a(0x37e)](),Window_Selectable[_0x24689a(0x44d)][_0x24689a(0x602)][_0x24689a(0x701)](this);},Window_BattleEnemy[_0x5d4113(0x44d)][_0x5d4113(0x37e)]=function(){const _0x29aefa=_0x5d4113;this[_0x29aefa(0x9ed)]['sort']((_0x57f770,_0x18794f)=>{const _0x360b2b=_0x29aefa;return _0x57f770[_0x360b2b(0x3ee)]()[_0x360b2b(0x8bf)]===_0x18794f[_0x360b2b(0x3ee)]()[_0x360b2b(0x8bf)]?_0x57f770['battler']()[_0x360b2b(0x559)]-_0x18794f[_0x360b2b(0x3ee)]()['_baseY']:_0x57f770['battler']()[_0x360b2b(0x8bf)]-_0x18794f[_0x360b2b(0x3ee)]()[_0x360b2b(0x8bf)];});if(SceneManager['isBattleFlipped']()){if(_0x29aefa(0x357)==='TDWfG'){const _0xc10a4f=_0x1635f4[_0x29aefa(0x441)]();this[_0x29aefa(0x2ce)](_0x29aefa(0xa0d),_0x388343,[_0x20e3d1],_0xc10a4f['animationId']);}else this[_0x29aefa(0x9ed)][_0x29aefa(0x679)]();}},Window_BattleEnemy[_0x5d4113(0x44d)][_0x5d4113(0xbec)]=function(){const _0x108497=_0x5d4113,_0x59909c=VisuMZ['BattleCore']['Settings'][_0x108497(0x194)];if(_0x59909c['LastSelected']){if(_0x108497(0x727)!==_0x108497(0x727))return _0x57c6a9[_0x108497(0x710)][_0x108497(0x980)][_0x108497(0x701)](this,_0x2693d5);else this[_0x108497(0x20a)]();}else this['autoSelectPriority']();},Window_BattleEnemy[_0x5d4113(0x44d)]['autoSelectLastSelected']=function(){const _0xb9f39f=_0x5d4113;if(this['_lastEnemy']&&this['_enemies'][_0xb9f39f(0x4b0)](this[_0xb9f39f(0x82f)])){const _0x4bf255=this[_0xb9f39f(0x9ed)][_0xb9f39f(0x6ef)](this[_0xb9f39f(0x82f)]);this[_0xb9f39f(0x5c0)](_0x4bf255);}else this[_0xb9f39f(0x4fc)]();},Window_BattleEnemy[_0x5d4113(0x44d)][_0x5d4113(0x4fc)]=function(){const _0x2f6a1c=_0x5d4113,_0x2a056c=VisuMZ['BattleCore']['Settings'][_0x2f6a1c(0x194)];let _0x248682=![];$gameSystem['isSideView']()?_0x248682=_0x2a056c[_0x2f6a1c(0x770)]:_0x248682=_0x2a056c[_0x2f6a1c(0x6e3)],this[_0x2f6a1c(0x5c0)](_0x248682?this[_0x2f6a1c(0xb8c)]()-0x1:0x0);},Window_BattleEnemy[_0x5d4113(0x44d)]['callOkHandler']=function(){const _0x5858bc=_0x5d4113;Window_Selectable['prototype'][_0x5858bc(0xc81)][_0x5858bc(0x701)](this),this[_0x5858bc(0x82f)]=this[_0x5858bc(0x258)]();},Window_BattleItem[_0x5d4113(0x44d)]['includes']=function(_0x52a53f){const _0x29e36a=_0x5d4113;if(!_0x52a53f)return![];return _0x52a53f['occasion']===0x0||_0x52a53f[_0x29e36a(0x3b8)]===0x1;};function Window_AutoBattleCancel(){const _0x35f2b4=_0x5d4113;this[_0x35f2b4(0x7e2)](...arguments);}Window_AutoBattleCancel[_0x5d4113(0x44d)]=Object[_0x5d4113(0x5ac)](Window_Base['prototype']),Window_AutoBattleCancel[_0x5d4113(0x44d)][_0x5d4113(0x8ab)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x5d4113(0x44d)][_0x5d4113(0x7e2)]=function(_0x491c9e){const _0x2e9317=_0x5d4113;Window_Base[_0x2e9317(0x44d)]['initialize'][_0x2e9317(0x701)](this,_0x491c9e),this['setBackgroundType'](this[_0x2e9317(0xaf4)]()),this['refresh']();},Window_AutoBattleCancel[_0x5d4113(0x44d)][_0x5d4113(0xaf4)]=function(){const _0x3dab2a=_0x5d4113;return VisuMZ[_0x3dab2a(0x710)]['Settings'][_0x3dab2a(0x9e5)][_0x3dab2a(0xbeb)];},Window_AutoBattleCancel['prototype'][_0x5d4113(0x602)]=function(){const _0x5dd443=_0x5d4113;this[_0x5dd443(0x476)]['clear']();const _0x6ccc77=VisuMZ[_0x5dd443(0x710)][_0x5dd443(0x326)][_0x5dd443(0x9e5)][_0x5dd443(0x82e)],_0x5021ea=_0x6ccc77[_0x5dd443(0x85d)](this[_0x5dd443(0x392)](),this[_0x5dd443(0x82c)]()),_0x27681d=this[_0x5dd443(0x2a1)](_0x5021ea)['width'],_0x22f331=Math[_0x5dd443(0xa63)]((this['innerWidth']-_0x27681d)/0x2);this[_0x5dd443(0x8ca)](_0x5021ea,_0x22f331,0x0,_0x27681d);},Window_AutoBattleCancel[_0x5d4113(0x44d)][_0x5d4113(0x392)]=function(){const _0x528164=_0x5d4113;if(Imported['VisuMZ_0_CoreEngine']){if('LomeS'!=='LomeS')this['startMotion'](_0x528164(0xb59));else return TextManager['getInputButtonString']('ok');}else return VisuMZ['BattleCore'][_0x528164(0x326)][_0x528164(0x9e5)][_0x528164(0xb4f)];},Window_AutoBattleCancel['prototype']['cancelButtonText']=function(){const _0x242a45=_0x5d4113;return Imported[_0x242a45(0x567)]?TextManager['getInputButtonString'](_0x242a45(0x4cd)):VisuMZ['BattleCore'][_0x242a45(0x326)][_0x242a45(0x9e5)][_0x242a45(0x420)];},Window_AutoBattleCancel['prototype']['update']=function(){const _0x5aa092=_0x5d4113;Window_Base['prototype']['update'][_0x5aa092(0x701)](this),this[_0x5aa092(0x80f)](),this['updateCancel']();},Window_AutoBattleCancel['prototype'][_0x5d4113(0x80f)]=function(){const _0x48b959=_0x5d4113;this['visible']=BattleManager[_0x48b959(0xab3)];},Window_AutoBattleCancel[_0x5d4113(0x44d)][_0x5d4113(0x94c)]=function(){const _0x3fd9ad=_0x5d4113;if(!BattleManager[_0x3fd9ad(0xab3)])return;(Input[_0x3fd9ad(0x9ec)]('ok')||Input[_0x3fd9ad(0x9ec)](_0x3fd9ad(0x4cd))||TouchInput[_0x3fd9ad(0x694)]()||TouchInput['isCancelled']())&&(_0x3fd9ad(0x7c4)!==_0x3fd9ad(0x7c4)?(_0x5cb657['BattleCore']['Scene_Battle_createActorCommandWindow'][_0x3fd9ad(0x701)](this),this['createActorCommandWindowBattleCore']()):(SoundManager[_0x3fd9ad(0xb26)](),BattleManager['_autoBattle']=![],Input[_0x3fd9ad(0x192)](),TouchInput[_0x3fd9ad(0x192)]()));};function Window_EnemyName(){this['initialize'](...arguments);}Window_EnemyName[_0x5d4113(0x44d)]=Object[_0x5d4113(0x5ac)](Window_StatusBase[_0x5d4113(0x44d)]),Window_EnemyName[_0x5d4113(0x44d)]['constructor']=Window_EnemyName,Window_EnemyName[_0x5d4113(0x44d)][_0x5d4113(0x7e2)]=function(_0x4395f3){const _0x2c73e2=_0x5d4113;this[_0x2c73e2(0x84c)]=_0x4395f3,this[_0x2c73e2(0x45e)]='';const _0x45a329=new Rectangle(0x0,0x0,Graphics[_0x2c73e2(0xbb8)],this['lineHeight']()*0x4);Window_StatusBase[_0x2c73e2(0x44d)][_0x2c73e2(0x7e2)]['call'](this,_0x45a329),this[_0x2c73e2(0x30b)](0x2),this[_0x2c73e2(0x777)]=0x0;},Window_EnemyName[_0x5d4113(0x44d)]['updatePadding']=function(){const _0x421f13=_0x5d4113;this[_0x421f13(0x31a)]=0x0;},Window_EnemyName[_0x5d4113(0x44d)]['enemy']=function(){const _0xd24109=_0x5d4113;return $gameTroop['members']()[this[_0xd24109(0x84c)]];},Window_EnemyName[_0x5d4113(0x44d)][_0x5d4113(0x5fb)]=function(){const _0x13ce6a=_0x5d4113;Window_StatusBase[_0x13ce6a(0x44d)][_0x13ce6a(0x5fb)][_0x13ce6a(0x701)](this),this[_0x13ce6a(0x258)]()&&this[_0x13ce6a(0x258)]()[_0x13ce6a(0x2c0)]()!==this[_0x13ce6a(0x45e)]&&(_0x13ce6a(0xb56)!=='Umfsg'?(this['_text']=this[_0x13ce6a(0x258)]()['name'](),this[_0x13ce6a(0x602)]()):(_0x582293[_0x13ce6a(0x710)][_0x13ce6a(0x6fe)][_0x13ce6a(0x701)](this),this[_0x13ce6a(0x4be)]&&(this[_0x13ce6a(0x4be)]=_0x4e1d07,_0x2374ab[_0x13ce6a(0x5a4)][_0x13ce6a(0x935)]()))),this[_0x13ce6a(0xa7e)](),this['updatePosition']();},Window_EnemyName['prototype'][_0x5d4113(0xa7e)]=function(){const _0x16963e=_0x5d4113;if(!this['enemy']()){if(this[_0x16963e(0x777)]>0x0)this[_0x16963e(0x777)]-=0x10;}else{if(this[_0x16963e(0x258)]()[_0x16963e(0xa26)]()){if(_0x16963e(0x17c)==='Qpafp'){if(this['contentsOpacity']>0x0)this[_0x16963e(0x777)]-=0x10;}else _0x535dd0['prototype'][_0x16963e(0x257)][_0x16963e(0x701)](this);}else{if(SceneManager['_scene']['_enemyWindow']&&SceneManager[_0x16963e(0x5a4)][_0x16963e(0x684)][_0x16963e(0x61d)]&&SceneManager[_0x16963e(0x5a4)][_0x16963e(0x684)][_0x16963e(0x9ed)][_0x16963e(0x4b0)](this[_0x16963e(0x258)]())){if(this[_0x16963e(0x777)]<0xff)this[_0x16963e(0x777)]+=0x10;}else this[_0x16963e(0x777)]>0x0&&(_0x16963e(0x2ac)==='kZZKU'?this[_0x16963e(0x777)]-=0x10:this[_0x16963e(0xb5c)](_0x16963e(0xb59)));}}},Window_EnemyName[_0x5d4113(0x44d)]['updatePosition']=function(){const _0x4179d6=_0x5d4113;if(!this[_0x4179d6(0x258)]())return;SceneManager[_0x4179d6(0x800)]()?'Vuxfx'!=='EALsw'?this['x']=Graphics['boxWidth']-this[_0x4179d6(0x258)]()[_0x4179d6(0x3ee)]()[_0x4179d6(0x8bf)]:this[_0x4179d6(0x7e2)](...arguments):this['x']=this[_0x4179d6(0x258)]()['battler']()['_baseX'];this['x']-=Math[_0x4179d6(0xb50)](this['width']/0x2),this['y']=this[_0x4179d6(0x258)]()[_0x4179d6(0x3ee)]()[_0x4179d6(0x559)]-Math[_0x4179d6(0xb50)](this[_0x4179d6(0x950)]()*1.5);const _0x4c231f=VisuMZ['BattleCore'][_0x4179d6(0x326)][_0x4179d6(0x194)];this['x']+=_0x4c231f[_0x4179d6(0xa48)]||0x0,this['y']+=_0x4c231f[_0x4179d6(0x6cf)]||0x0;},Window_EnemyName['prototype'][_0x5d4113(0x2fc)]=function(){const _0x28653b=_0x5d4113;Window_Base[_0x28653b(0x44d)][_0x28653b(0x2fc)][_0x28653b(0x701)](this),this[_0x28653b(0x476)][_0x28653b(0x864)]=VisuMZ['BattleCore']['Settings']['Enemy'][_0x28653b(0x682)];},Window_EnemyName[_0x5d4113(0x44d)]['refresh']=function(){const _0x4f061e=_0x5d4113;Window_StatusBase[_0x4f061e(0x44d)][_0x4f061e(0x602)][_0x4f061e(0x701)](this),this['contents'][_0x4f061e(0x192)]();if(!this[_0x4f061e(0x258)]())return;this[_0x4f061e(0x582)]();},Window_EnemyName[_0x5d4113(0x44d)][_0x5d4113(0x582)]=function(){const _0x436d3=_0x5d4113;this[_0x436d3(0x45e)]=this['enemy']()[_0x436d3(0x2c0)]();const _0x356188=this[_0x436d3(0x2a1)](this[_0x436d3(0x45e)])['width'],_0x5e3d5c=Math[_0x436d3(0xb50)]((this[_0x436d3(0xa05)]-_0x356188)/0x2);this[_0x436d3(0x8ca)](this[_0x436d3(0x45e)],_0x5e3d5c,0x0,_0x356188+0x8);},Window_BattleLog['prototype'][_0x5d4113(0x4b9)]=function(){const _0x1ce6a7=_0x5d4113;return VisuMZ[_0x1ce6a7(0x710)][_0x1ce6a7(0x326)][_0x1ce6a7(0xb91)][_0x1ce6a7(0x386)];},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x344)]=function(){return VisuMZ['BattleCore']['Settings']['BattleLog']['MessageWait'];},Window_BattleLog['prototype'][_0x5d4113(0x907)]=function(){const _0x1ad7ae=_0x5d4113;return VisuMZ[_0x1ad7ae(0x710)]['Settings'][_0x1ad7ae(0xb91)][_0x1ad7ae(0x395)];},Window_BattleLog['prototype'][_0x5d4113(0x7d4)]=function(){return![];},Window_BattleLog[_0x5d4113(0x44d)]['actionEffect']=function(_0x46eaab,_0x4456d1){const _0x48170c=_0x5d4113;this[_0x48170c(0xc1c)](_0x48170c(0xb32)),BattleManager[_0x48170c(0xb52)](_0x46eaab,_0x4456d1),this[_0x48170c(0xa6b)]();},Window_BattleLog[_0x5d4113(0x44d)]['actionSplicePoint']=function(){const _0xa8f06c=_0x5d4113;this[_0xa8f06c(0xa6b)]();},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x2ce)]=function(_0x20d197){const _0x5bcbfa=_0x5d4113,_0x306246=Array['prototype'][_0x5bcbfa(0x481)][_0x5bcbfa(0x701)](arguments,0x1),_0x21cfe8={'name':_0x20d197,'params':_0x306246},_0x4c154d=this[_0x5bcbfa(0x793)]['map'](_0x33469b=>_0x33469b[_0x5bcbfa(0x2c0)])['indexOf']('actionSplicePoint');if(_0x4c154d>=0x0){if(_0x5bcbfa(0x393)!=='oNRHt')this[_0x5bcbfa(0x793)]['splice'](_0x4c154d,0x0,_0x21cfe8);else{const _0x1c77ba=_0x3b2c6e(_0x3ebe1d['$1']);return[_0x22e24c[_0x5bcbfa(0x738)]()[_0x1c77ba]];}}else _0x5bcbfa(0x6be)==='FJTYt'?_0x5d287e=_0x2a0768(_0x22b62a['$1']):this[_0x5bcbfa(0x793)]['push'](_0x21cfe8);},Window_BattleLog['prototype'][_0x5d4113(0xc1c)]=function(_0x204548){const _0x582f1b=_0x5d4113,_0x3cb2d9=Array[_0x582f1b(0x44d)][_0x582f1b(0x481)][_0x582f1b(0x701)](arguments,0x1);this[_0x582f1b(0x793)][_0x582f1b(0xc1c)]({'name':_0x204548,'params':_0x3cb2d9});},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0xc4e)]=function(){const _0x2b0ce4=_0x5d4113;if(!$gameTemp[_0x2b0ce4(0x4f1)]())return;console['log'](this[_0x2b0ce4(0x793)][_0x2b0ce4(0x390)](_0x51097d=>_0x51097d[_0x2b0ce4(0x2c0)])[_0x2b0ce4(0x45f)]('\x0a'));},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x633)]=Window_BattleLog[_0x5d4113(0x44d)]['refresh'],Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x602)]=function(){const _0xc18709=_0x5d4113;this[_0xc18709(0x511)]=!![];},VisuMZ['BattleCore'][_0x5d4113(0xc1f)]=Window_BattleLog[_0x5d4113(0x44d)]['update'],Window_BattleLog['prototype']['update']=function(){const _0x3608bf=_0x5d4113;VisuMZ[_0x3608bf(0x710)][_0x3608bf(0xc1f)][_0x3608bf(0x701)](this);if(this[_0x3608bf(0x511)])this['processRefresh']();},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x95e)]=function(){const _0x21c27f=_0x5d4113;this[_0x21c27f(0x511)]=![],VisuMZ[_0x21c27f(0x710)][_0x21c27f(0x633)][_0x21c27f(0x701)](this);},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x4ad)]=function(_0x151493){const _0x164900=_0x5d4113;let _0x394e96=VisuMZ[_0x164900(0x710)][_0x164900(0x326)][_0x164900(0xb91)][_0x164900(0x14f)][_0x164900(0x172)]()[_0x164900(0xacb)](),_0x27b38a=this[_0x164900(0xb6c)][_0x151493];if(_0x27b38a['match'](/<LEFT>/i))_0x394e96=_0x164900(0x857);else{if(_0x27b38a[_0x164900(0xb51)](/<CENTER>/i))_0x164900(0x84b)!==_0x164900(0x6fd)?_0x394e96=_0x164900(0x4d5):(this[_0x164900(0x480)]['show'](),this[_0x164900(0x9b6)][_0x164900(0x712)](),this[_0x164900(0x43d)]['activate']());else _0x27b38a[_0x164900(0xb51)](/<RIGHT>/i)&&(_0x394e96='right');}_0x27b38a=_0x27b38a['replace'](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x27b38a=_0x27b38a['replace'](/\\I\[0\]/gi,'');const _0x1dcaaf=this[_0x164900(0x1ce)](_0x151493);this[_0x164900(0x476)][_0x164900(0x52e)](_0x1dcaaf['x'],_0x1dcaaf['y'],_0x1dcaaf['width'],_0x1dcaaf[_0x164900(0x6ce)]);const _0x2fbce9=this[_0x164900(0x2a1)](_0x27b38a)['width'];let _0x257aea=_0x1dcaaf['x'];if(_0x394e96===_0x164900(0x4d5))_0x164900(0x7c5)===_0x164900(0x7c5)?_0x257aea+=(_0x1dcaaf[_0x164900(0x61e)]-_0x2fbce9)/0x2:this[_0x164900(0x561)]=!![];else _0x394e96===_0x164900(0x87b)&&(_0x257aea+=_0x1dcaaf['width']-_0x2fbce9);this[_0x164900(0x8ca)](_0x27b38a,_0x257aea,_0x1dcaaf['y'],_0x2fbce9+0x8);},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x93e)]=function(_0x52ecf2){const _0x50a3c8=_0x5d4113;this[_0x50a3c8(0xb6c)]['push'](_0x52ecf2),this[_0x50a3c8(0x602)](),this['callNextMethod']();},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x9d3)]=function(){const _0x1f546a=_0x5d4113;let _0x73c3bc=![];switch(this[_0x1f546a(0xbdc)]){case _0x1f546a(0xc8c):_0x73c3bc=this[_0x1f546a(0xa9a)][_0x1f546a(0x6c2)]();break;case _0x1f546a(0x418):_0x73c3bc=this['_spriteset'][_0x1f546a(0x7db)]();break;case'animation':_0x73c3bc=this['_spriteset']['isAnimationPlaying']();break;case'float':_0x73c3bc=this[_0x1f546a(0xa9a)][_0x1f546a(0xaf7)]();break;case'jump':_0x73c3bc=this['_spriteset'][_0x1f546a(0x394)]();break;case _0x1f546a(0x380):_0x73c3bc=this[_0x1f546a(0xa9a)][_0x1f546a(0x610)]();break;}return!_0x73c3bc&&(this[_0x1f546a(0xbdc)]=''),_0x73c3bc;},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x865)]=function(){const _0x36b08b=_0x5d4113;this[_0x36b08b(0x4cc)]('animation');},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x26d)]=function(){const _0x13a694=_0x5d4113;this[_0x13a694(0x4cc)](_0x13a694(0x4cf));},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0xb38)]=function(){const _0x724c3f=_0x5d4113;this[_0x724c3f(0x4cc)]('jump');},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0xadd)]=function(){const _0x55d917=_0x5d4113;this[_0x55d917(0x4cc)](_0x55d917(0x380));},Window_BattleLog['prototype'][_0x5d4113(0x766)]=function(){const _0x17bd36=_0x5d4113,_0x2a6a4a=VisuMZ[_0x17bd36(0x710)][_0x17bd36(0x326)][_0x17bd36(0xb91)];if(!_0x2a6a4a['StartTurnShow'])return;this[_0x17bd36(0x2ce)](_0x17bd36(0x93e),_0x2a6a4a[_0x17bd36(0x84d)]['format']($gameTroop['turnCount']())),this['push'](_0x17bd36(0x542),_0x2a6a4a[_0x17bd36(0x4ab)]),this['push'](_0x17bd36(0x192));},Window_BattleLog['prototype'][_0x5d4113(0x48b)]=function(_0x515199,_0x909240,_0x5189b8){const _0x376610=_0x5d4113;if(this['isCustomActionSequence'](_0x909240))BattleManager[_0x376610(0x268)]();else{if('WRFNU'===_0x376610(0x9f6))return!![];else this[_0x376610(0x229)](_0x515199,_0x909240,_0x5189b8);}},Window_BattleLog['prototype']['isCustomActionSequence']=function(_0x4a2843){const _0x34e669=_0x5d4113;if(!SceneManager[_0x34e669(0x2ab)]())return![];if(!_0x4a2843)return![];if(!_0x4a2843[_0x34e669(0x441)]())return![];if(_0x4a2843[_0x34e669(0x441)]()[_0x34e669(0x80a)][_0x34e669(0xb51)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x34e669(0x322)](_0x4a2843[_0x34e669(0x441)]()))return!![];return![];},Window_BattleLog['prototype']['usePremadeActionSequence']=function(_0xb637ba,_0x46ff12,_0x186973){const _0x4a0fbb=_0x5d4113,_0x126cf2=_0x46ff12[_0x4a0fbb(0x441)]();this[_0x4a0fbb(0xa03)](_0xb637ba,_0x46ff12,_0x186973),this[_0x4a0fbb(0x6fb)](_0xb637ba,_0x46ff12,_0x186973),this[_0x4a0fbb(0x3bf)](_0xb637ba,_0x46ff12,_0x186973);},Window_BattleLog[_0x5d4113(0x44d)]['displayAction']=function(_0x155948,_0x4ce67e){const _0x497002=_0x5d4113,_0x44629b=VisuMZ[_0x497002(0x710)]['Settings'][_0x497002(0xb91)];if(_0x44629b[_0x497002(0xb79)]){if(_0x497002(0xa5c)==='OzqiE'){_0x397f76[_0x497002(0x44d)][_0x497002(0x5d2)][_0x497002(0x701)](this);const _0x1c46be=this[_0x497002(0x30c)]();_0x1c46be===_0x497002(0xc3e)&&this[_0x497002(0x234)]();}else this['push'](_0x497002(0x93e),_0x497002(0x502)[_0x497002(0x85d)](DataManager['battleDisplayText'](_0x4ce67e)));}if(DataManager[_0x497002(0x144)](_0x4ce67e)){if(_0x44629b['ActionSkillMsg1'])this[_0x497002(0x563)](_0x4ce67e[_0x497002(0x91c)],_0x155948,_0x4ce67e);if(_0x44629b[_0x497002(0xbd2)])this[_0x497002(0x563)](_0x4ce67e[_0x497002(0x6cc)],_0x155948,_0x4ce67e);}else{if(_0x44629b[_0x497002(0x24e)])this['displayItemMessage'](TextManager[_0x497002(0xbdd)],_0x155948,_0x4ce67e);}},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0xa03)]=function(_0x3dcea5,_0x3fe819,_0x2bee41){const _0x1c3c60=_0x5d4113,_0x395c5b=_0x3fe819[_0x1c3c60(0x441)]();this[_0x1c3c60(0xa04)](_0x3dcea5,_0x395c5b),this[_0x1c3c60(0x2ce)](_0x1c3c60(0x4c9),_0x3dcea5,_0x2bee41,!![]),this['push'](_0x1c3c60(0x68d),_0x3dcea5,_0x3fe819),this['push'](_0x1c3c60(0x9f7)),this[_0x1c3c60(0x2ce)](_0x1c3c60(0x42e),_0x3dcea5,_0x3fe819),this[_0x1c3c60(0x2ce)](_0x1c3c60(0x865));},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x6fb)]=function(_0x13e6a6,_0x5cca09,_0x5d8ec9){const _0x134633=_0x5d4113;if(this['isMeleeSingleTargetAction'](_0x5cca09))this[_0x134633(0x40b)](_0x13e6a6,_0x5cca09,_0x5d8ec9);else{if(this[_0x134633(0x8f4)](_0x5cca09))'bavoO'!==_0x134633(0x232)?_0x48bb87[_0x134633(0x813)](_0x3dfcfd):this[_0x134633(0x238)](_0x13e6a6,_0x5cca09,_0x5d8ec9);else _0x5cca09[_0x134633(0x556)]()?'qdtwe'!==_0x134633(0xbb0)?(this[_0x134633(0x760)]=this[_0x134633(0x37a)],this[_0x134633(0xa9c)]=this['_targetGrowY']):this[_0x134633(0x5dc)](_0x13e6a6,_0x5cca09,_0x5d8ec9):_0x134633(0xa69)==='YRhaY'?this[_0x134633(0x8ed)](_0x134633(0x707)):this['wholeActionSet'](_0x13e6a6,_0x5cca09,_0x5d8ec9);}},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x573)]=function(_0x5de35f,_0x300126,_0x119c2f,_0x59a8f2){const _0xcde022=_0x5d4113;if(_0x300126){if(_0xcde022(0x468)===_0xcde022(0x468)){const _0x3d26c8=_0x5de35f[_0xcde022(0x3ee)]();this['push'](_0xcde022(0x86a),[_0x5de35f],_0x119c2f,_0x59a8f2),this[_0xcde022(0x2ce)](_0xcde022(0xa1f),_0x5de35f,_0x3d26c8['_homeX'],_0x3d26c8['_homeY'],_0x59a8f2,![],'Linear'),this[_0xcde022(0x2ce)](_0xcde022(0xb5c),[_0x5de35f],_0xcde022(0x8a6)),this[_0xcde022(0x2ce)](_0xcde022(0x9f7)),this[_0xcde022(0x2ce)]('requestMotion',[_0x5de35f],_0xcde022(0x417));}else return;}},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x2db)]=function(_0x270377){const _0x148c5c=_0x5d4113;if(!_0x270377['isPhysical']())return![];if(!_0x270377['isForOne']())return![];if(!_0x270377['isForOpponent']())return![];return VisuMZ['BattleCore'][_0x148c5c(0x326)][_0x148c5c(0x998)][_0x148c5c(0x7eb)];},Window_BattleLog[_0x5d4113(0x44d)]['autoMeleeSingleTargetActionSet']=function(_0x3c18a9,_0x3178cd,_0x3b0fbb){const _0x2133d1=_0x5d4113,_0x2262fe=_0x3c18a9[_0x2133d1(0x621)]()[_0x2133d1(0x917)]<0x2,_0xf2cac5=0x14,_0xa0d311=0x30;_0x2262fe&&('uLnpg'!==_0x2133d1(0x4f9)?(this[_0x2133d1(0x2ce)]('performJump',[_0x3c18a9],_0xa0d311,_0xf2cac5),this[_0x2133d1(0x2ce)](_0x2133d1(0xb81),_0x3c18a9,_0x3b0fbb,_0x2133d1(0x5a8),_0xf2cac5,!![],_0x2133d1(0x1ab),!![]),this[_0x2133d1(0x2ce)]('requestMotion',[_0x3c18a9],'walk'),this[_0x2133d1(0x2ce)](_0x2133d1(0x9f7))):(_0x375465[_0x2133d1(0x44d)][_0x2133d1(0x7e2)][_0x2133d1(0x701)](this),this[_0x2133d1(0x8fd)]()));let _0x4281c9=_0x3178cd['isAttack']()?this[_0x2133d1(0x6bc)](_0x3c18a9):0x1;for(let _0x4097cc=0x0;_0x4097cc<_0x4281c9;_0x4097cc++){if(_0x3178cd[_0x2133d1(0x7fc)]()&&_0x3c18a9[_0x2133d1(0xa65)]()){if(_0x2133d1(0x38f)==='Tdbhf')this[_0x2133d1(0x2ce)](_0x2133d1(0x396),_0x3c18a9,_0x4097cc);else{const _0x130706=this[_0x2133d1(0x514)]()[_0x2133d1(0xaec)]||0x0,_0x54ded4=_0x4311ec[_0x2133d1(0xc27)][_0x130706];_0x54ded4&&this['startWeaponAnimation'](_0x54ded4[_0x2133d1(0x7de)]);}}if(_0x3178cd[_0x2133d1(0x441)]()['animationId']<0x0)this[_0x2133d1(0x5dc)](_0x3c18a9,_0x3178cd,_0x3b0fbb);else{if(_0x2133d1(0x3b9)!==_0x2133d1(0x28b))this[_0x2133d1(0x45b)](_0x3c18a9,_0x3178cd,_0x3b0fbb);else{const _0x1902a1=_0x3ec9a8(_0x5bad9f['$1'])[_0x2133d1(0x3d8)](/[\r\n]+/)['remove'](''),_0x1f07ab=_0x3f171b[_0x2133d1(0x1dd)](_0x1902a1);_0x54a31b[_0x2133d1(0xaec)]=_0x2c373c['getWtypeIdWithName'](_0x1f07ab);}}}_0x3178cd[_0x2133d1(0x7fc)]()&&_0x3c18a9[_0x2133d1(0xa65)]()&&this[_0x2133d1(0x2ce)](_0x2133d1(0xbf7),_0x3c18a9),this[_0x2133d1(0x2ce)](_0x2133d1(0x4c9),_0x3c18a9,_0x3b0fbb,![]),this[_0x2133d1(0x573)](_0x3c18a9,_0x2262fe,_0xa0d311,_0xf2cac5);},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x8f4)]=function(_0x2d8e73){const _0x182b33=_0x5d4113;if(!_0x2d8e73['isPhysical']())return![];if(!_0x2d8e73['isForAll']())return![];if(!_0x2d8e73[_0x182b33(0x836)]())return![];return VisuMZ[_0x182b33(0x710)][_0x182b33(0x326)][_0x182b33(0x998)][_0x182b33(0x3e2)];},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x238)]=function(_0x5bd0db,_0x406727,_0x524f44){const _0x277ec9=_0x5d4113,_0x5966ca=_0x5bd0db[_0x277ec9(0x621)]()['type']<0x2,_0x57302a=0x14,_0x5e3976=0x30;_0x5966ca&&(this[_0x277ec9(0x2ce)](_0x277ec9(0x86a),[_0x5bd0db],_0x5e3976,_0x57302a),this[_0x277ec9(0x2ce)](_0x277ec9(0xb81),_0x5bd0db,_0x524f44,_0x277ec9(0x8e1),_0x57302a,!![],_0x277ec9(0x1ab),!![]),this[_0x277ec9(0x2ce)]('requestMotion',[_0x5bd0db],_0x277ec9(0x417)),this['push'](_0x277ec9(0x9f7)));let _0x57edb0=_0x406727[_0x277ec9(0x7fc)]()?this['getDualWieldTimes'](_0x5bd0db):0x1;for(let _0x3d57f2=0x0;_0x3d57f2<_0x57edb0;_0x3d57f2++){if(_0x406727[_0x277ec9(0x7fc)]()&&_0x5bd0db[_0x277ec9(0xa65)]()){if(_0x277ec9(0x539)===_0x277ec9(0x539))this[_0x277ec9(0x2ce)]('setActiveWeaponSet',_0x5bd0db,_0x3d57f2);else{const _0x12b8e1=this[_0x277ec9(0xabe)](),_0x2d4fc7=_0x314b1d[_0x277ec9(0x710)]['Settings']['PartyCmd'][_0x277ec9(0xc2d)],_0x1b8b5d=_0x12b8e1===_0x277ec9(0x5ae)?_0x2fa36a[_0x277ec9(0x382)]:'\x5cI[%1]%2'[_0x277ec9(0x85d)](_0x2d4fc7,_0x31ffc5[_0x277ec9(0x382)]),_0x37e025=this['isEscapeCommandEnabled']();this[_0x277ec9(0x774)](_0x1b8b5d,'escape',_0x37e025);}}this['wholeActionSet'](_0x5bd0db,_0x406727,_0x524f44);}_0x406727[_0x277ec9(0x7fc)]()&&_0x5bd0db[_0x277ec9(0xa65)]()&&this[_0x277ec9(0x2ce)](_0x277ec9(0xbf7),_0x5bd0db),this[_0x277ec9(0x2ce)](_0x277ec9(0x4c9),_0x5bd0db,_0x524f44,![]),this[_0x277ec9(0x573)](_0x5bd0db,_0x5966ca,_0x5e3976,_0x57302a);},Window_BattleLog[_0x5d4113(0x44d)]['targetActionSet']=function(_0x5c6694,_0x2368ee,_0x1c13e8){const _0x3113a4=_0x5d4113,_0xa9ac8d=_0x2368ee['item']();for(const _0x18164e of _0x1c13e8){if(!_0x18164e)continue;this[_0x3113a4(0x2ce)](_0x3113a4(0xc78),_0x5c6694,_0x2368ee),this[_0x3113a4(0x2ce)]('waitCount',Sprite_Battler[_0x3113a4(0xa0a)]),this[_0x3113a4(0x2ce)]('showAnimation',_0x5c6694,[_0x18164e],_0xa9ac8d[_0x3113a4(0xbed)]),this[_0x3113a4(0x2ce)](_0x3113a4(0x542),0x18),this[_0x3113a4(0x2ce)](_0x3113a4(0x14e),_0x5c6694,_0x18164e);}},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x45b)]=function(_0xe7685f,_0x57123f,_0x16e6d3){const _0x1ec3da=_0x5d4113,_0x55e64a=_0x57123f[_0x1ec3da(0x441)]();this[_0x1ec3da(0x2ce)]('performAction',_0xe7685f,_0x57123f),this[_0x1ec3da(0x2ce)](_0x1ec3da(0x542),Sprite_Battler[_0x1ec3da(0xa0a)]),this['push'](_0x1ec3da(0xa0d),_0xe7685f,_0x16e6d3['clone'](),_0x55e64a[_0x1ec3da(0xbed)]),this[_0x1ec3da(0x2ce)](_0x1ec3da(0x865));for(const _0x4fb4ed of _0x16e6d3){if('dftmk'===_0x1ec3da(0xa9b)){if(!_0x4fb4ed)continue;this[_0x1ec3da(0x2ce)](_0x1ec3da(0x14e),_0xe7685f,_0x4fb4ed);}else this[_0x1ec3da(0x432)][_0x1ec3da(0x87e)]=_0x4f43b8[_0x1ec3da(0x710)][_0x1ec3da(0x326)][_0x1ec3da(0xc03)][_0x1ec3da(0xaa6)];}},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x3bf)]=function(_0xd08c70,_0x301000,_0x294886){const _0x112938=_0x5d4113,_0x491512=_0x301000[_0x112938(0x441)]();this[_0x112938(0x2ce)]('applyImmortal',_0xd08c70,_0x294886,![]),this['push']('waitForNewLine'),this[_0x112938(0x2ce)](_0x112938(0x91f)),this[_0x112938(0x2ce)](_0x112938(0x192)),this['push']('performActionEnd',_0xd08c70),this['push'](_0x112938(0x9f7));},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x2e5)]=function(_0x2350ec){},VisuMZ['BattleCore']['Window_BattleLog_displayCurrentState']=Window_BattleLog['prototype'][_0x5d4113(0x9ff)],Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x9ff)]=function(_0x207a03){const _0x36013e=_0x5d4113;if(!VisuMZ[_0x36013e(0x710)][_0x36013e(0x326)][_0x36013e(0xb91)][_0x36013e(0xc29)])return;VisuMZ[_0x36013e(0x710)][_0x36013e(0x70b)]['call'](this,_0x207a03);},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x3d7)]=function(_0x179e4a){const _0x29593d=_0x5d4113;this['push'](_0x29593d(0x5fc),_0x179e4a);VisuMZ[_0x29593d(0x710)][_0x29593d(0x326)][_0x29593d(0x998)][_0x29593d(0x619)]&&this[_0x29593d(0x2ce)]('showAnimation',_0x179e4a,[BattleManager['_subject']],-0x1);if(!VisuMZ['BattleCore'][_0x29593d(0x326)]['BattleLog'][_0x29593d(0x7f1)])return;this[_0x29593d(0x2ce)](_0x29593d(0x93e),TextManager['counterAttack'][_0x29593d(0x85d)](_0x179e4a[_0x29593d(0x2c0)]()));},Window_BattleLog['prototype'][_0x5d4113(0x2fe)]=function(_0x5f5460){const _0x478f63=_0x5d4113;this[_0x478f63(0x2ce)](_0x478f63(0x3eb),_0x5f5460);if(!VisuMZ['BattleCore']['Settings'][_0x478f63(0xb91)][_0x478f63(0x9bf)])return;this[_0x478f63(0x2ce)]('addText',TextManager['magicReflection'][_0x478f63(0x85d)](_0x5f5460[_0x478f63(0x2c0)]()));},Window_BattleLog[_0x5d4113(0x44d)]['displayReflectionPlayBack']=function(_0x228a19,_0x4c9bf6){const _0x5a06e7=_0x5d4113;if(VisuMZ[_0x5a06e7(0x710)]['Settings'][_0x5a06e7(0x998)][_0x5a06e7(0xb4e)]){const _0x5c7bd5=_0x4c9bf6['item']();this['push'](_0x5a06e7(0xa0d),_0x228a19,[_0x228a19],_0x5c7bd5[_0x5a06e7(0xbed)]);}},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0xae1)]=function(_0x2e9aca,_0x52e05e){const _0x2f4c6e=_0x5d4113;this[_0x2f4c6e(0x2ce)](_0x2f4c6e(0x937),_0x2e9aca,_0x52e05e);if(!VisuMZ[_0x2f4c6e(0x710)][_0x2f4c6e(0x326)][_0x2f4c6e(0xb91)][_0x2f4c6e(0x1ec)])return;const _0x57b6ca=_0x2e9aca[_0x2f4c6e(0x2c0)](),_0x1a7943=TextManager['substitute'][_0x2f4c6e(0x85d)](_0x57b6ca,_0x52e05e['name']());this[_0x2f4c6e(0x2ce)](_0x2f4c6e(0x93e),_0x1a7943);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x302)]=Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x374)],Window_BattleLog['prototype'][_0x5d4113(0x374)]=function(_0x4e3d5f,_0x486282){const _0x2df9be=_0x5d4113;VisuMZ[_0x2df9be(0x710)][_0x2df9be(0x302)][_0x2df9be(0x701)](this,_0x4e3d5f,_0x486282);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x4bf)]=Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x8dc)],Window_BattleLog['prototype'][_0x5d4113(0x8dc)]=function(_0x544508){const _0x1be0dd=_0x5d4113;if(!VisuMZ['BattleCore']['Settings']['BattleLog'][_0x1be0dd(0x16f)])return;VisuMZ[_0x1be0dd(0x710)][_0x1be0dd(0x4bf)]['call'](this,_0x544508);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xc6f)]=Window_BattleLog[_0x5d4113(0x44d)]['displayCritical'],Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x2fa)]=function(_0x238bfe){const _0x313c5f=_0x5d4113;if(!VisuMZ[_0x313c5f(0x710)][_0x313c5f(0x326)][_0x313c5f(0xb91)][_0x313c5f(0xbbc)])return;VisuMZ[_0x313c5f(0x710)]['Window_BattleLog_displayCritical'][_0x313c5f(0x701)](this,_0x238bfe);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xa6a)]=Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x4c1)],Window_BattleLog[_0x5d4113(0x44d)]['displayMiss']=function(_0x2090fc){const _0x47cdc5=_0x5d4113;!VisuMZ[_0x47cdc5(0x710)][_0x47cdc5(0x326)][_0x47cdc5(0xb91)]['ShowMissEvasion']?_0x47cdc5(0x51f)!==_0x47cdc5(0x5e4)?this[_0x47cdc5(0x2ce)]('performMiss',_0x2090fc):_0x39e681['_subject'][_0x47cdc5(0x7a6)]()[_0x47cdc5(0x5d0)](_0x19ad30):VisuMZ[_0x47cdc5(0x710)][_0x47cdc5(0xa6a)][_0x47cdc5(0x701)](this,_0x2090fc);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x25c)]=Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x85e)],Window_BattleLog['prototype'][_0x5d4113(0x85e)]=function(_0x25f830){const _0x49f150=_0x5d4113;if(!VisuMZ['BattleCore']['Settings'][_0x49f150(0xb91)][_0x49f150(0xb53)]){if(_0x25f830[_0x49f150(0x47b)]()[_0x49f150(0xc55)]){if('ebbNQ'!=='ebbNQ'){if(this[_0x49f150(0x62a)]===_0x2b5403)this['initBattlePortrait']();return this['_battlePortrait'];}else this[_0x49f150(0x2ce)](_0x49f150(0x2d3),_0x25f830);}else'auysM'!==_0x49f150(0x1cb)?this[_0x49f150(0x2ce)](_0x49f150(0x49e),_0x25f830):this[_0x49f150(0xa02)]='list';}else VisuMZ[_0x49f150(0x710)][_0x49f150(0x25c)][_0x49f150(0x701)](this,_0x25f830);},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x2e3)]=function(_0x49045c){const _0x2e9ce1=_0x5d4113;if(_0x49045c[_0x2e9ce1(0x47b)]()[_0x2e9ce1(0x375)]){_0x49045c[_0x2e9ce1(0x5cc)]=0x0;_0x49045c['result']()[_0x2e9ce1(0xa16)]>0x0&&!_0x49045c[_0x2e9ce1(0x47b)]()[_0x2e9ce1(0xb33)]&&(_0x49045c[_0x2e9ce1(0x5cc)]=_0x49045c['result']()['hpDamage'],this[_0x2e9ce1(0x2ce)](_0x2e9ce1(0x353),_0x49045c));if(_0x49045c['result']()[_0x2e9ce1(0xa16)]<0x0){if('qpwcS'!==_0x2e9ce1(0xa91))this[_0x2e9ce1(0x2ce)](_0x2e9ce1(0x171),_0x49045c);else{const _0x521b64=_0x26318b[_0x2e9ce1(0x80a)];if(_0x521b64[_0x2e9ce1(0xb51)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x5726ea(_0x1813b7['$1'])*0.01;else{if(_0x521b64['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x4214b0(_0x16e83a['$1'])||0x0;}}}VisuMZ[_0x2e9ce1(0x710)][_0x2e9ce1(0x326)][_0x2e9ce1(0xb91)]['ShowHpDmg']&&this['push'](_0x2e9ce1(0x93e),this[_0x2e9ce1(0x435)](_0x49045c));}},VisuMZ[_0x5d4113(0x710)]['Window_BattleLog_displayMpDamage']=Window_BattleLog[_0x5d4113(0x44d)]['displayMpDamage'],Window_BattleLog['prototype']['displayMpDamage']=function(_0x4bafb7){const _0x3c5749=_0x5d4113;if(!VisuMZ[_0x3c5749(0x710)]['Settings'][_0x3c5749(0xb91)][_0x3c5749(0x9bd)])return;VisuMZ[_0x3c5749(0x710)][_0x3c5749(0x2ee)]['call'](this,_0x4bafb7);},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x8b8)]=Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x329)],Window_BattleLog['prototype'][_0x5d4113(0x329)]=function(_0x1a45f0){const _0x5295f3=_0x5d4113;if(!VisuMZ[_0x5295f3(0x710)][_0x5295f3(0x326)][_0x5295f3(0xb91)][_0x5295f3(0x5f2)])return;VisuMZ['BattleCore'][_0x5295f3(0x8b8)][_0x5295f3(0x701)](this,_0x1a45f0);},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0xaef)]=function(_0x417671){const _0x6b23d3=_0x5d4113;_0x417671[_0x6b23d3(0x47b)]()[_0x6b23d3(0x985)]()&&(_0x6b23d3(0x9c9)===_0x6b23d3(0xa7b)?this[_0x6b23d3(0x754)]():(this['push'](_0x6b23d3(0xa1c)),this['displayChangedStates'](_0x417671),this[_0x6b23d3(0x9a3)](_0x417671),this[_0x6b23d3(0x2ce)](_0x6b23d3(0x430))));},Window_BattleLog['prototype']['displayAddedStates']=function(_0x852de8){const _0x58198d=_0x5d4113,_0x32a99c=_0x852de8['result'](),_0x51fda2=_0x32a99c[_0x58198d(0x32c)]();for(const _0x2f8d1d of _0x51fda2){const _0x5b338a=_0x852de8[_0x58198d(0xa65)]()?_0x2f8d1d[_0x58198d(0x91c)]:_0x2f8d1d[_0x58198d(0x6cc)];_0x5b338a&&VisuMZ[_0x58198d(0x710)][_0x58198d(0x326)]['BattleLog'][_0x58198d(0x1d7)]&&(this[_0x58198d(0x2ce)]('fnordAddedStates'),this[_0x58198d(0x2ce)]('popBaseLine'),this[_0x58198d(0x2ce)](_0x58198d(0xa1c)),this['push'](_0x58198d(0x93e),_0x5b338a['format'](_0x852de8[_0x58198d(0x2c0)]())),this[_0x58198d(0x2ce)](_0x58198d(0x64b))),_0x2f8d1d['id']===_0x852de8[_0x58198d(0x747)]()&&this['push'](_0x58198d(0x47f),_0x852de8);}},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0xaf1)]=function(){},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x5d6)]=function(_0x485b85){const _0x42b7e3=_0x5d4113;if(!VisuMZ[_0x42b7e3(0x710)][_0x42b7e3(0x326)][_0x42b7e3(0xb91)][_0x42b7e3(0x25d)])return;const _0x57830f=_0x485b85['result'](),_0x338df=_0x57830f['removedStateObjects']();for(const _0x1f12eb of _0x338df){if(_0x42b7e3(0x5e6)===_0x42b7e3(0x5e6)){if(_0x1f12eb['message4']){if('ylEuo'===_0x42b7e3(0x799)){const _0x120b34=_0x3bd6d7[_0x42b7e3(0x5a4)]['_statusWindow'];_0x120b34&&_0x120b34['refreshActorPortrait'](this);}else this[_0x42b7e3(0x2ce)](_0x42b7e3(0x677)),this[_0x42b7e3(0x2ce)](_0x42b7e3(0xae8)),this[_0x42b7e3(0x2ce)]('pushBaseLine'),this[_0x42b7e3(0x2ce)](_0x42b7e3(0x93e),_0x1f12eb[_0x42b7e3(0x984)][_0x42b7e3(0x85d)](_0x485b85['name']())),this[_0x42b7e3(0x2ce)](_0x42b7e3(0x64b));}}else this[_0x42b7e3(0x492)][_0x42b7e3(0x39c)]=![];}},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x677)]=function(){},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x9a3)]=function(_0x5446ed){const _0x5edea9=_0x5d4113,_0x3a2a60=VisuMZ[_0x5edea9(0x710)][_0x5edea9(0x326)][_0x5edea9(0xb91)],_0x3aa6c2=_0x5446ed[_0x5edea9(0x47b)]();if(_0x3a2a60[_0x5edea9(0x68c)])this[_0x5edea9(0xb05)](_0x5446ed,_0x3aa6c2[_0x5edea9(0xad3)],TextManager['buffAdd']);if(_0x3a2a60[_0x5edea9(0xad8)])this[_0x5edea9(0xb05)](_0x5446ed,_0x3aa6c2['addedDebuffs'],TextManager[_0x5edea9(0x622)]);if(_0x3a2a60[_0x5edea9(0x499)])this[_0x5edea9(0xb05)](_0x5446ed,_0x3aa6c2[_0x5edea9(0x7e1)],TextManager['buffRemove']);},Window_BattleLog[_0x5d4113(0x44d)]['displayBuffs']=function(_0x48068f,_0xb4af04,_0x370d47){const _0x42b67d=_0x5d4113;for(const _0x3f8226 of _0xb4af04){const _0x238a42=_0x370d47[_0x42b67d(0x85d)](_0x48068f['name'](),TextManager[_0x42b67d(0x65a)](_0x3f8226));this[_0x42b67d(0x2ce)](_0x42b67d(0xae8)),this[_0x42b67d(0x2ce)](_0x42b67d(0xa1c)),this['push']('addText',_0x238a42),this[_0x42b67d(0x2ce)](_0x42b67d(0x64b));}},VisuMZ[_0x5d4113(0x710)]['Window_BattleLog_clear']=Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x192)],Window_BattleLog['prototype'][_0x5d4113(0x192)]=function(){const _0x368295=_0x5d4113;VisuMZ[_0x368295(0x710)][_0x368295(0xba3)][_0x368295(0x701)](this),this[_0x368295(0xa6b)]();},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xc7e)]=Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0xa1c)],Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0xa1c)]=function(){const _0x298b55=_0x5d4113;VisuMZ[_0x298b55(0x710)][_0x298b55(0xc7e)][_0x298b55(0x701)](this),this[_0x298b55(0xa6b)]();},VisuMZ['BattleCore'][_0x5d4113(0x6af)]=Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0xae8)],Window_BattleLog['prototype'][_0x5d4113(0xae8)]=function(){const _0x311ebd=_0x5d4113;VisuMZ['BattleCore'][_0x311ebd(0x6af)][_0x311ebd(0x701)](this),this[_0x311ebd(0x95e)](),this['callNextMethod']();},VisuMZ['BattleCore']['Window_BattleLog_popupDamage']=Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x6f2)],Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x6f2)]=function(_0x239d94){const _0x83962c=_0x5d4113;VisuMZ[_0x83962c(0x710)][_0x83962c(0x463)][_0x83962c(0x701)](this,_0x239d94),this['callNextMethod']();},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x430)]=function(){const _0x434de9=_0x5d4113;let _0x44f0f6=0x0;this['_baseLineStack'][_0x434de9(0x7da)]>0x0&&(_0x44f0f6=this['_baseLineStack'][this[_0x434de9(0x5a6)][_0x434de9(0x7da)]-0x1]),this['_lines'][_0x434de9(0x7da)]>_0x44f0f6?'WqrmP'!==_0x434de9(0xa38)?this[_0x434de9(0x39c)]=_0xfabc81[_0x434de9(0xab3)]:this[_0x434de9(0x64b)]():this[_0x434de9(0xa6b)]();},VisuMZ[_0x5d4113(0x710)]['Window_BattleLog_performActionStart']=Window_BattleLog['prototype']['performActionStart'],Window_BattleLog['prototype'][_0x5d4113(0x68d)]=function(_0x129939,_0x502952){const _0xe1262f=_0x5d4113;VisuMZ[_0xe1262f(0x710)][_0xe1262f(0x866)][_0xe1262f(0x701)](this,_0x129939,_0x502952),this[_0xe1262f(0xa6b)]();},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xc1e)]=Window_BattleLog[_0x5d4113(0x44d)]['performAction'],Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0xc78)]=function(_0x22bdbe,_0x1a3603){const _0x316e1d=_0x5d4113;VisuMZ[_0x316e1d(0x710)][_0x316e1d(0xc1e)]['call'](this,_0x22bdbe,_0x1a3603),this['callNextMethod']();},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x1b9)]=Window_BattleLog[_0x5d4113(0x44d)]['performActionEnd'],Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x1c1)]=function(_0x2f2dc0){const _0x47fd47=_0x5d4113;VisuMZ[_0x47fd47(0x710)]['Window_BattleLog_performActionEnd'][_0x47fd47(0x701)](this,_0x2f2dc0);for(const _0x26ad8e of BattleManager[_0x47fd47(0x2c1)]()){if(_0x47fd47(0x7b6)!==_0x47fd47(0x3fa)){if(!_0x26ad8e)continue;if(_0x26ad8e[_0x47fd47(0xa26)]())continue;_0x26ad8e[_0x47fd47(0xaf5)]();}else return this[_0x47fd47(0x2de)]()&&this['currentAction']()['item']()&&!this[_0x47fd47(0x2de)]()['isMagical']();}this['callNextMethod']();},VisuMZ['BattleCore'][_0x5d4113(0x415)]=Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x353)],Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x353)]=function(_0x414637){const _0x5301a3=_0x5d4113;VisuMZ[_0x5301a3(0x710)][_0x5301a3(0x415)][_0x5301a3(0x701)](this,_0x414637),this[_0x5301a3(0xa6b)]();},VisuMZ['BattleCore'][_0x5d4113(0x327)]=Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x5ca)],Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x5ca)]=function(_0x47ca2b){const _0x5b86b8=_0x5d4113;VisuMZ['BattleCore'][_0x5b86b8(0x327)][_0x5b86b8(0x701)](this,_0x47ca2b),this['callNextMethod']();},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x270)]=Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x171)],Window_BattleLog[_0x5d4113(0x44d)]['performRecovery']=function(_0x2be976){const _0x4f7013=_0x5d4113;VisuMZ[_0x4f7013(0x710)][_0x4f7013(0x270)][_0x4f7013(0x701)](this,_0x2be976),this[_0x4f7013(0xa6b)]();},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x8b6)]=Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x2d3)],Window_BattleLog['prototype'][_0x5d4113(0x2d3)]=function(_0x17436a){const _0x30f0e8=_0x5d4113;VisuMZ[_0x30f0e8(0x710)][_0x30f0e8(0x8b6)][_0x30f0e8(0x701)](this,_0x17436a),this[_0x30f0e8(0xa6b)]();},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0xbc2)]=Window_BattleLog['prototype'][_0x5d4113(0x49e)],Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x49e)]=function(_0x421f19){const _0x28a905=_0x5d4113;VisuMZ[_0x28a905(0x710)][_0x28a905(0xbc2)][_0x28a905(0x701)](this,_0x421f19),this[_0x28a905(0xa6b)]();},VisuMZ['BattleCore']['Window_BattleLog_performCounter']=Window_BattleLog['prototype'][_0x5d4113(0x5fc)],Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x5fc)]=function(_0x4e98fa){const _0x23e9fa=_0x5d4113;VisuMZ[_0x23e9fa(0x710)]['Window_BattleLog_performCounter']['call'](this,_0x4e98fa),this[_0x23e9fa(0xa6b)]();},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x736)]=Window_BattleLog[_0x5d4113(0x44d)]['performReflection'],Window_BattleLog['prototype']['performReflection']=function(_0x558f6b){const _0x228523=_0x5d4113;VisuMZ[_0x228523(0x710)][_0x228523(0x736)]['call'](this,_0x558f6b),this[_0x228523(0xa6b)]();},VisuMZ['BattleCore'][_0x5d4113(0x17e)]=Window_BattleLog[_0x5d4113(0x44d)]['performSubstitute'],Window_BattleLog['prototype']['performSubstitute']=function(_0x29dde1,_0x26d802){const _0x12e620=_0x5d4113;VisuMZ[_0x12e620(0x710)]['Window_BattleLog_performSubstitute']['call'](this,_0x29dde1,_0x26d802),this[_0x12e620(0xa6b)]();},VisuMZ[_0x5d4113(0x710)][_0x5d4113(0x1d2)]=Window_BattleLog['prototype'][_0x5d4113(0x47f)],Window_BattleLog['prototype'][_0x5d4113(0x47f)]=function(_0x498469){const _0x5eb29c=_0x5d4113;VisuMZ[_0x5eb29c(0x710)][_0x5eb29c(0x1d2)][_0x5eb29c(0x701)](this,_0x498469),this[_0x5eb29c(0xa6b)]();},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0x42e)]=function(_0xbf2157,_0x13ea65){const _0x95f5c9=_0x5d4113;_0xbf2157['performCastAnimation'](_0x13ea65),this[_0x95f5c9(0xa6b)]();},Window_BattleLog[_0x5d4113(0x44d)]['showEnemyAttackAnimation']=function(_0x18361f,_0x3f0471){const _0x24b506=_0x5d4113,_0x397c70=_0x18361f['attackAnimationId1']();_0x397c70<=0x0?SoundManager[_0x24b506(0x3cc)]():this[_0x24b506(0x58f)](_0x3f0471,_0x397c70);},Window_BattleLog[_0x5d4113(0x44d)]['applyImmortal']=function(_0x4748ee,_0x23c790,_0x36e8cc){const _0x3efff4=_0x5d4113,_0x162122=[_0x4748ee][_0x3efff4(0x545)](_0x23c790);for(const _0x25f985 of _0x162122){if(_0x3efff4(0xb10)==='gFNWz'){if(!_0x25f985)continue;_0x25f985['setImmortal'](_0x36e8cc);}else return _0x3d3557['BattleCore'][_0x3efff4(0x326)][_0x3efff4(0x9c4)][_0x3efff4(0x5c2)];}this['callNextMethod']();},Window_BattleLog['prototype'][_0x5d4113(0x542)]=function(_0x5db4e9){this['_waitCount']=_0x5db4e9;},Window_BattleLog[_0x5d4113(0x44d)]['requestMotion']=function(_0x16ff5d,_0x39e14f){const _0x37918c=_0x5d4113;for(const _0xf0d835 of _0x16ff5d){if(!_0xf0d835)continue;_0xf0d835[_0x37918c(0xb5c)](_0x39e14f);}this[_0x37918c(0xa6b)]();},Window_BattleLog['prototype'][_0x5d4113(0xa1f)]=function(_0x1f9792,_0x5cf46f,_0x46a37b,_0x47941f,_0x38493b,_0x435b6e){const _0x5cc80c=_0x5d4113;_0x1f9792[_0x5cc80c(0xbd5)](_0x5cf46f,_0x46a37b,_0x47941f,_0x38493b,_0x435b6e,-0x1),this[_0x5cc80c(0xa6b)]();},Window_BattleLog[_0x5d4113(0x44d)][_0x5d4113(0xb81)]=function(_0x2c1cc0,_0x34f186,_0x39a68a,_0x4de1d1,_0x24fff9,_0x5f5230,_0x39c102){const _0xc97379=_0x5d4113,_0x314765=Math[_0xc97379(0x15d)](..._0x34f186[_0xc97379(0x390)](_0x50e4a9=>_0x50e4a9['battler']()[_0xc97379(0x8bf)]-_0x50e4a9[_0xc97379(0x3ee)]()['mainSpriteWidth']()/0x2)),_0x494408=Math[_0xc97379(0xbcc)](..._0x34f186[_0xc97379(0x390)](_0x25bfe5=>_0x25bfe5[_0xc97379(0x3ee)]()[_0xc97379(0x8bf)]+_0x25bfe5[_0xc97379(0x3ee)]()['mainSpriteWidth']()/0x2)),_0x12f70c=Math[_0xc97379(0x15d)](..._0x34f186[_0xc97379(0x390)](_0x2d3346=>_0x2d3346[_0xc97379(0x3ee)]()[_0xc97379(0x559)]-_0x2d3346[_0xc97379(0x3ee)]()[_0xc97379(0x8a4)]())),_0x51059f=Math[_0xc97379(0xbcc)](..._0x34f186[_0xc97379(0x390)](_0x11781f=>_0x11781f[_0xc97379(0x3ee)]()[_0xc97379(0x559)])),_0x2a6ace=_0x34f186[_0xc97379(0x475)](_0x353bce=>_0x353bce['isActor']())[_0xc97379(0x7da)],_0x1de4f0=_0x34f186[_0xc97379(0x475)](_0x5f37f7=>_0x5f37f7['isEnemy']())[_0xc97379(0x7da)];let _0x784838=0x0,_0x1b924d=0x0;if(_0x39a68a[_0xc97379(0xb51)](/front/i))'Neouh'===_0xc97379(0x195)?_0x784838=_0x2a6ace>=_0x1de4f0?_0x314765:_0x494408:(_0x574242[_0xc97379(0x710)][_0xc97379(0x954)]['call'](this,_0x17b242),this[_0xc97379(0xc72)](_0x2cc6b8),this[_0xc97379(0x605)]());else{if(_0x39a68a[_0xc97379(0xb51)](/middle/i)){if('YBBhm'==='yaaMj'){if(_0x129fc2[_0xc97379(0x978)])return _0x586a86[_0xc97379(0x978)](_0x40d7c7,_0x3a806b);let _0xafd3fa='';if(_0x2b1ff7[_0xc97379(0x4b0)](_0x3b1529))_0xafd3fa='Actor-%1-%2'[_0xc97379(0x85d)](_0x535a84['id'],_0x6bbb96);if(_0x4849a7[_0xc97379(0x4b0)](_0x52a9f9))_0xafd3fa=_0xc97379(0x2d0)[_0xc97379(0x85d)](_0x1d7115['id'],_0x2e3641);if(_0xbd69d6[_0xc97379(0x4b0)](_0x2e565b))_0xafd3fa='Skill-%1-%2'['format'](_0x55a566['id'],_0x307403);if(_0x4b5d80[_0xc97379(0x4b0)](_0x39cea2))_0xafd3fa=_0xc97379(0x9a5)[_0xc97379(0x85d)](_0x512d9e['id'],_0x48f5f4);if(_0x1d27e3[_0xc97379(0x4b0)](_0x1bea02))_0xafd3fa='Weapon-%1-%2'[_0xc97379(0x85d)](_0x396cf8['id'],_0x42183d);if(_0x383635[_0xc97379(0x4b0)](_0xfcb146))_0xafd3fa='Armor-%1-%2'[_0xc97379(0x85d)](_0x306172['id'],_0x42912d);if(_0x13c22b[_0xc97379(0x4b0)](_0x4e6b60))_0xafd3fa=_0xc97379(0xa7f)['format'](_0x253502['id'],_0x1fcd45);if(_0x41214f[_0xc97379(0x4b0)](_0x8fa211))_0xafd3fa=_0xc97379(0x4ba)[_0xc97379(0x85d)](_0x318f8e['id'],_0x202107);return _0xafd3fa;}else _0x784838=(_0x314765+_0x494408)/0x2,_0x39c102=-0x1;}else _0x39a68a[_0xc97379(0xb51)](/back/i)&&(_0xc97379(0x3b1)===_0xc97379(0x3b1)?_0x784838=_0x2a6ace>=_0x1de4f0?_0x494408:_0x314765:this['_escapeRatio']=_0x5b6388[_0xc97379(0x710)]['Settings'][_0xc97379(0x6c3)][_0xc97379(0x251)][_0xc97379(0x701)](this));}if(_0x39a68a[_0xc97379(0xb51)](/head/i))_0x1b924d=_0x12f70c;else{if(_0x39a68a[_0xc97379(0xb51)](/center/i))_0x1b924d=(_0x12f70c+_0x51059f)/0x2;else _0x39a68a[_0xc97379(0xb51)](/base/i)&&(_0x1b924d=_0x51059f);}_0x2c1cc0[_0xc97379(0xbd5)](_0x784838,_0x1b924d,_0x4de1d1,_0x24fff9,_0x5f5230,_0x39c102),this[_0xc97379(0xa6b)]();},Window_BattleLog[_0x5d4113(0x44d)]['performJump']=function(_0x5be055,_0x34f764,_0x1ada86){const _0x4fd2c3=_0x5d4113;for(const _0x1c2246 of _0x5be055){if(_0x4fd2c3(0xbda)===_0x4fd2c3(0x8ad))return _0xf60c89[_0x4fd2c3(0x710)]['Settings'][_0x4fd2c3(0x9c4)][_0x4fd2c3(0x61f)];else{if(!_0x1c2246)continue;_0x1c2246[_0x4fd2c3(0x3e8)](_0x34f764,_0x1ada86);}}this[_0x4fd2c3(0xa6b)]();};